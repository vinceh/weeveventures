<?php

define('USER_RID', 3);
define('CORP_RID', 4);
define('NPO_RID', 5);

/*
 * Implementation hook_menu
 */
function weeve_registration_menu() {
  $items = array();

  $items['signup'] = array(
    'title' => '',
    'access callback' => 'weeve_registration_access',
    'page callback' => 'weeve_registration_page',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['signup/user'] = array(
    'title' => '',
    'access callback' => 'weeve_registration_access',
    'page callback' => 'weeve_registration_user_page',
    'type' => MENU_CALLBACK,
  );

  $items['signup/npo'] = array(
    'title' => '',
    'access callback' => 'weeve_registration_access',
    'page callback' => 'weeve_registration_npo_page',
    'type' => MENU_CALLBACK,
  );

  $items['signup/corp'] = array(
    'title' => '',
    'access callback' => 'weeve_registration_access',
    'page callback' => 'weeve_registration_copr_page',
    'type' => MENU_CALLBACK,
  );

  $items['signup/check/%/%/%'] = array(
    'title' => 'Validate email',
    'page callback' => 'weeve_registration_validate_email_callback',
    'page arguments' => array( 2, 3, 4),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['admin/settings/weeve_registration'] = array(
    'title' => 'Weeve register',
    'access arguments' => array('administer content'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('weeve_registration_admin_form'),
  );

  return $items;
}


/*
 * Implementation hook_theme
 */
function weeve_registration_theme() {
  return array(
    'wevee_register_page' => array(
      'template' => 'tpl/register_page'
    ),
    'wevee_textfield_inline' => array(
      'arguments' => array('element' => NULL),
    ),
    'wevee_password_inline' => array(
      'arguments' => array('element' => NULL),
    ),
    'wevee_form_element_inline' => array(
      'arguments' => array('element' => NULL, 'value' => NULL),
    ),
  );
}

/*
 * Implementation hook_mail
 */
function weeve_registration_mail($key, &$message, $params) {
  $language = $message['language'];
  $variables = user_mail_tokens($params['account'], $language);
  switch ($key) {
    case 'weeve_user_notify':
      $variables['!verify_url'] = weeve_registration_check_email_url($params['account']);
      $message['subject'] = t(variable_get('user_subject', ''), $variables, $language->language);
      $message['body'][] = t(variable_get('user_body', ''), $variables, $language->language);
      break;

    case 'weeve_npo_notify';
      $message['subject'] = t(variable_get('npo_subject', ''), $variables, $language->language);
      $message['body'][] = t(variable_get('npo_body', ''), $variables, $language->language);
      break;

    case 'weeve_corp_notify';
      $message['subject'] = t(variable_get('npo_subject', ''), $variables, $language->language);
      $message['body'][] = t(variable_get('npo_body', ''), $variables, $language->language);
      break;
  }
}

function weeve_registration_access() {
  global $user;
  if ($user->uid == 0) {
    return TRUE;
  } else {
    return FALSE;
  }
}

function weeve_registration_page() {
  drupal_add_css(drupal_get_path('module', 'weeve_registration') .'/css/signup.css');
  return theme('wevee_register_page');
}

function weeve_registration_user_page() {
  drupal_add_css(drupal_get_path('module', 'weeve_registration') .'/css/signup.css');
  $form = drupal_get_form('weeve_registration_user_form');
  return $form;
}

function weeve_registration_npo_page() {
  drupal_add_css(drupal_get_path('module', 'weeve_registration') .'/css/signup.css');
  return drupal_get_form('weeve_registration_npo_form');
}

function weeve_registration_copr_page() {
  drupal_add_css(drupal_get_path('module', 'weeve_registration') .'/css/signup.css');
  return drupal_get_form('weeve_registration_corp_form');
}

function weeve_registration_user_form() {
  $form = array();

  $form['header'] = array(
    '#prefix' => '<div class="signup-header">',
    '#suffix' => '</div>'
  );

  $form['header']['title'] = array(
    '#prefix' => '<div class="signup-title">',
    '#suffix' => '</div>',
    '#value' => t('Join the community'),
  );

  $form['header']['sub-title'] = array(
    '#prefix' => '<div class="signup-subtitle">',
    '#suffix' => '</div>',
    '#value' => t('Bring out your inner philantropist.'),
  );

  $form['form-wrapper'] = array(
    '#value' => '<div class="signup-form ">',
  );

  $form['fullname'] = array(
    '#type' => 'textfield',
    '#title' => t('Full name'),
    '#description' => t('Your first and last name'),
    '#required' => true,
    '#theme' => 'wevee_textfield_inline',
  );

  $form['email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email'),
    '#description' => t('Don\'t worry, you can hide this.'),
    '#required' => true,
    '#theme' => 'wevee_textfield_inline',
  );

  $form['password'] = array(
    '#type' => 'password',
    '#title' => t('Password'),
    '#description' => t('At least 7 characters with 1 number'),
    '#required' => true,
    '#theme' => 'wevee_password_inline',
  );

  $form['agreement'] = array(
    '#prefix' => '<div class="agreement">',
    '#value' => variable_get('weeve_signup_terms', ''),
    '#suffix' => '</div>'
  );

  $form['create'] = array(
    '#type' => 'submit',
    '#value' => t('Create account'),
    '#attributes' => array('class' => 'signup-submit'),
  );

  $form['form-wrapper-2'] = array(
    '#value' => '</div>',
  );

  $form['footer'] = array(
    '#value' => '<div class="footer"></div>',
  );

  $form['#redirect'] = '';
  return $form;
}

function weeve_registration_user_form_validate(&$form, &$form_state) {
  $email = $form_state['values']['email'];
  if (!valid_email_address($email)) {
    form_set_error('email', t('No valid email'));
  }
  if (weeve_registration_exist_email($email)) {
    form_set_error('email', t('Email already exist in database'));
  }
  // TODO: password validation
}

function weeve_registration_exist_email($mail) {
  if ($exist = db_result(db_query("SELECT COUNT(*) FROM {users} WHERE mail = '%s';", $mail))){
    return TRUE;
  }
  return FALSE;
}

function weeve_registration_user_form_submit(&$form, &$form_state) {
  $fullname = $form_state['values']['fullname'];
  $email = $form_state['values']['email'];
  $password = $form_state['values']['password'];

  $user = array(
    'name' => $fullname,
    'pass' => $password,
    'mail' => $email,
    'status' => 0,
    'init' => $email,
    'roles' => array(DRUPAL_AUTHENTICATED_RID => 'authenticated user', USER_RID => 'user'),
  );

  $account = user_save(null, $user);
  $profile = weeve_registration_create_profile($account, $info = array('type' => 'user'));

  weeve_registration_notify('weeve_user_notify', $account);
  drupal_set_message(t('User has been created. Please check your email.'));
}

function weeve_registration_create_profile($account, $info) {
  $time = time();
  $profile = new stdClass();
  $profile->title = $account->name;
  $profile->body = '';
  $profile->type = 'profile';
  $profile->created = $time;
  $profile->changed = $time;
  $profile->status = 1;
  $profile->promote = 0;
  $profile->sticky = 0;
  $profile->format = 1; // Filtered HTML
  if ($info['type'] == 'user') {
    $profile->field_user_full_name[0]['value'] = $account->name;
  }
  $profile->field_npo_name[0]['value'] = $info['organization'];
  $profile->field_npo_code[0]['value'] = $info['businesscode'];
  $profile->field_npo_number[0]['value'] = $info['businessnumber'];
  $profile->field_npo_website[0]['url'] = $info['website'];
  $profile->field_npo_representative_name[0]['value'] = $info['representative_name'];
  $profile->field_account_type[0]['value'] = $info['type'];
  $profile->field_npo_bio[0]['value'] = '';
  $profile->field_npo_about[0]['value'] = '';

  $profile->uid = $account->uid;
  node_save($profile);

  return $profile;
}

function weeve_registration_check_email_url($account) {
  $timestamp = time();
  return url("signup/check/$account->uid/$timestamp/". user_pass_rehash($account->pass, $timestamp, $account->login), array('absolute' => TRUE));
}

function weeve_registration_validate_email_callback($uid, $timestamp, $hashed_pass) {
  $user = user_load($uid);
  if ($hashed_pass == user_pass_rehash($user->pass, $timestamp, $user->login)) {
    weeve_registration_user_activate($user);
    drupal_set_message(t('Thanks! Your email checked. You are now logged in.'),'status');
    drupal_goto();
  } else {
    drupal_set_message(t('Invalid url'),'error');
    drupal_goto();
  }
}

function weeve_registration_user_activate($account) {
  user_save($account, array('status' => 1));
}

function weeve_registration_notify($op, $account) {
  switch($op) {
    case 'weeve_user_notify':
      $params['account'] = $account;
      drupal_mail('weeve_registration', 'weeve_user_notify', $account->mail, user_preferred_language($account), $params);
      break;

    case 'weeve_corp_notify':
      $params['account'] = $account;
      drupal_mail('weeve_registration', 'weeve_corp_notify', $account->mail, user_preferred_language($account), $params);
      break;

    case 'weeve_npo_notify':
      $params['account'] = $account;
      drupal_mail('weeve_registration', 'weeve_npo_notify', $account->mail, user_preferred_language($account), $params);
      break;
  }
}

function weeve_registration_npo_form() {
  $form = array();

  $form['header'] = array(
    '#prefix' => '<div class="signup-header">',
    '#suffix' => '</div>'
  );

  $form['header']['title'] = array(
    '#prefix' => '<div class="signup-title">',
    '#suffix' => '</div>',
    '#value' => t('Build the Community'),
  );

  $form['header']['sub-title'] = array(
    '#prefix' => '<div class="signup-subtitle">',
    '#suffix' => '</div>',
    '#value' => t('Claim your account as a non-profit organization. We will verify your existence and contact you personally to get you started.'),
  );

  $form['form-wrapper'] = array(
    '#value' => '<div class="signup-form ">',
  );

  $form['organization'] = array(
    '#type' => 'textfield',
    '#title' => t('Organization Name'),
    '#description' => t('Full name as registered'),
    '#required' => true,
    '#theme' => 'wevee_textfield_inline',
  );

  $form['email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email'),
    '#description' => t('Don\'t worry, you can hide this.'),
    '#required' => true,
    '#theme' => 'wevee_textfield_inline',
  );

  $form['businesscode'] = array(
    '#type' => 'textfield',
    '#title' => t('Business Code'),
    '#description' => t('So we can verify your existence'),
    '#required' => true,
    '#theme' => 'wevee_textfield_inline',
  );

  $form['businessnumber'] = array(
    '#type' => 'textfield',
    '#title' => t('Business Number'),
    '#description' => t('We will call you!'),
    '#required' => true,
    '#theme' => 'wevee_textfield_inline',
  );

  $form['website'] = array(
    '#type' => 'textfield',
    '#title' => t('Business Website (optional)'),
    '#description' => t('Where do people find you on the web?'),
    '#theme' => 'wevee_textfield_inline',
  );

  $form['representative_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Representative Name'),
    '#description' => t('First and last name'),
    '#theme' => 'wevee_textfield_inline',
  );

  $form['agreement'] = array(
    '#prefix' => '<div class="agreement">',
    '#value' => variable_get('weeve_signup_terms', ''),
    '#suffix' => '</div>'
  );

  $form['create'] = array(
    '#type' => 'submit',
    '#value' => t('Create account'),
    '#attributes' => array('class' => 'signup-submit'),
  );

  $form['form-wrapper-2'] = array(
    '#value' => '</div>',
  );

  $form['footer'] = array(
    '#value' => '<div class="footer"></div>',
  );

  $form['#redirect'] = '';
  return $form;
}

function weeve_registration_npo_form_validate(&$form, &$form_state) {
  if ($form_state['values']['website'] && !valid_url($form_state['values']['website'])) {
    form_set_error('website', t('Invalid URL'));
  }
}

function weeve_registration_npo_form_submit(&$form, &$form_state) {
  $info['organization'] = $form_state['values']['organization'];
  $info['businesscode'] = $form_state['values']['businesscode'];
  $info['businessnumber'] = $form_state['values']['businessnumber'];
  $info['website'] = $form_state['values']['website'];
  $info['representative_name'] = $form_state['values']['representative_name'];
  $info['type'] = 'npo';

  $password = user_password(6);

  $user = array(
    'name' => $info['organization'],
    'pass' => $password,
    'mail' => $form_state['values']['email'],
    'status' => 0,
    'init' => $form_state['values']['email'],
    'roles' => array(DRUPAL_AUTHENTICATED_RID => 'authenticated user', NPO_RID => 'npo'),
  );

  $account = user_save(null, $user);
  $profile = weeve_registration_create_profile($account, $info);

  // Add plain text password into user account to generate mail tokens.
  $account->password = $password;
  weeve_registration_notify('weeve_npo_notify', $account);
  drupal_set_message(t('NPO has been created. Check Your email.'));
}


function weeve_registration_corp_form() {
  $form = weeve_registration_npo_form();
  return $form;
}

function weeve_registration_corp_form_validate(&$form, &$form_state) {
  if ($form_state['values']['website'] && !valid_url($form_state['values']['website'])) {
    form_set_error('website', t('Invalid URL'));
  }
}

function weeve_registration_corp_form_submit(&$form, &$form_state) {
  $info['organization'] = $form_state['values']['organization'];
  $info['businesscode'] = $form_state['values']['businesscode'];
  $info['businessnumber'] = $form_state['values']['businessnumber'];
  $info['website'] = $form_state['values']['website'];
  $info['representative_name'] = $form_state['values']['representative_name'];
  $info['type'] = 'corp';

  $password = user_password(6);

  $user = array(
    'name' => $info['organization'],
    'pass' => $password,
    'mail' => $form_state['values']['email'],
    'status' => 0,
    'init' => $form_state['values']['email'],
    'roles' => array(DRUPAL_AUTHENTICATED_RID => 'authenticated user', CORP_RID => 'corporate'),
  );

  $account = user_save(null, $user);
  $profile = weeve_registration_create_profile($account, $info);

  // Add plain text password into user account to generate mail tokens.
  $account->password = $password;
  weeve_registration_notify('weeve_corp_notify', $account);
  drupal_set_message(t('Corporate account has been created. Check Your email.'));
}

function weeve_registration_admin_form() {
  $form = array();

  $form['user_notify'] = array(
    '#type' => 'fieldset',
    '#title' => t('User notify'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['user_notify']['user_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#default_value' => variable_get('user_subject', ''),
  );

  $form['user_notify']['user_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Subject'),
    '#default_value' => variable_get('user_body', ''),
  );

  $form['npo_notify'] = array(
    '#type' => 'fieldset',
    '#title' => t('NPO notify. Awaiting administrator approval'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['npo_notify']['npo_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#default_value' => variable_get('npo_subject', ''),
  );

  $form['npo_notify']['npo_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Subject'),
    '#default_value' => variable_get('npo_body', ''),
  );


  $form['weeve_signup_terms'] = array(
    '#type' => 'textarea',
    '#title' => t('Terms'),
    '#default_value' => variable_get('weeve_signup_terms', ''),
  );

  return system_settings_form($form);
}

function theme_wevee_textfield_inline($element) {
  $size = empty($element['#size']) ? '' : ' size="' . $element['#size'] . '"';
  $maxlength = empty($element['#maxlength']) ? '' : ' maxlength="' . $element['#maxlength'] . '"';
  $class = array('form-text');
  $extra = '';
  $output = '';

  if ($element['#autocomplete_path'] && menu_valid_path(array('link_path' => $element['#autocomplete_path']))) {
    drupal_add_js('misc/autocomplete.js');
    $class[] = 'form-autocomplete';
    $extra = '<input class="autocomplete" type="hidden" id="' . $element['#id'] . '-autocomplete" value="' . check_url(url($element['#autocomplete_path'], array('absolute' => TRUE))) . '" disabled="disabled" />';
  }
  _form_set_class($element, $class);

/*  if (isset($element['#field_prefix'])) {
    $output .= '<span class="field-prefix">' . $element['#field_prefix'] . '</span> ';
  }*/

  $output .= '<input type="text"' . $maxlength . ' name="' . $element['#name'] . '" id="' . $element['#id'] . '"' . $size . ' value="' . check_plain($element['#value']) . '"' . drupal_attributes($element['#attributes']) . ' />';

  if (isset($element['#field_suffix'])) {
    $output .= ' <span class="field-suffix">' . $element['#field_suffix'] . '</span>';
  }

  return theme('wevee_form_element_inline', $element, $output) . $extra;
}

function theme_wevee_form_element_inline($element, $value) {
  // This is also used in the installer, pre-database setup.
  $t = get_t();

  $output = '<div class="form-item"';
  if (!empty($element['#id'])) {
    $output .= ' id="' . $element['#id'] . '-wrapper"';
  }
  $output .= ">\n";
  $required = !empty($element['#required']) ? '<span class="form-required" title="' . $t('This field is required.') . '">*</span>' : '';

  if (!empty($element['#title'])) {
    $title = $element['#title'];
    $output .= "<div class='label'>";
    if (!empty($element['#id'])) {
      $output .= ' <label for="' . $element['#id'] . '">' . $t('!title: !required', array('!title' => filter_xss_admin($title), '!required' => $required)) . "</label>\n";
    }
    else {
      $output .= ' <label>' . $t('!title: !required', array('!title' => filter_xss_admin($title), '!required' => $required)) . "</label>\n";
    }
    $output .= "</div>";
  }

  $output .= "<div class='field'>";

  $output .= " $value\n";

  if (!empty($element['#description'])) {
    $output .= ' <div class="description">' . $element['#description'] . "</div>\n";
  }

  $output .= "</div>";

  $output .= "</div>\n";

  return $output;
}

function theme_wevee_password_inline($element) {
  $size = $element['#size'] ? ' size="' . $element['#size'] . '" ' : '';
  $maxlength = $element['#maxlength'] ? ' maxlength="' . $element['#maxlength'] . '" ' : '';

  _form_set_class($element, array('form-text'));
  $output = '<input type="password" name="' . $element['#name'] . '" id="' . $element['#id'] . '" ' . $maxlength . $size . drupal_attributes($element['#attributes']) . ' />';
  return theme('wevee_form_element_inline', $element, $output);
}
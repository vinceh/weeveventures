<?php

/*
 * Implementation hook_init
 */
function weeve_donation_init() {
  $path = drupal_get_path('module', 'weeve_donation');
  drupal_add_js($path .'/js/weeve_donation.js');
}

/*
 * Implementation hook_menu()
 */
function weeve_donation_menu() {
  $items = array();

  $items['ajax/donation/submit'] = array(
    'title' => '',
    'access callback' => TRUE,
    'page callback' => 'weeve_donation_ajax_callback',
    'type' => MENU_CALLBACK,
  );

  $items['donation/preapproval_payment/success'] = array(
    'title' => '',
    'access callback' => TRUE,
    'page callback' => 'weeve_donation_preapproval_payment_success_callback',
    'type' => MENU_CALLBACK,
  );

  $items['donation/preapproval_payment/cancelled'] = array(
    'title' => '',
    'access callback' => TRUE,
    'page callback' => 'weeve_donation_preapproval_payment_cancelled_callback',
    'type' => MENU_CALLBACK,
  );

  $items['donation/test'] = array(
    'title' => '',
    'access callback' => TRUE,
    'page callback' => 'weeve_donation_test_callback',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/*
 * Submit form.
 */
function weeve_donation_ajax_callback() {
  $response = array('status' => false);

  if (isset($_POST['amount']) && check_plain($_POST['amount']) && isset($_POST['nid']) && check_plain($_POST['nid']) && isset($_POST['uid']) && check_plain($_POST['uid'])) {
    $amount = $_POST['amount'];
    $nid = $_POST['nid'];
    $uid = $_POST['uid'];

    $node = node_load($nid);
    $user = user_load($uid);

    //@todo: check start date
    //$resArray = weeve_donation_preapproval(date('Y-m-d\TH:i:s'), $node->field_project_end[0]['value'], $amount);
    $resArray = weeve_donation_preapproval('2012-01-15', $node->field_project_end[0]['value'], $amount);

    $response['status'] = TRUE;
    $response['data'] = $resArray;
    if ($resArray['responseEnvelope.ack'] == 'Success') {
      $url = weeve_donation_redirect('_ap-preapproval', $resArray['preapprovalKey'], true);
      $response['url'] = $url;

      $_SESSION['donation_info'] = array(
        'node' => $node,
        'user' => $user,
        'amount' => $amount,
        'pp_response' => $resArray,
      );

    }
    else {
      drupal_set_message(t('Error. Your donation not saved'), 'error');
      $response['url'] = $_SERVER['HTTP_REFERER']; // redirect on project page
    }
  }

  drupal_json($response);
  exit(0);
}

/*
 * Save or Edit donation
 */
function weeve_donation_preapproval_payment_save($amount, $uid, $nid, $preapproval_key, $paid = 0, $archived = 0, $pid = null) {
  $donate = new stdClass();
  $donate->uid = $uid;
  $donate->nid = $nid;
  $donate->amount = $amount;
  $donate->paid = $paid;
  $donate->archived = $archived;
  $donate->preapproval_key = $preapproval_key;

  if ($pid) {
    $donate->pid = $pid;
    drupal_write_record('weeve_preapproval_payments', $donate, 'pid');
  }
  else {
    drupal_write_record('weeve_preapproval_payments', $donate);
  }
  return $donate;
}

/*
 * Payment success callback
 */
function weeve_donation_preapproval_payment_success_callback() {
  $donate = $_SESSION['donation_info'];
  unset($_SESSION['donation_info']);
  $preapproval_payment = weeve_donation_preapproval_payment_save($donate['amount'], $donate['user']->uid, $donate['node']->nid, $donate['pp_response']['preapprovalKey']);
  drupal_set_message(t('Your donate has beed saved'));
  drupal_goto();
}

/*
 * Payment canceled callback
 */
function weeve_donation_preapproval_payment_cancelled_callback() {
  drupal_goto();
}

function weeve_donation_redirect($cmd, $key, $sandbox) {
  if (isset($key) && isset($cmd)) {
    if ($cmd == '_ap-payment') {
      $options = 'cmd=' . $cmd . '&paykey=' . $key;
    }
    else {
      $options = 'cmd=' . $cmd . '&preapprovalkey=' . $key;
    }

    $payPalURL = "";
    if ($sandbox) {
      $payPalURL = "https://www.sandbox.paypal.com/webscr?" . $options;
    }
    else {
      $payPalURL = "https://www.paypal.com/webscr?" . $options;
    }

  }
  else {
    drupal_set_message(t('PayPal operation aborted: Missing Pay Key or Adaptive Pay Command'), 'error');
    watchdog('weeve donate', t('Missing Pay Key or Adaptive Pay Command'), array(), WATCHDOG_ERROR);
    return FALSE;
  }

  return $payPalURL;
}


function weeve_donation_get_preapproval_by_nid($nid) {
  $query = "SELECT * FROM {weeve_preapproval_payments} WHERE nid = %d AND paid = %d AND archived = %d";
  $result = db_query($query, $nid, 0, 0);
  $donations = array();
  while ($row = db_fetch_object($result)) {
    $donations[$row->preapproval_key] = $row;
  }
  return $donations;
}

function weeve_donation_set_paid($pid) {
  $donate = new stdClass();
  $donate->pid = $pid;
  $donate->paid = 1;
  drupal_write_record('weeve_preapproval_payments', $donate, 'pid');
  return $donate;
}

function weeve_donation_set_archived($pid) {
  $donate = new stdClass();
  $donate->pid = $pid;
  $donate->archived = 1;
  drupal_write_record('weeve_preapproval_payments', $donate, 'pid');
  return $donate;
}

function weeve_donation_pay_success_project($nid) {
  // @todo: notify user via email?
  $donations = weeve_donation_get_preapproval_by_nid($nid);
  $recipient = 'dev_pp_1325213935_biz@shkuro.net';  //todo: change later
  foreach($donations as $key => $donate) {
    $node = node_load($donate->nid);
    $memo = 'Donate : '. $node->title;
    $res = weeve_donation_pay($key, $recipient, $donate->amount, $memo);
    if ($res['responseEnvelope.ack'] == 'Success') {
      weeve_donation_set_paid($donate->pid);
    }
    else {
      watchdog('weeve donate', t('!errorId: !message'), array('!errorId' => $res['error(0).errorId'], '!message' => $res['error(0).message']), WATCHDOG_ERROR);
    }
  }
}


/**
 * Preapproval API Operation
 *
 * @param $start_date
 * @param $end_date
 * @param $max_total_amount
 * @return array PayPal API response
 * @see https://www.x.com/developers/paypal/documentation-tools/api/preapproval-api-operation
 */
function weeve_donation_preapproval($start_date, $end_date, $max_total_amount) {
  module_load_include('php', 'weeve_donation', 'inc/CallerService');

  $request = array(
    'startingDate' => $start_date,
    'endingDate' => $end_date,
    'maxNumberOfPayments' => 1,
    'maxTotalAmountOfAllPayments' => $max_total_amount,
    'displayMaxTotalAmount' => TRUE,
    'currencyCode' => 'USD',
    'cancelUrl' => url('donation/preapproval_payment/cancelled', array('absolute' => TRUE)),
    'returnUrl' => url('donation/preapproval_payment/success', array('absolute' => TRUE)),
    'pinType' => 'NOT_REQUIRED',
    'requestEnvelope.errorLanguage' => 'en_US',
  );

  $nvp_str = drupal_query_string_encode($request);
  $resArray = hash_call("AdaptivePayments/Preapproval", $nvp_str);
  return $resArray;
}

/**
 *  Cancel Preapproval API Operation
 *
 *  @param: (string) preapproval_key
 *  @return (array) PayPal API response
 *  @see: https://www.x.com/developers/paypal/documentation-tools/api/cancelpreapproval-api-operation
 */
function weeve_donation_preapproval_cancel($preapproval_key) {
  module_load_include('php', 'weeve_donation', 'inc/CallerService');

  $request = array(
    'preapprovalKey' => $preapproval_key,
    'requestEnvelope.errorLanguage' => 'en_US',
  );

  $nvp_str = drupal_query_string_encode($request);
  $resArray = hash_call("AdaptivePayments/CancelPreapproval", $nvp_str);
  return $resArray;
}

/**
 * PreapprovalDetails API Operation
 *
 * @param $preapproval_key
 * @param bool $get_billing_address
 *  Optional
 * @return array PayPal API response
 * @see: https://www.x.com/developers/paypal/documentation-tools/api/preapprovaldetails-api-operation
 */
function weeve_donation_preapproval_details($preapproval_key, $get_billing_address = false) {
  module_load_include('php', 'weeve_donation', 'inc/CallerService');

  $request = array(
    'preapprovalKey' => $preapproval_key,
    'getBillingAddress' => $get_billing_address,
    'requestEnvelope.errorLanguage' => 'en_US',
  );

  $nvp_str = drupal_query_string_encode($request);
  $resArray = hash_call("AdaptivePayments/PreapprovalDetails", $nvp_str);
  return $resArray;
}

/**
 * Pay API Operation
 *
 * @param $key
 * @param $receiver
 * @param $amount
 * @param $currency
 * @param $memo
 * @return array
 * @see https://www.x.com/developers/paypal/documentation-tools/api/pay-api-operation
 */
function weeve_donation_pay($key, $receiver, $amount, $memo) {
  module_load_include('php', 'weeve_donation', 'inc/CallerService');
  $request = array(
    'preapprovalKey' => $key,
    'receiverList.receiver(0).email' => $receiver,
    'receiverList.receiver(0).amount' => $amount,
    'currencyCode' => 'USD',
    'actionType' => 'PAY',
    'feesPayer' => 'EACHRECEIVER',
    'cancelUrl' => 'http://weeveventures.dev',
    'returnUrl' => 'http://weeveventures.dev',
    'requestEnvelope.errorLanguage' => 'en_US',
    'memo' => $memo,
  );
  $nvp_str = drupal_query_string_encode($request);
  $resArray = hash_call("AdaptivePayments/Pay", $nvp_str);
  return $resArray;
}


function weeve_donation_test_callback() {
  die;
}
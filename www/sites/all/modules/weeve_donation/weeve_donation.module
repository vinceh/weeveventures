<?php
define('WEEVE_PROJECT_SUCCESS_PERCENT', 25);
/*
 * Implementation hook_init
 */
function weeve_donation_init() {
  $path = drupal_get_path('module', 'weeve_donation');
  drupal_add_js($path .'/js/weeve_donation.js');
}

/*
 * Implementation hook_menu()
 */
function weeve_donation_menu() {
  $items = array();

  $items['ajax/donation/submit'] = array(
    'title' => '',
    'access callback' => 'weeve_donation_access_callback',
    'page callback' => 'weeve_donation_ajax_callback',
    'type' => MENU_CALLBACK,
  );

  $items['ajax/donation/cancel'] = array(
    'title' => '',
    'access callback' => 'weeve_donation_access_callback',
    'page callback' => 'weeve_donation_cancel_ajax_callback',
    'type' => MENU_CALLBACK,
  );

  $items['ajax/donation/edit'] = array(
    'title' => '',
    'access callback' => 'weeve_donation_access_callback',
    'page callback' => 'weeve_donation_edit_ajax_callback',
    'type' => MENU_CALLBACK,
  );

  $items['donation/preapproval_payment/success'] = array(
    'title' => '',
    'access callback' => 'weeve_donation_access_callback',
    'page callback' => 'weeve_donation_preapproval_payment_success_callback',
    'type' => MENU_CALLBACK,
  );

  $items['donation/preapproval_payment/cancelled'] = array(
    'title' => '',
    'access callback' => 'weeve_donation_access_callback',
    'page callback' => 'weeve_donation_preapproval_payment_cancelled_callback',
    'type' => MENU_CALLBACK,
  );

  $items['donation/test'] = array(
    'title' => '',
    'access callback' => TRUE,
    'page callback' => 'weeve_donation_test_callback',
    'type' => MENU_CALLBACK,
  );

  $items['admin/settings/weeve_donation'] = array(
    'title' => 'Donation settings',
    'access arguments' => array('access content'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('weeve_donation_settings_form'),
  );

  $items['admin/content/payout'] = array(
    'title' => 'Manage Payout Requests',
    'page callback' => 'weeve_donation_manage_payout_request_page',
    'access arguments' => array('administer content'),
    'type' => MENU_NORMAL_ITEM
  );

  $items['payout/%/accept'] = array(
    'title' => 'Accept Payout Requests',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('weeve_donation_payout_accept_form', 1),
    'access arguments' => array('administer content'),
    'type' => MENU_CALLBACK
  );

  return $items;
}

/*
 * Access callback
 */
function weeve_donation_access_callback() {
  global $user;
  if ($user->uid > 0) {
    return TRUE;
  }
  return FALSE;
}


/*
 * Submit form.
 */
function weeve_donation_ajax_callback() {
  $response = array('status' => false);

  if (isset($_POST['amount']) && check_plain($_POST['amount']) && isset($_POST['nid']) && check_plain($_POST['nid']) && isset($_POST['uid']) && check_plain($_POST['uid'])) {
    $amount = $_POST['amount'];
    $nid = $_POST['nid'];
    $uid = $_POST['uid'];

    $node = node_load($nid);
    $user = user_load($uid);


    $date_time = new DateTime($node->field_project_end[0]['value']);
    $date_time->modify('+1 day');
    $endDate = $date_time->format('Y-m-d');

    $resArray = weeve_donation_preapproval(date('Y-m-d'), $endDate, $amount);

    $response['status'] = TRUE;
    $response['data'] = $resArray;
    if ($resArray['responseEnvelope.ack'] == 'Success') {

      $donation_info = array(
        'op' => 'create',
        'node' => $node,
        'user' => $user,
        'amount' => $amount,

        'pp_response' => $resArray,
      );
      $_SESSION['donation_info'] = $donation_info;
      $_SESSION['donation_request_url'] = $_SERVER['HTTP_REFERER'];
      $sandbox = variable_get('pp_api_sandbox', 1);
      $url = weeve_donation_redirect('_ap-preapproval', $resArray['preapprovalKey'], $sandbox);
      $response['url'] = $url;
    }
    else {
      drupal_set_message(t('Error. Your donation not saved'), 'error');
      $response['url'] = $_SERVER['HTTP_REFERER']; // redirect on project page
    }
  }

  drupal_json($response);
  exit(0);
}

/*
 * Cancel donate
 */
function weeve_donation_cancel_ajax_callback() {
  $response = array('status' => false);
  if (isset($_POST['pid']) && check_plain($_POST['pid'])) {
    $pid = $_POST['pid'];
    $response['status'] = TRUE;
    $preapproval = weeve_donation_get_preapproval_by_pid($pid);
    $node = node_load($preapproval->nid);
    $resArray = weeve_donation_preapproval_cancel($preapproval->preapproval_key);
    $_SESSION['donation_request_url'] = $_SERVER['HTTP_REFERER'];
    if ($resArray['responseEnvelope.ack'] == 'Success') {
      weeve_donation_remove_preapproval($pid);
      $donate = array(
        'donors' => weeve_donation_get_donors_by_project($node->nid),
        'total_amount' => weeve_donation_get_total_donated_by_nid($node->nid),
      );
      module_invoke_all('weeve_donation', $node, 'remove_preapproval', $donate);
      drupal_set_message(variable_get('donation_cancel_donate', t('Your donation cancelled')));
      $response['url'] = $_SERVER['HTTP_REFERER'];
    }
    $response['data'] = $resArray;
  }
  drupal_json($response);
  exit(0);
}

/*
 * Edit preapproval donate
 */
function weeve_donation_edit_ajax_callback() {
  $response = array('status' => false);

  if (isset($_POST['amount']) && check_plain($_POST['amount']) && isset($_POST['pid']) && check_plain($_POST['pid'])) {
    $amount = $_POST['amount'];
    $pid = $_POST['pid'];

    // load exist preapproval payment
    $preapproval = weeve_donation_get_preapproval_by_pid($pid);

    // cancel exist preapproval key
    $cancel_response = weeve_donation_preapproval_cancel($preapproval->preapproval_key);

    // create new preapproval key with new amount value
    $nid = $preapproval->nid;
    $node = node_load($nid);

    $date_time = new DateTime($node->field_project_end[0]['value']);
    $date_time->modify('+1 day');
    $endDate = $date_time->format('Y-m-d');

    $resArray = weeve_donation_preapproval(date('Y-m-d'), $endDate, $amount);

    $response['status'] = TRUE;
    $response['data'] = $resArray;
    if ($resArray['responseEnvelope.ack'] == 'Success') {

      $donation_info = array(
        'op' => 'edit',
        'pid' => $pid,
        'amount' => $amount,
        'node' => $node,
        'donors' => weeve_donation_get_donors_by_project($nid),
        'pp_response' => $resArray,
      );

      $_SESSION['donation_info'] = $donation_info;
      $_SESSION['donation_request_url'] = $_SERVER['HTTP_REFERER'];
      $sandbox = variable_get('pp_api_sandbox', 1);
      $url = weeve_donation_redirect('_ap-preapproval', $resArray['preapprovalKey'], $sandbox);
      $response['url'] = $url;
    }
    else {
      drupal_set_message(t('Error. Your donation not saved'), 'error');
      $response['url'] = $_SERVER['HTTP_REFERER']; // redirect on project page
    }
  }

  drupal_json($response);
  exit(0);
}


/*
 * Save or Edit donation
 */
function weeve_donation_preapproval_payment_save($amount, $uid, $nid, $preapproval_key, $paid = 0, $archived = 0, $pid = null, $created = null, $updated = null) {
  $donate = new stdClass();
  $donate->uid = $uid;
  $donate->nid = $nid;
  $donate->amount = $amount;
  $donate->paid = $paid;
  $donate->archived = $archived;
  $donate->preapproval_key = $preapproval_key;
  if ($created) {
    $donate->created = $created;
  }
  if ($updated) {
    $donate->updated = $updated;
  }
  if ($pid) {
    $donate->pid = $pid;
    drupal_write_record('weeve_preapproval_payments', $donate, 'pid');
  }
  else {
    drupal_write_record('weeve_preapproval_payments', $donate);
  }

  if ($paid) {
    weeve_report_update('donate approved', $amount);
  } else {
    weeve_report_update('donate pending', $amount);
  }

  return $donate;
}

/*
 * Payment success callback
 */
function weeve_donation_preapproval_payment_success_callback() {
  $donate = $_SESSION['donation_info'];
  unset($_SESSION['donation_info']);
  if ($donate['op'] == 'create') {
    $preapproval_payment = weeve_donation_preapproval_payment_save($donate['amount'], $donate['user']->uid, $donate['node']->nid, $donate['pp_response']['preapprovalKey'], 0, 0, null, time());
    $donate['total_amount'] = weeve_donation_get_total_donated_by_nid($donate['node']->nid);
    $donate['donors'] = weeve_donation_get_donors_by_project($donate['node']->nid);
    module_invoke_all('weeve_donation', $donate['node'], 'create_preapproval', $donate);
  } else if ($donate['op'] == 'edit') {
    $preapproval_payment = weeve_donation_preapproval_payment_save($donate['amount'], $donate['user']->uid, $donate['node']->nid, $donate['pp_response']['preapprovalKey'], 0, 0, $donate['pid'], null, time());
    $donate['total_amount'] = weeve_donation_get_total_donated_by_nid($donate['node']->nid);
    module_invoke_all('weeve_donation', $donate['node'], 'edit_preapproval', $donate);
  }
  drupal_set_message(variable_get('donation_add_donate', t('Your donate has beed saved')));

  if (isset($_SESSION['donation_request_url'])) {
    $path = $_SESSION['donation_request_url'];
    unset($_SESSION['donation_request_url']);
  } else {
    $path = '';
  }
  drupal_goto($path);
}

/*
 * Payment canceled callback
 */
function weeve_donation_preapproval_payment_cancelled_callback() {
  $donate = $_SESSION['donation_info'];
  unset($_SESSION['donation_info']);
  drupal_set_message(variable_get('donation_add_donate', t('Your donate has beed saved')));
  if (isset($_SESSION['donation_request_url'])) {
    $path = $_SESSION['donation_request_url'];
    unset($_SESSION['donation_request_url']);
  } else {
    $path = '';
  }
  drupal_goto($path);
}

function weeve_donation_redirect($cmd, $key, $sandbox) {
  if (isset($key) && isset($cmd)) {
    if ($cmd == '_ap-payment') {
      $options = 'cmd=' . $cmd . '&paykey=' . $key;
    }
    else {
      $options = 'cmd=' . $cmd . '&preapprovalkey=' . $key;
    }

    $payPalURL = "";
    if ($sandbox) {
      $payPalURL = "https://www.sandbox.paypal.com/webscr?" . $options;
    }
    else {
      $payPalURL = "https://www.paypal.com/webscr?" . $options;
    }

  }
  else {
    drupal_set_message(t('PayPal operation aborted: Missing Pay Key or Adaptive Pay Command'), 'error');
    watchdog('weeve donate', t('Missing Pay Key or Adaptive Pay Command'), array(), WATCHDOG_ERROR);
    return FALSE;
  }

  return $payPalURL;
}


function weeve_donation_get_preapproval_key_by_pid($pid) {
  $query = "SELECT preapproval_key FROM {weeve_preapproval_payments} WHERE pid = %d";
  $key = db_result(db_query($query, $pid));
  return $key;
}

function weeve_donation_get_preapproval_by_pid($pid) {
  $query = "SELECT * FROM {weeve_preapproval_payments} WHERE pid = %d";
  while ($row = db_fetch_object(db_query($query, $pid))) {
    return $row;
  }
}

function weeve_donation_remove_preapproval($pid) {
  $query = "DELETE FROM {weeve_preapproval_payments} WHERE pid = %d";
  db_query($query, $pid);
}

function weeve_donation_get_total_donated_by_nid($nid) {
  $query = 'SELECT SUM(amount) as total_amount FROM {weeve_preapproval_payments} WHERE nid = %d AND archived = %d';
  $result = db_result(db_query($query, $nid, 0));
  if (!$result) {
    $result = 0;
  }
  return $result;
}

function weeve_donation_get_preapproval_by_nid($nid) {
  $query = "SELECT * FROM {weeve_preapproval_payments} WHERE nid = %d AND paid = %d AND archived = %d";
  $result = db_query($query, $nid, 0, 0);
  $donations = array();
  while ($row = db_fetch_object($result)) {
    $donations[$row->preapproval_key] = $row;
  }
  return $donations;
}

function weeve_donation_get_preapproval_by_uid($uid, $paid = null, $archived = null) {
  $query = "SELECT * FROM {weeve_preapproval_payments} WHERE uid = %d";
  if ($paid || $archived) {
    $query .= ' AND paid = %d AND archived = %d';
  }

  $result = db_query($query, $uid, $paid, $archived);
  $donations = array();
  while ($row = db_fetch_object($result)) {
    $donations[$row->preapproval_key] = $row;
  }
  return $donations;
}

function weeve_donation_projects_is_donated($nid, $uid) {
  $query = "SELECT * FROM {weeve_preapproval_payments} WHERE nid = %d AND uid = %d";
  $result = db_query($query, $nid, $uid);
  while($row = db_fetch_object($result)) {
    return $row;
  }
}

function weeve_donation_mark_archive_payments_by_nid($nid) {
  $query = "UPDATE {weeve_preapproval_payments} SET archived = %d, updated = %d WHERE nid = %d";
  db_query($query, 1, time(), $nid);
}

function weeve_donation_set_paid($pid) {
  $donate = new stdClass();
  $donate->pid = $pid;
  $donate->paid = 1;
  $donate->updated = time();
  drupal_write_record('weeve_preapproval_payments', $donate, 'pid');
  return $donate;
}

function weeve_donation_set_archived($pid) {
  $donate = new stdClass();
  $donate->pid = $pid;
  $donate->archived = 1;
  $donate->updated = time();
  drupal_write_record('weeve_preapproval_payments', $donate, 'pid');
  return $donate;
}

function weeve_donation_pay_success_project($nid) {
  // @todo: notify user via email?
  $donations = weeve_donation_get_preapproval_by_nid($nid);
  $weeve_paypal = variable_get('pp_api_recipient', '');
  foreach($donations as $key => $donate) {
    $node = node_load($donate->nid);
    $uid = $node->uid;
    $npo = content_profile_load('profile', $uid);
    $recipients = array(
      array('email' => $npo->field_payment_paypal_email[0]['value'], 'amount' => $donate->amount * 0.95, 'primary' => TRUE),
      array('email' => $weeve_paypal, 'amount' => $donate->amount * 0.05),
    );
    $memo = 'Donate : '. $node->title;
    $res = weeve_donation_pay($key, $recipients, $donate->amount, $memo);
    if ($res['responseEnvelope.ack'] == 'Success') {
      $node->field_project_payed_out[0]['value'] = 1;
      node_save($node);
      module_invoke_all('weeve_donation', $node, 'paid');
      weeve_donation_set_paid($donate->pid);
      return TRUE;
    }
    else {
      watchdog('weeve donate', t('!errorId: !message'), array('!errorId' => $res['error(0).errorId'], '!message' => $res['error(0).message']), WATCHDOG_ERROR);
      return FALSE;
    }
  }
}

function weeve_donation_get_donors_by_project($nid) {
  $query = "SELECT COUNT(DISTINCT(uid)) FROM {weeve_preapproval_payments} WHERE nid = %d";
  $result = db_result(db_query($query, $nid));
  return $result;
}

function weeve_donation_settings_form() {
  $form = array();

  $form['pp_api_username'] = array(
    '#type' => 'textfield',
    '#title' => t('API username'),
    '#default_value' => variable_get('pp_api_username', ''),
  );

  $form['pp_api_password'] = array(
    '#type' => 'textfield',
    '#title' => t('API password'),
    '#default_value' => variable_get('pp_api_password', ''),
  );

  $form['pp_api_signature'] = array(
    '#type' => 'textfield',
    '#title' => t('API signature'),
    '#default_value' => variable_get('pp_api_signature', ''),
  );

  $form['pp_api_app_id'] = array(
    '#type' => 'textfield',
    '#title' => t('API APP ID'),
    '#default_value' => variable_get('pp_api_app_id', ''),
  );

  $form['pp_api_endpoint'] = array(
    '#type' => 'textfield',
    '#title' => t('API ENDPOINT'),
    '#default_value' => variable_get('pp_api_endpoint', 'https://svcs.sandbox.paypal.com/'),
  );

  $form['pp_api_recipient'] = array(
    '#type' => 'textfield',
    '#title' => t('Recipient'),
    '#default_value' => variable_get('pp_api_recipient', ''),
  );

  $form['pp_api_sandbox'] = array(
    '#type' => 'radios',
    '#title' => t('Use sandbox'),
    '#default_value' => variable_get('pp_api_sandbox', 1),
    '#options' => array(t('Production'), t('Sandbox')),
  );

  return system_settings_form($form);
}

/*
 * Implementation hook_weeve_project
 */
function weeve_donation_weeve_project(&$node, $op) {
  if ($op == 'end') {
    // success project
    if ($node->field_project_percent_pledge >= WEEVE_PROJECT_SUCCESS_PERCENT
            && $node->field_project_status[0]['value'] != 'cancel') {
    //Project is 25%+ successfull, finished and not cancelled.
      // weeve_donation_pay_success_project($node->nid);
    } else {
      weeve_donation_mark_archive_payments_by_nid($node->nid);
    }
  }
}

/**
 * Preapproval API Operation
 *
 * @param $start_date
 * @param $end_date
 * @param $max_total_amount
 * @return array PayPal API response
 * @see https://www.x.com/developers/paypal/documentation-tools/api/preapproval-api-operation
 */
function weeve_donation_preapproval($start_date, $end_date, $max_total_amount) {
  module_load_include('php', 'weeve_donation', 'inc/CallerService');

  $request = array(
    'startingDate' => $start_date,
    'endingDate' => $end_date,
    'maxNumberOfPayments' => 1,
    'maxTotalAmountOfAllPayments' => $max_total_amount,
    'displayMaxTotalAmount' => TRUE,
    'currencyCode' => 'USD',
    'feesPayer' => 'PRIMARYRECEIVER',
    'cancelUrl' => url('donation/preapproval_payment/cancelled', array('absolute' => TRUE)),
    'returnUrl' => url('donation/preapproval_payment/success', array('absolute' => TRUE)),
    'pinType' => 'NOT_REQUIRED',
    'requestEnvelope.errorLanguage' => 'en_US',
  );

  $nvp_str = drupal_query_string_encode($request);
  $resArray = hash_call("AdaptivePayments/Preapproval", $nvp_str);
  return $resArray;
}

/**
 *  Cancel Preapproval API Operation
 *
 *  @param: (string) preapproval_key
 *  @return (array) PayPal API response
 *  @see: https://www.x.com/developers/paypal/documentation-tools/api/cancelpreapproval-api-operation
 */
function weeve_donation_preapproval_cancel($preapproval_key) {
  module_load_include('php', 'weeve_donation', 'inc/CallerService');

  $request = array(
    'preapprovalKey' => $preapproval_key,
    'requestEnvelope.errorLanguage' => 'en_US',
  );

  $nvp_str = drupal_query_string_encode($request);
  $resArray = hash_call("AdaptivePayments/CancelPreapproval", $nvp_str);
  return $resArray;
}

/**
 * PreapprovalDetails API Operation
 *
 * @param $preapproval_key
 * @param bool $get_billing_address
 *  Optional
 * @return array PayPal API response
 * @see: https://www.x.com/developers/paypal/documentation-tools/api/preapprovaldetails-api-operation
 */
function weeve_donation_preapproval_details($preapproval_key, $get_billing_address = false) {
  module_load_include('php', 'weeve_donation', 'inc/CallerService');

  $request = array(
    'preapprovalKey' => $preapproval_key,
    'getBillingAddress' => $get_billing_address,
    'requestEnvelope.errorLanguage' => 'en_US',
  );

  $nvp_str = drupal_query_string_encode($request);
  $resArray = hash_call("AdaptivePayments/PreapprovalDetails", $nvp_str);
  return $resArray;
}

/**
 * Pay API Operation
 *
 * @param $key
 * @param array $receivers
 * @param $currency
 * @param $memo
 * @return array
 * @see https://www.x.com/developers/paypal/documentation-tools/api/pay-api-operation
 */
function weeve_donation_pay($key, $receivers, $memo) {
  module_load_include('php', 'weeve_donation', 'inc/CallerService');
  $request = array(
    'preapprovalKey' => $key,
    'currencyCode' => 'USD',
    'actionType' => 'PAY',
    'feesPayer' => 'PRIMARYRECEIVER',
    'cancelUrl' => 'http://weeveventures.dev',
    'returnUrl' => 'http://weeveventures.dev',
    'requestEnvelope.errorLanguage' => 'en_US',
    'memo' => $memo,
  );
  foreach ($receivers as $key => $receiver) {
    $email = $receiver['email'];
    $amount = $receiver['amount'];
    $request['receiverList.receiver('. $key .').email'] = $email;
    $request['receiverList.receiver('. $key .').amount'] = $amount;
    if (isset($receiver['primary'])) {
      $request['receiverList.receiver('. $key .').primary'] = true;
    }
  }
  $nvp_str = drupal_query_string_encode($request);
  $resArray = hash_call("AdaptivePayments/Pay", $nvp_str);
  return $resArray;
}

function weeve_donation_save_payout_request($uid, $nid, $accepted, $pid = null) {
  $request = new stdClass();
  $request->uid = $uid;
  $request->nid = $nid;
  $request->total_amount = weeve_donation_get_total_donated_by_nid($nid);
  $request->created = time();
  $request->accepted = $accepted;
  if ($pid) {
    $request->pid = $pid;
    drupal_write_record('weeve_payout_request', $request, 'pid');
  }
  else {
    drupal_write_record('weeve_payout_request', $request);
  }
  return $request;
}

function weeve_donation_set_payout_request_accepted($pid) {
  $request = new stdClass();
  $request->pid = $pid;
  $request->accepted = 1;
  drupal_write_record('weeve_payout_request', $request, 'pid');
  return $request;
}

function weeve_donation_get_payout_request_by_id($id) {
  $query = "SELECT * FROM {weeve_payout_request} WHERE pid = %d";
  $result = db_query($query, $id);
  while($row = db_fetch_object($result)) {
    return $row;
  }
}

/**
 * @param $status
 *  -1 -all
 *  0 - not accepted
 *  1 - accepted
 *  @return requests
 */
function weeve_donation_get_payout_requests($status = -1) {
  $requests = array();
  $query = "SELECT * FROM {weeve_payout_request}";
  if ($status != -1) {
    $query .= " WHERE accepted = %d";
    $result = db_query($query, $status);
  }
  else {
    $result = db_query($query);
  }
  while($row = db_fetch_object($result)) {
    $requests[] = $row;
  }
  return $requests;
}

function weeve_donation_is_pending_payout($nid) {
  $query = "SELECT COUNT(pid) FROM {weeve_payout_request} WHERE nid = %d AND accepted = %d";
  $result = db_result(db_query($query, $nid, 0));
  return $result;
}



function weeve_donation_manage_payout_request_page() {
  $requests = weeve_donation_get_payout_requests(0);
  $header = array('Project title', 'Total amount', 'Date', 'Status', 'NPO', 'Send money');
  $rows = array();
  foreach($requests as $req) {
    $row = array();
    $node = node_load($req->nid);
    $user = user_load($req->uid);
    $row[] = l($node->title, drupal_get_path_alias('node/'. $node->nid));
    $row[] = $req->total_amount .'$';
    $row[] = date('m-d-Y', $req->created);
    $row[] = $req->accepted ? 'Accepted' : 'Pending';
    $row[] = l($user->name, 'account/'. $user->uid);
    if (!$req->accepted) {
      $row[] = l('Send money', 'payout/'. $req->pid .'/accept');
    }
    else {
      $row[] = t('Already sent');
    }
    $rows[] = $row;
  }
  return theme('table', $header, $rows);
}

function weeve_donation_payout_accept_form($form_state, $payout_request_id) {
  $f = array();
  $f['payout_request_id'] = array(
    '#type' => 'value',
    '#value' => $payout_request_id
  );
  $form = confirm_form($f, t('Are you sure you want send money'), 'admin/content/payout', t('This action cannot be undone.'), t('Send money'), t('Cancel'));
  $form['#redirect'] = 'admin/content/payout';
  return $form;
}

function weeve_donation_payout_accept_form_submit(&$form, &$form_state) {
  $req_id = $form_state['values']['payout_request_id'];
  $req = weeve_donation_get_payout_request_by_id($req_id);
  if(weeve_donation_pay_success_project($req->nid)) {
    weeve_donation_set_payout_request_accepted($req_id);
  }
}

function weeve_donation_test_callback() {
  die;
}
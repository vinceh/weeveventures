<?php

// $Id: video_upload.module,v 1.14.2.17 2010/06/09 00:21:59 bojanz Exp $

/**
 * @file
 *   video upload module
 * @todo
 *   See TODO.txt, and inline todo comments
 */

/**
 * Video status levels.
 */
define('VIDEO_UPLOAD_STATUS_ORPHANED', 'orphaned');
define('VIDEO_UPLOAD_STATUS_DELETE', 'delete');
define('VIDEO_UPLOAD_STATUS_BAD', 'bad');
define('VIDEO_UPLOAD_STATUS_UNKNOWN', 'unknown');
define('VIDEO_UPLOAD_STATUS_OK', 'ok');
define('VIDEO_UPLOAD_STATUS_OK_SYNCED', 'synced');
define('VIDEO_UPLOAD_STATUS_UPLOAD_PENDING', 'upload_pending');

/**
 * Video synchronization.
 */
define('VIDEO_UPLOAD_SYNC_NONE', 0);
define('VIDEO_UPLOAD_SYNC', 1);
define('VIDEO_UPLOAD_SYNC_APPEND', 2);

/**
 * Implementation of hook_init().
 */
function video_upload_init() {
  module_load_include('inc', 'video_upload', 'video_upload_widget');
}

/**
 * Initialize the Video Upload provider.
 */
function video_upload_initialize_provider() {
  // @TODO
  // Providers should be configurable (only applicable once there is more
  // than one provider though).
  require_once drupal_get_path('module', 'video_upload') . '/providers/youtube/youtube.inc';
}

/**
 * Implementation of hook_theme().
 */
function video_upload_theme() {
  $theme = array(
    'video_upload_video' => array(
      'arguments' => array('yt_id' => NULL, 'width' => '425', 'height' => '355', 'field' => array(), 'params' => array(), 'attributes' => array()),
    ),
    'video_upload_video_thumb' => array(
      'arguments' => array('field' => NULL, 'item' => NULL, 'node' => NULL, 'as_link' => FALSE),
    ),
    'video_upload_video_status_message' => array(
      'arguments' => array('item' => NULL, 'message' => NULL),
    ),
    'video_upload_admin_video_form' => array(
      'arguments' => array('form' => NULL),
    ),
    'video_upload_status_text' => array(
      'arguments' => array('status' => NULL),
    ),
    'video_upload_missing_image' => array(
      'arguments' => array('style' => 'full', 'width' => 425, 'height' => 355, 'attributes' => array()),
    ),

    // video_upload_widget form element type theme function.
    'video_upload_widget' => array(
      'arguments' => array('element' => NULL),
      'file' => 'video_upload_widget.inc',
    ),
    'video_upload_widget_preview' => array(
      'arguments' => array('item' => NULL),
      'file' => 'video_upload_widget.inc',
    ),
  );

  // CCK formatters.
  $formatters = array(
    'video_upload_formatter_default',
    'video_upload_formatter_thumb',
    'video_upload_formatter_thumb_link',
    'video_upload_formatter_small',
  );

  foreach ($formatters as $formatter) {
    $theme[$formatter] = array(
      'arguments' => array('element' => NULL),
    );
  }

  foreach ($theme as $function => $data) {
    if (!isset($theme[$function]['file'])) {
      $theme[$function]['file'] = 'video_upload.theme.inc';
    }
  }

  return $theme;
}

/**
 * Implementation of hook_perm().
 */
function video_upload_perm() {
  return array('administer video upload settings', 'administer uploaded videos');
}

/**
 * Implementation of hook_menu().
 */
function video_upload_menu() {
  $items['admin/settings/video-upload'] = array(
    'title' => 'Video Upload Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_video_upload_admin_settings_form'),
    'access arguments' => array('administer video upload settings'),
    'file' => 'video_upload.admin.inc',
    'description' => 'Video provider settings for the <em>Video Upload</em> module.',
  );

  // Admin page for removing stranded videos (not attached to a node).
  $items['admin/content/video-upload'] = array(
    'title' => 'Manage Video Uploads',
    'page callback' => 'video_upload_admin_video',
    'access arguments' => array('administer uploaded videos'),
    'file' => 'video_upload.admin.inc',
    'description' => 'Manage all uploaded videos.',
  );

  return $items;
}

/**
 * Implementation of hook_elements().
 */
function video_upload_elements() {
  $elements = array();

  // Uses filefield as a starting point, and adds additional processing.
  $filefield_elements = filefield_elements();

  // Unset FileField's validate callback since it will fail to
  // validate as FileField knows nothing of this file.
  $filefield_elements['filefield_widget']['#element_validate'] = array();

  $elements['video_upload_widget'] = $filefield_elements['filefield_widget'];
  $elements['video_upload_widget']['#process'][] = 'video_upload_widget_process';
  $elements['video_upload_widget']['#element_validate'][] = 'video_upload_widget_validate';

  // Video upload contains additional file meta-data, so requires a separate
  // value callback.
  $elements['video_upload_widget']['#value_callback'] = 'video_upload_widget_value';

  return $elements;
}

/**
 * Implementation of hook_file_references().
 */
function video_upload_file_references($file) {
  $count = video_upload_get_file_reference_count($file);
  return $count ? array('video_upload' => $count) : NULL;
}

/**
 * Count the number of times the file is referenced within a field.
 *
 * @param $file
 *   A file object.
 * @param $field
 *   Optional. The CCK field array or field name as a string.
 * @return
 *   An integer value.
 */
function video_upload_get_file_reference_count($file, $field = NULL) {
  $fields = video_upload_get_field_list(NULL, $field);
  $file = (object) $file;

  $references = 0;
  foreach ($fields as $field) {
    $db_info = content_database_info($field);
    $references += db_result(db_query(
      'SELECT count('. $db_info['columns']['fid']['column'] .')
        FROM {'. $db_info['table'] .'}
        WHERE '. $db_info['columns']['fid']['column'] .' = %d', $file->fid
    ));

    // If a field_name is present in the file object, the file is being deleted
    // from this field.
    if (isset($file->field_name) && $field['field_name'] == $file->field_name) {
      // If deleting the entire node, count how many references to decrement.
      if (isset($file->delete_nid)) {
        $node_references = db_result(db_query(
          'SELECT count('. $db_info['columns']['fid']['column'] .')
            FROM {'. $db_info['table'] .'}
            WHERE '. $db_info['columns']['fid']['column'] .' = %d AND nid = %d', $file->fid, $file->delete_nid
        ));
        $references = $references - $node_references;
      }
      else {
        $references = $references - 1;
      }
    }
  }

  return $references;
}

/**
 * Return an array of file fields within a node type or by field name.
 *
 * @param $field
 *   Optional. May be either a field array or a field name.
 * @param $node_type
 *   Optional. The node type to filter the list of fields.
 */
function video_upload_get_field_list($node_type = NULL, $field = NULL) {
  // Build the list of fields to be used for retrieval.
  if (isset($field)) {
    if (is_string($field)) {
      $field = content_fields($field, $node_type);
    }
    $fields = array($field['field_name'] => $field);
  }
  elseif (isset($node_type)) {
    $type = content_types($node_type);
    $fields = $type['fields'];
  }
  else {
    $fields = content_fields();
  }

  // Filter down the list just to file fields.
  foreach ($fields as $key => $field) {
    if ($field['type'] != 'video_upload') {
      unset($fields[$key]);
    }
  }

  return $fields;
}

/**
 * Implementation of CCK's hook_field_info().
 */
function video_upload_field_info() {
  return array(
    'video_upload' => array(
      'label' => 'Video Upload',
      'description' => t('Upload and send video to a 3rd-party provider.'),
    ),
  );
}

/**
 * Implementation of hook_field_settings().
 */
function video_upload_field_settings($op, $field) {
  // Use FileField as a starting point, modify below depending on the operation.
  $return = filefield_field_settings($op, $field);
  switch ($op) {
    case 'database columns':
      $return += array(
        // The provider ID.
        'video_id' => array(
          'type' => 'varchar',
          'length' => 32,
          'views' => TRUE,
        ),
        // Video status.
        'video_status' => array(
          'type' => 'varchar',
          'length' => 32,
          'default' => VIDEO_UPLOAD_STATUS_UPLOAD_PENDING,
          'sortable' => TRUE,
          'views' => TRUE,
        ),
        // Time of status update.
        'video_status_ts' => array(
          'type' => 'int',
          'sortable' => TRUE,
          'default' => 0,
          'views' => TRUE,
        ),
      );
      break;

    case 'views data':
      $table_alias = content_views_tablename($field);
      $field_name = $field['field_name'];
      // Unset FileField data element
      unset($return[$table_alias][$field_name . '_data']);

      // Video status.
      $return[$table_alias][$field_name . '_video_status']['title'] = t('(@field) Video Upload Status', array('@field' => $field_name));
      $return[$table_alias][$field_name . '_video_status']['filter']['handler'] = 'views_handler_filter_video_upload_status';
      $return[$table_alias][$field_name . '_video_status']['field']['handler'] = 'views_handler_field';

      // Video status timestamp.
      $return[$table_alias][$field_name . '_video_status_ts']['title'] = t('(@field) Video Upload Status Timestamp', array('@field' => $field_name));
      $return[$table_alias][$field_name . '_video_status_ts']['filter']['handler'] = 'views_handler_filter_date';
      $return[$table_alias][$field_name . '_video_status_ts']['field']['handler'] = 'views_handler_field_date';
      break;
  }
  return $return;
}

/**
 * Implementation of CCK's hook_field().
 */
function video_upload_field($op, $node, $field, &$items, $teaser, $page) {
  // Basically the same as FileField, so simply do what FileField does.
  $return = filefield_field($op, $node, $field, $items, $teaser, $page);

  // Then if the values that sync with the external video changed update the
  // video status so that next time cron runs the updates are picked up.
  if ($op == 'update') {
    $original_node = node_load($node->nid);
    if ($node->title != $original_node->title || $node->body != $original_node->body) {
      foreach ($items as $key => $item) {
        // We should only be updating videos that are synced or we could cause trouble
        if ($items[$key]['video_status'] == VIDEO_UPLOAD_STATUS_OK_SYNCED) {
          $items[$key]['video_status'] = VIDEO_UPLOAD_STATUS_OK;
        }
      }
    }
  }

  return $return;
}

/**
 * Implementation of hook_widget_info().
 */
function video_upload_widget_info() {
  return array(
    'video_upload_widget' => array(
      'label' => t('Upload/Edit/Display Video'),
      'field types' => array('video_upload'),
      'multiple values' => CONTENT_HANDLE_CORE,
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_CUSTOM,
      ),
      // Description to use on forms to describe this widget.
      'description' => t('Upload video files to a 3rd-party provider.'),
    ),
  );
}

/**
 * Implementation of hook_widget_settings().
 *
 * Filefield will call video_upload_widget_settings().
 */
function video_upload_widget_settings($op, $widget) {
  switch ($op) {
    case 'form':
    case 'save':
      $function = 'video_upload_widget_settings_' . $op;
      return $function($widget);
  }
}

/**
 * Implementation of hook_widget().
 */
function video_upload_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  // CCK doesn't give a validate callback at the field level...
  // FAPI's #require is naive to complex structures...
  // Filefield's validation ignores our fields...
  // So, we validate at the field level ourselves.
  if (empty($form['#validate']) || !in_array('video_upload_node_form_validate', $form['#validate'])) {
    $form['#validate'][] = 'video_upload_node_form_validate';
  }
  
  if (empty($items[$delta])) {
    $items[$delta] = array(
      'video_id' => '',
      'video_status' => VIDEO_UPLOAD_STATUS_UPLOAD_PENDING,
      'video_status_ts' => $_SERVER['REQUEST_TIME'],
    );
  }
  $element = filefield_widget($form, $form_state, $field, $items, $delta);

  return $element;
}


/**
 * Additional #validate handler for the node form.
 *
 * This function checks the #required properties on video_upload fields.
 */
function video_upload_node_form_validate($form, &$form_state) {
  $type = content_types($form['type']['#value']);
  foreach ($type['fields'] as $field_name => $field) {
    if ($field['module'] != 'video_upload') continue;
    $empty = $field['module'] .'_content_is_empty';
    $valid = FALSE;
    if (!empty($form_state['values'][$field_name])) {
      foreach ($form_state['values'][$field_name] as $delta => $item) {
        if ($empty($item, $field)) continue;
        $valid = TRUE;
      }
    }

    if (!$valid && $field['required']) {
      form_set_error($field_name, t('%title field is required.', array('%title' => $field['widget']['label'])));
    }
  }
}

/**
 * Implementation of CCK's hook_content_is_empty().
 */
function video_upload_content_is_empty($item, $field) {
  // Use FileField's definition of empty.
  return filefield_content_is_empty($item, $field);
}

/**
 * Implementation of hook_formatter_info().
 */
function video_upload_field_formatter_info() {
  return array(
    'default' => array(
      'label' => t('Default'),
      'field types' => array('video_upload'),
      'description' => t('Displays fullsize video as defined in the field settings.'),
    ),
    'thumb' => array(
      'label' => t('Thumbnail image'),
      'field types' => array('video_upload'),
      'description' => t('Image thumbnail of the dimensions defined in the field settings.'),
    ),
    'thumb_link' => array(
      'label' => t('Thumbnail image as link to node'),
      'field types' => array('video_upload'),
      'description' => t('Thumbnail image linking to video node.'),
    ),
    'small' => array(
      'label' => t('Small Video'),
      'field types' => array('video_upload'),
      'description' => t('Small video as defined in the field settings.'),
    ),
  );
}

/**
 * Sets a default title for uploaded video.
 */
function _video_upload_set_default_title($node, $widget) {
  $title = '';
  switch ($widget['default_title_sync']) {
    case VIDEO_UPLOAD_SYNC_APPEND :
      $title = $widget['default_title'];
      if ($node->title) {
        $title .= ': ';
      }
      // Fall through to append.
    case VIDEO_UPLOAD_SYNC :
      if ($node->title) {
        $title = $title . $node->title;
        break;
      }
    case VIDEO_UPLOAD_SYNC_NONE :
    default :
      $title = $widget['default_title']
        ? $widget['default_title']
        : t('Video from @site_name', array('@site_name' => variable_get('site_name', 'Drupal')));
  }

  if (module_exists('token')) {
    global $user;
    $title = token_replace($title);
    $title = token_replace($title, 'user', $user);
    $title = token_replace($title, 'node', $node);
  }

  // Can't be blank.
  if (!trim($title)) {
    $title = t('Placeholder Title');
  }

  $max = _video_upload_max_length_provider('title');
  $title = substr($title, 0, $max);
  return $title;
}

/**
 * Sets a default description for uploaded video.
 * @TODO: site admins need to have more control over this (eg, some may
 *        prefer that the site description goes up with the video, rather than
 *        user-entered data.
 */
function _video_upload_set_default_description($node, $widget) {
  // Set description to teaser.
  switch ($widget['default_description_sync']) {
    case VIDEO_UPLOAD_SYNC_APPEND :
      $description = $widget['default_description'] . "\n\n";
      // Aall through to add teaser.
    case VIDEO_UPLOAD_SYNC :
      if ($node->teaser) {
        $description = $description . $node->teaser;
        break;
      }
      // Otherwise, fall through.
    case VIDEO_UPLOAD_SYNC_NONE :
      $description = $widget['default_description'];

  }

  if (module_exists('token')) {
    global $user;
    $description = token_replace($description);
    $description = token_replace($description, 'user', $user);
    $description = token_replace($description, 'node', $node);
  }

  if (!trim($description)) {
    $description = t('Video uploaded from @site_name : @site_slogan', array('@site_name' => variable_get('site_name', 'Drupal'), '@site_slogan' => variable_get('site_slogan', FALSE)));

    if (module_exists('token')) {
      global $user;
      $description = token_replace($description, 'user', $user);
    }
  }

  // No tags allowed.
  // @TODO This may be YouTube specific.
  return strip_tags($description);
}

/**
 * Sets developer tags.
 * @return array
 */
function _video_upload_set_developer_tags($node, $widget) {
  if ($widget['developer_tags']) {
    $tags = explode(',', $widget['developer_tags']);
  }
  else {
    return array(substr(str_replace(array(',', ' '), '', trim(variable_get('site_name', 'Drupal'))), 0, 25));
  }

  if (module_exists('token')) {
    global $user;
    foreach ($tags as $key => $tag) {
      // There seems to be an invisible 26 character limit.
      // @TODO This is YouTube specific.
      $tags[$key] = substr(str_replace(array(',', ' '), '', trim(check_plain(token_replace($tag, 'user', $user)))), 0, 25);
    }
  }

  return $tags;
}

/**
 * Implementation of hook_cron().
 */
function video_upload_cron() {
  module_load_include('admin.inc', 'video_upload');

  // Find types containing a video_upload field.
  $fields = _video_upload_relevant_fields();

  // Verify videos.
  _video_upload_verify_all($fields);

  // Delete videos queued for deletion.
  _video_upload_delete_rejected_videos($fields);

  // Update provider info for all flagged videos.
  _video_upload_update_all_videos($fields);

  // Upload any pending videos.
  _video_upload_upload_all($fields);
}

/**
 * Implementation of hook_views_api().
 */
function video_upload_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'video_upload') . '/views',
  );
}

/**
 * Implementation of hook_field_settings_alter().
 *
 * For any fields using the video upload widget:
 * - Adds required database columns.
 * - Defines views data.
 */
function video_upload_field_settings_alter(&$data, $op, $field) {
  if (!isset($field['widget']) || $field['widget']['type'] != 'video_upload_widget') {
    return;
  }
  switch ($op) {
    case 'database columns':
      $data += array(
        // The provider ID.
        'video_id' => array(
          'type' => 'varchar',
          'length' => 32,
          'views' => TRUE,
        ),
        // Video status.
        'video_status' => array(
          'type' => 'varchar',
          'length' => 32,
          'default' => VIDEO_UPLOAD_STATUS_UPLOAD_PENDING,
          'sortable' => TRUE,
          'views' => TRUE,
        ),
        // Time of status update.
        'video_status_ts' => array(
          'type' => 'int',
          'length' => 11,
          'sortable' => TRUE,
          'default' => '0',
          'views' => TRUE,
        ),
      );
      break;

    case 'views data':
      $table_alias = content_views_tablename($field);
      $field_name = $field['field_name'];
      $data[$table_alias][$field_name . '_video_status']['filter']['handler'] = 'views_handler_filter_video_upload_status';
      $data[$table_alias][$field_name . '_video_status_ts']['filter']['handler'] = 'views_handler_filter_date';
      break;
  }
}

/**
 * Get taxonomy terms associated with node.
 * @param object $node
 * @return array
 *   Array of keywords.
 */
function _video_upload_get_formatted_taxonomy($node) {
  $video_taxonomy = array();

  if (!$node->taxonomy) {
    return FALSE;
  }

  foreach ($node->taxonomy as $tid => $term) {
    $video_taxonomy[] = $term->name;
  }

  if (empty($video_taxonomy)) {
    return FALSE;
  }

  return $video_taxonomy;
}

/**
 * Obtain the value of various maximum lengths.
 */
function _video_upload_max_length_provider($entity = 'title') {
  // @TODO Abstract this out (60 is the yt max).
  return 60;
}

/**
 * Prepare a node and video to be sent to the configured provider. Also sets
 * the node status to unknown since once the video is sent, the status is
 * unknown until processing is complete.
 *
 * @param object $video
 *   A local video object.
 * @return boolean
 *   True if any videos were uploaded.
 */
function video_upload_upload($field, $video) {
  $node = node_load($video->nid);
  // Attach file information.
  $file = db_fetch_object(db_query("SELECT * FROM {files} WHERE fid = %d", array(':fid' => $video->fid)));
  $video->filepath = $file->filepath;
  $video->filemime = $file->filemime;

  $result = video_upload_provider_upload($video, $node, $field);
  if ($result['video_id']) {
    $video->video_id = $result['video_id'];
    $video->video_status = VIDEO_UPLOAD_STATUS_UNKNOWN;
    $video->video_status_ts = $_SERVER['REQUEST_TIME'];
    $update = TRUE;
  }

  return _video_upload_update_video($video);
}

/**
 * Call the provider's upload function and send the video.
 *
 * @param $node
 *   The associated video.
 * @param $video
 *   The filefield video array.
 */
function video_upload_provider_upload($video, $node, $field) {
  // @todo this needs to be abstracted away from youtube.
  video_upload_initialize_provider();
  return video_upload_upload_youtube($video, $node, $field);
}

/**
 * Connect to the provider.
 * @param mixed $http_client
 *   object http_client. If passed as boolean TRUE, the http_client will be
 *   generated.
 * @return video provider connection object
 */
function video_upload_connect($http_client) {
  if ($http_client === TRUE) {
    $http_client = video_upload_authenticate();
  }
  // @todo abstract out youtube
  video_upload_initialize_provider();
  return _video_upload_youtube($http_client);
}

/**
 * Authenticate to the provider.
 */
function video_upload_authenticate($reauthenticate = FALSE) {
  static $authentication;
  if (!$authentication || $reauthenticate) {
    // @todo abstract out youtube
    video_upload_initialize_provider();
    $authentication = _video_upload_authenticate_youtube();
  }
  return $authentication;
}

/**
 * Remove a video from the local database.
 */
function video_upload_delete_local($video) {
  if ($video->fid) {
    return db_query("DELETE FROM {video_upload} WHERE fid = %d", array(':fid' => $video->fid));
  }
  watchdog('video_upload', 'Attempted to delete a video without a fid.', array(), WATCHDOG_ERROR);
}

/**
 * Get available video statuses.
 */
function video_upload_get_all_statuses() {
  return array(
    VIDEO_UPLOAD_STATUS_ORPHANED => t('Orphaned'),
    VIDEO_UPLOAD_STATUS_DELETE => t('Queued for deletion'),
    VIDEO_UPLOAD_STATUS_BAD => t('Bad'),
    VIDEO_UPLOAD_STATUS_UNKNOWN => t('Unknown'),
    VIDEO_UPLOAD_STATUS_OK => t('Good'),
    VIDEO_UPLOAD_STATUS_OK_SYNCED => t('Good: Synced to provider'),
    VIDEO_UPLOAD_STATUS_UPLOAD_PENDING => t('Upload pending'),
  );
}

/**
 * Update a video upload record.
 */
function _video_upload_update_video($video) {
  $node = node_load($video->nid);
  $field = $video->field;
  $field_name = $video->field['field_name'];
  $delta = isset($video->delta) ? $video->delta : 1;
  $node->{$field_name}[$delta - 1]['video_status_ts'] = $_SERVER['REQUEST_TIME'];
  $node->{$field_name}[$delta - 1]['video_status'] = $video->video_status;
  $node->{$field_name}[$delta - 1]['video_id'] = $video->video_id;
  node_save($node);
  return $video->video_id;
}

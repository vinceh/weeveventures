<?php

// $Id: video_upload.install,v 1.6.2.5 2009/09/04 20:51:16 jhedstrom Exp $

/**
 * @file
 * Install/Uninstall/Enable/Disable hooks
 */

// Updates happen in random order, whether or not the module is enabled,
// so include critical code here just to be sure.
include_once(drupal_get_path('module', 'content') .'/content.module');

/**
 * Implementation of hook_install().
 */
function video_upload_install() {
  // Notify CCK.
  drupal_load('module', 'content');
  content_notify('install', 'video_upload');
  drupal_set_message(t('Video Upload successfully installed, and can be configured <a href="!url">here</a>.', array('!url' => url('admin/settings/video-upload'))));
}

/**
 * Implementation of hook_enable().
 */
function video_upload_enable() {
  // Notify CCK.
  drupal_load('module', 'content');
  content_notify('enable', 'video_upload');
}

/**
 * Implementation of hook_disable().
 */
function video_upload_disable() {
  // Notify CCK.
  drupal_load('module', 'content');
  content_notify('disable', 'video_upload');
}

/**
 * Implementation of hook_uninstall().
 */
function video_upload_uninstall() {
  // Notify CCK.
  drupal_load('module', 'content');
  content_notify('uninstall', 'video_upload');

  variable_del('video_upload_youtube_developer_key');
  variable_del('video_upload_youtube_username');
  variable_del('video_upload_youtube_password');
}

/**
 * Implementation of hook_requirements().
 *
 * Checks for the existence required variable settings
 */
function video_upload_requirements($phase) {

  $requirements = array();

  // Ensure translations don't break at install time.
  $t = get_t();

  // Get GData-specific requirements.
  // @todo: Once there is more than one provider, this can't be run at the
  //        install phase.
  include_once drupal_get_path('module', 'video_upload') . '/video_upload.module';
  video_upload_initialize_provider();
  $gdata_requirements = _video_upload_gdata_requirements($phase);

  if ($phase == 'runtime') {

    $username      = variable_get('video_upload_youtube_username', FALSE);
    $password      = variable_get('video_upload_youtube_password', FALSE);
    $developer_key = variable_get('video_upload_youtube_developer_key', FALSE);

    // Must have certain settings to use.
    if (!$username) {
      $requirements['video_upload_username'] = array(
        'title' => $t('Video Upload: Username'),
        'value' => $t('Not Found'),
        'severity' => REQUIREMENT_ERROR,
        'description' => $t('The Video Upload module requires at least one YouTube username/password combo, which can be set <a href="!url">here</a>.', array('!url' => url('admin/settings/video-upload'))),
      );
    }
    if (!$password) {
      $requirements['video_upload_password'] = array(
        'title' => $t('Video Upload: Password'),
        'value' => $t('Not Found'),
        'severity' => REQUIREMENT_ERROR,
        'description' => $t('The Video Upload module requires at least one YouTube username/password combo, which can be set <a href="!url">here</a>.', array('!url' => url('admin/settings/video-upload'))),
      );
    }
    if (!$developer_key) {
      $requirements['video_upload_developer_key'] = array(
        'title' => $t('Video Upload: YouTube Developer Key'),
        'value' => $t('Not Found'),
        'severity' => REQUIREMENT_ERROR,
        'description' => $t('The Video Upload module requires a <a href="!devurl">YouTube Developer Key</a>, which can be set <a href="!url">here</a>.', array('!url' => url('admin/settings/video-upload'), '!devurl' => url('http://code.google.com/apis/youtube/dashboard'))),
      );
    }

    if ($username && $password && $developer_key && !_video_upload_authenticate_youtube()) {
      // Failed to connect/authenticate.
      $requirements['video_upload_authentication'] = array(
        'title' => $t('Video Upload: YouTube Authentication'),
        'value' => $t('Failed'),
        'severity' => REQUIREMENT_ERROR,
        'description' => $t('The Video Upload module has the required information, but was unable to authenticate to YouTube. There may be an error in one or more of the following: !list These settings can be reviewed <a href="!url">here</a>.', array('!list' => theme('item_list', array('username', 'password', 'developer key')), '!url' => url('admin/settings/video-upload'))),
      );
    }

    if (empty($requirements) && empty($gdata_requirements)) {
      $requirements['video_upload'] = array(
        'title' => $t('Video Upload'),
        'value' => $t('Properly configured'),
        'severity' => REQUIREMENT_OK,
      );
    }
  }

  return array_merge($requirements, $gdata_requirements);
}

/**
 * Implementation of hook_update_N().
 *
 * - Prefix "video_" onto status, status_ts and id column names.
 * - Updates constants to simple text values rather than ambigous integers.
 */
function video_upload_update_6001() {
  module_load_include('inc', 'content', 'includes/content.crud');

  $fields = content_fields();
  foreach ($fields as $field) {
    if ($field['type'] == 'video_upload') {
      $db_info = content_database_info($field);
      if (isset($db_info['columns']['fid'])) {
        $table = $db_info['table'];
        // We're interested in id, status and status_ts.
        $id_column = $db_info['columns']['id']['column'];
        $id_schema = $db_info['columns']['id'];
        db_change_field($ret, $table, $id_column, preg_replace('/(_id)$/', '_video_id', $id_column), $id_schema);

        $status_column = $db_info['columns']['status']['column'];
        $status_schema = $db_info['columns']['status'];
        // Change type to varchar(32).
        $status_schema['type'] = 'varchar';
        $status_schema['length'] = 32;
        $status_schema['default'] = VIDEO_UPLOAD_STATUS_UPLOAD_PENDING;
        $new_status_column = preg_replace('/(_status)$/', '_video_status', $status_column);
        db_change_field($ret, $table, $status_column, $new_status_column, $status_schema);

        $status_ts_column = $db_info['columns']['status_ts']['column'];
        $status_ts_schema = $db_info['columns']['status_ts'];
        db_change_field($ret, $table, $status_ts_column, preg_replace('/(_status_ts)$/', '_video_status_ts', $status_ts_column), $status_ts_schema);

        // Update to new constants.
        foreach (_video_upload_update_6001_map_old_constants() as $old_status => $new_status) {
          $ret[] = update_sql("UPDATE {" . $table . "} SET " . $new_status_column . " = '" . $new_status . "' WHERE " . $new_status_column . " = " . $old_status);
        }

        // Update CCK field definition.
        $new_columns = $field['columns'];
        foreach (array('id', 'status', 'status_ts') as $column) {
          $new_columns['video_' . $column] = $new_columns[$column];
          unset($new_columns[$column]);
        }
        $new_columns['video_status'] = $status_schema;
        // Update table directly since CCK doesn't yet know that the
        // module is filefield instead of video upload.
        $record = new stdClass;
        $record->db_columns = $new_columns;
        $record->field_name = $field['field_name'];
        drupal_write_record(content_field_tablename(), $record, 'field_name');
      }
    }
  }

  // Force a rebuild of CCK's type cache.
  content_clear_type_cache(TRUE);

  return $ret;
}

/**
 * Map old constants to more sensbile values.
 */
function _video_upload_update_6001_map_old_constants() {
  return array(
    -3 => VIDEO_UPLOAD_STATUS_ORPHANED,
    -2 => VIDEO_UPLOAD_STATUS_DELETE,
    -1 => VIDEO_UPLOAD_STATUS_BAD,
    0 => VIDEO_UPLOAD_STATUS_UNKNOWN,
    1 => VIDEO_UPLOAD_STATUS_OK,
    2 => VIDEO_UPLOAD_STATUS_OK_SYNCED,
    3 => VIDEO_UPLOAD_STATUS_UPLOAD_PENDING,
  );
}

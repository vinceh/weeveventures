<?php

/* $Id: media_mover_api.install,v 1.1.2.16.2.6 2009/05/17 18:38:29 arthuregg Exp $ */

/**
 * @FILE media mover db files
 * NOTE, this will only upgrade a D5 version of media mover from the  > 1-0-BETA1 release
*/

// media_mover.install

/**
* Implementation of hook_install().
*/
function media_mover_api_install() {
  // Create tables.
  drupal_install_schema('media_mover_api');
}


/**
 * Implementation of hook_uninstall
 * deletes all media mover tables
 */
function media_mover_api_uninstall() {
  drupal_uninstall_schema('media_mover_api');
}


/**
 * implementation of hook_schema()
 */
function media_mover_api_schema() {
  $schema['media_mover_files'] = array(
    'fields' => array (
      'mmfid' => array('type' => 'serial'),
      'nid' => array('type' => 'int', 'unsigned' => TRUE),
      'fid' => array('type' => 'int', 'unsigned' => TRUE),
      'cid' => array('type' => 'int', 'unsigned' => TRUE),
      'harvest_file' => array('type' => 'varchar', 'length' => 255, 'default' => ''),
      'process_file' => array('type' => 'varchar', 'length' => 255, 'default' => ''),
      'storage_file' => array('type' => 'varchar', 'length' => 255, 'default' => ''),
      'complete_file' => array('type' => 'varchar', 'length' => 225, 'default' => ''),
      'status' => array('type' => 'int', 'unsigned' => TRUE),
      'date' => array('type' => 'int', 'unsigned' => TRUE),
      'data' => array('type' => 'text', 'size' => 'medium'),
    ),
    'indexes' => array (
      'mmfid' => array('mmfid'),
      'nid' => array('nid'),
    ),
    'primary key' => array ('mmfid'),
    'description' => t('Holds the file data for Media Mover actions.'),
  );

  $schema['media_mover_configurations'] = array(
    'fields' => array (
      'cid'  => array('type' => 'int', 'int', 'unsigned' => TRUE, 'description' => 'Configuration id'),
      'verb'  => array('type' => 'varchar', 'length' => 255, 'default' => ''),
      'module'  => array('type' => 'varchar', 'length' => 255, 'default' => ''),
      'action'  => array('type' => 'varchar', 'length' => 255, 'default' => ''),
      'configuration'  => array('type' => 'text', 'size' => 'medium'),
    ),
    'indexes' => array (
      'cid' => array('cid'),
    ),
    'description' => t('Holds the individual configurations for a complete Media Mover action.'),
  );

  $schema['media_mover_config_list'] = array(
    'fields' => array (
      'cid'  => array('type' => 'serial'),
      'name'  => array('type' => 'varchar', 'length' => 255, 'default' => ''),
      'description'  => array('type' => 'text', 'size' => 'normal'),
      'status'  => array('type' => 'varchar', 'length' => 255, 'default' => ''),
      'start_time'  => array('type' => 'int', 'unsigned' => TRUE),
      'last_start_time'  => array('type' => 'int', 'unsigned' => TRUE),
      'settings'  => array('type' => 'text', 'size' => 'medium'),
      'cron'  => array('type' => 'int', 'unsigned' => TRUE),
      'weight'  => array('type' => 'int', 'unsigned' => TRUE),
    ),
    'indexes' => array (
      'cid' => array('cid'),
    ),
    'primary key' => array('cid'),
    'description' => t('Holds the configuration name and description, used to link individual configuration options.'),
  );

  $schema['media_mover_hierarchy'] = array(
    'fields' => array (
      'cid' => array('type' => 'int', 'unsigned' => TRUE),
      'parent' => array('type' => 'int', 'unsigned' => TRUE),
      'children' => array('type' => 'text', 'size' => 'medium'),
    ),
    'indexes' => array(
     'cid' => array('cid'),
    ),
    'description' => t('Holds the parent child relationship for configurations.'),
  );

  // cache schema
  $schema['cache_media_mover'] = drupal_get_schema_unprocessed('system', 'cache');
  $schema['cache_media_mover']['description'] = t('Cache table for the Media Mover module to store configuration and node data');

  return $schema;
}


/**
 * updates the cache table this is for D5-D6 folks
 */
function media_mover_api_update_6101() {
  $ret = array();
  $ret[] = update_sql('DROP TABLE IF EXISTS {cache_media_mover}');

  db_create_table($ret, 'cache_media_mover', drupal_get_schema('cache_media_mover'));
  return $ret;
}


/**
 * adds the hiearchy table for early adopters
 */
function media_mover_api_update_6001() {
  $schema['media_mover_hierarchy'] = array(
    'fields' => array(
      'cid' => array('type' => 'int', 'unsigned' => TRUE),
      'parent' => array('type' => 'int', 'unsigned' => TRUE),
      'children' => array('type' => 'text', 'size' => 'medium'),
    ),
    'indexes' => array(
     'cid' => array('cid'),
    ),
    'description' => t('Holds the parent child relationship for configurations.'),
  );
  $ret = array();
  if (! db_table_exists('media_mover_hierarchy')) {
    db_create_table($ret, 'media_mover_hierarchy', $schema['media_mover_hierarchy']);
  }
  return $ret;
}


/**
 * updates for 5x -> 6x
 */
function media_mover_api_update_6000() {
  if (db_column_exists('media_mover_files', 'url')) {
    $ret[] = update_sql('ALTER TABLE {media_mover_files} DROP url');
  }
  if (db_column_exists('media_mover_files', 'harvest_type')) {
   $ret[] = update_sql('ALTER TABLE {media_mover_files} DROP harvest_type');
  }
  return $ret;
}


/**
 * adds a weight col to a configuration
 */
function media_mover_api_update_15() {
  switch ($GLOBALS['db_type']) {
    case 'mysqli':
    case 'mysql':
      $ret[] = update_sql('ALTER TABLE {media_mover_config_list} ADD `weight` int(3) NOT NULL DEFAULT "0"');
    break;
  }
  return $ret;
}


/**
 * removes RSS col, adds the settings col
 */
function media_mover_api_update_16() {
  $ret[] = update_sql('ALTER TABLE {media_mover_config_list} ADD `settings` blob NOT NULL');
  $ret[] = update_sql('ALTER TABLE {media_mover_config_list} DROP `rss`');
  return $ret;
}


/**
 * fixes the status col
 */
function media_mover_api_update_17 () {
  $ret[] = update_sql('UPDATE {media_mover_files} SET status = 8 WHERE status = 7');
  return $ret;
}

/**
 * fixes the status col
 */
function media_mover_api_update_6110 () {
  $results = db_query('SELECT mmfid, data FROM {media_mover_files}');
  while ($result = db_fetch_array($results)) {
    $data = unserialize($result['data']);
    $data = $data['data'];
    db_query('UPDATE {media_mover_files} SET data = "%s" WHERE mmfid = %d', $result['mmfid'], $data);
  }
  $ret[] = update_sql('UPDATE {media_mover_files} SET status = 8 WHERE status = 7');
  return $ret;
}

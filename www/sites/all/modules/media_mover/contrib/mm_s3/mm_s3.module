<?php

// $Id: mm_s3.module,v 1.1.2.2.2.37 2010/03/26 05:35:12 msonnabaum Exp $

define('ACL_PRIVATE', 'private');
define('ACL_PUBLIC_READ', 'public-read');
define('ACL_PUBLIC_READ_WRITE', 'public-read-write');


/* ************************************************ */
/* Drupal Hooks */
/* ************************************************ */

/**
 * Implementation of hook_menu().
 */
function mm_s3_menu() {
  // test page
  $items['admin/build/media_mover/tests/mm_s3'] = array(
    'title' => 'S3 Test',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mm_s3_test_form'),
    'access arguments' => array('administer media_mover'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'mm_s3_test.inc',
  );

  // Settings page
  $items['admin/build/media_mover/settings/mm_s3'] = array(
    'title' => 'S3',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mm_s3_admin_form'),
    'access arguments' => array('administer media_mover'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'mm_s3_test.inc',
  );
  
  $items['mm_s3_cloudfront_autodetect'] = array(
    'page callback' => 'mm_s3_cloudfront_autodetect',
    'access arguments' => array('administer media_mover'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/* ************************************************ */
/* Contrib Hooks */
/* ************************************************ */

/**
 * Implementation of media_mover hook
 */
function mm_s3_media_mover($op, $action_id = null, $configuration = array(), &$file = array()) {
  switch ($op) {

    case 'name':
      return "S3 module";
    break;

    case 'actions':
      return array(
        'storage' => array(1 => "move file to amazon s3 service"),
        'complete' => array(2 => "move file to amazon s3 service", 3 => "store cloudfront URL"),
      );
    break;

    // edit/create configuration option set
    case 'config':
      switch ($action_id) {
        case 1:
        case 2:
          return mm_s3_config($action_id, $configuration, $configuration['verb']);
          break;
        case 3:
          return mm_s3_cloudfront_config($action_id, $configuration, $configuration['verb']);
          break;
      }
    break;

    // run the send to s3 function
    case 'storage':
      return mm_s3_send($file, $configuration, $op, $action_id);
    case 'complete':
      switch ($action_id) {
        case 2:
          return mm_s3_send($file, $configuration, $op, $action_id);
          break;
        case 3:
          return mm_s3_cloudfront_store($file, $configuration, $op, $action_id);
          break;
      }
    break;

    // delete s3 files if Media Mover runs delete
    case 'delete':
        mm_s3_delete_file($file, $configuration);
    break;
  }
}


/* ************************************************ */
/* Internal functions */
/* ************************************************ */

/**
 * Builds the default list of file/bucket permissions
 * @return array
 */
function mm_s3_file_perms() {
  $options = array(
    ACL_PRIVATE => t('Private'),
    ACL_PUBLIC_READ => t('Public read'),
    ACL_PUBLIC_READ_WRITE => t('Public read and write'),
  );
  return $options;
}


/**
 * check and see if the drivers are installed
 */
function mm_s3_class_check($key = false, $skey = false) {
  // If the flash video module is installed, do not require this
  if (! module_exists('flashvideo_s3')) {
    require_once drupal_get_path('module', 'mm_s3') .'/S3.php';
  }

  // Check for CURL
  if (!extension_loaded('curl') && !@dl(PHP_SHLIB_SUFFIX == 'so' ? 'curl.so' : 'php_curl.dll')) {
    drupal_set_message(t('PHP CURL extension are not loaded. S3 connections will not work. Please contact your systems administrator to make sure you have PHP CURL installed.'), 'error');
  }

  // if keys are being passed in, override defaults
  // AWS access info
  if (!defined('awsAccessKey')) define('awsAccessKey', $key ? $key : variable_get('mm_s3_key', null));
  if (!defined('awsSecretKey')) define('awsSecretKey', $skey ? $skey : variable_get('mm_s3_skey', null));
  $s3 = new S3(awsAccessKey, awsSecretKey);

  // make sure the connection can be made to S3;
  if ($result = $s3->checkKeys()) {
    drupal_set_message(t('There was an error in your S3 account information: <br />!error: !description <br/>Please update your !settings',
      array('!error' => $result['code'], '!description' => $result['message'], '!settings' => l(t('settings'), 'admin/build/media_mover/settings'))),
      'error'
    );
    return false;
  }
  return $s3;
}


/**
 * does this bucket already exist?
 * @param $bucket_name
 *   string
 * @param $s3
 *   s3 object
 * @return boolean
 */
function mm_s3_bucket_exists($bucket_name, $s3) {
  // does this bucket exist?
  $buckets = $s3->listBuckets();
  if ($buckets) {
    foreach ($buckets as $bucket) {
      if ($bucket == $bucket_name) {
        // bucket exists
        return true;
      }
    }
  }
  return false;
}


/**
 * builds the form to display on the media mover admin page
 */
function mm_s3_admin_form() {
  $form['mm_s3'] = array(
    '#type' => 'fieldset',
    '#title' => t("S3 configuration"),
    '#description' => t('Settings for the S3 module. You can see if your connection is functional by using the !link.',
      array('!link' => l(t('S3 test'), 'admin/build/media_mover/mm_s3/test'))),
    '#element_validate' => array('mm_s3_admin_validate'),
  );

  $form['mm_s3']['mm_s3_bucket'] = array(
    '#type' => 'textfield',
    '#title' => t('S3 Bucket'),
    '#default_value' => variable_get('mm_s3_bucket', str_replace(' ', '_', variable_get('site_name', t('My Site')))),
    '#description' => t("Name of the S3 bucket, note this has to be unique. This can be overridden by a configuration, but this is the default value."),
  );

  $form['mm_s3']['mm_s3_default_perm'] = array(
    '#type' => 'select',
    '#options' => mm_s3_file_perms(),
    '#title' => t('S3 Default Permissions'),
    '#default_value' => variable_get('mm_s3_default_perm', ACL_PUBLIC_READ),
    '#description' => t('Default permissions on files and buckets created on S3'),
  );

  $form['mm_s3']['mm_s3_default_server_url'] = array(
    '#type' => 'textfield',
    '#title' => t('S3 URL'),
    '#default_value' => variable_get('mm_s3_default_server_url', "https://s3.amazonaws.com/"),
    '#description' => t('URL to send to amazon. You probably do not need to change this.'),
  );

  $form['mm_s3']['mm_s3_key'] = array(
    '#type' => 'textfield',
    '#title' => t('S3 Key'),
    '#default_value' => variable_get('mm_s3_key', ""),
    '#description' => t("S3 key."),
  );

  $form['mm_s3']['mm_s3_skey'] = array(
    '#type' => 'textfield',
    '#title' => t('S3 Secret Key'),
    '#default_value' => variable_get('mm_s3_skey', ""),
    '#description' => t("S3 secret key."),
  );

  return system_settings_form($form);
}


/**
 * Validate the connection specified in the admin settings
 * @param $element
 * @param $form_element
 */
function mm_s3_admin_validate($element, &$form_state) {
  // only validate if we have both values
  if ($form_state['values']['mm_s3_key'] && $form_state['values']['mm_s3_skey']) {
    // we need to verify the parameters being passed in
    if (! $s3 = mm_s3_class_check($form_state['values']['mm_s3_key'], $form_state['values']['mm_s3_skey'])) {
      form_error($element, '');
      return;
    }

    // does this bucket exist?
    if (! mm_s3_bucket_exists($form_state['values']['mm_s3_bucket'], $s3)) {
      // try to create the bucket
      if (! $s3->putBucket($form_state['values']['mm_s3_bucket'],  $form_state['values']['mm_s3_default_perm'], false, false)) {
        form_error($element, t('Could not create your bucket on the Amazon servers. You need to choose a different name'));
      }
    }
  }
}


/**
 * builds the form to display on the media mover setup
 */
function mm_s3_config($action_id, $configuration, $verb) {
  $form['mm_s3'] = array(
    '#type' => 'fieldset',
    '#title' => t('S3 configuration'),
    '#collapsed' => false,
    '#element_validate' => array('mm_s3_validate_configuration', array('mm_s3'))
  );

  // @TODO do some validation on this to see if we can create this bucket
  $form['mm_s3']['mm_s3_bucket'] = array(
    '#type' => 'textfield',
    '#title' => t('S3 Bucket'),
    '#default_value' => $configuration['mm_s3_bucket'],
    '#description' => t('Name of the S3 bucket, note this has to be unique on Amazon\'s servers.'),
  );

  $form['mm_s3']['mm_s3_perm'] = array(
    '#type' => 'select',
    '#title' => t('S3 File Permissions'),
    '#options' => mm_s3_file_perms(),
    '#default_value' => $configuration['mm_s3_perm'] ? $configuration['mm_s3_perm'] : ACL_PUBLIC_READ,
    '#description' => t('Set the permissions on your uploaded files.'),
  );

  $form['mm_s3']['mm_s3_drupal_file_path'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use full Drupal filepath on S3'),
    '#description' => t('Selecting this will store your files on S3 with the Drupal directory path as
      part of the file name- for example <em>sites/default/files/myfile.jpg</em> This is useful if you
      are concerned about duplicate filenames or using URL rewriting to serve files from Amazon'),
    '#default_value' => $configuration['mm_s3_drupal_file_path'] ? $configuration['mm_s3_drupal_file_path'] : false,
  );

  $form['mm_s3']['mm_s3_drupal_file_path'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use full Drupal filepath on S3'),
    '#description' => t('Selecting this will store your files on S3 with the Drupal directory path as
      part of the file name- for example <em>sites/default/files/myfile.jpg</em> This is useful if you
      are concerned about duplicate filenames or using URL rewriting to serve files from Amazon'),
    '#default_value' => $configuration['mm_s3_drupal_file_path'] ? $configuration['mm_s3_drupal_file_path'] : false,
  );

  $form['mm_s3']['mm_s3_delete_source'] = array(
    '#type' => 'checkbox',
    '#title' => t('Delete source material after succesfully moving to S3'),
    '#description' => t('Be very careful when you select this option. This will remove your original material, which will prevent future harvests and potentially removing it from the Drupal file system. Do not activate thus UNLESS you understand that you may loose your source material.'),
    '#default_value' => $configuration['mm_s3_delete_source'] ? $configuration['mm_s3_delete_source'] : false,
  );

  $form['mm_s3']['advanced'] = array(
    '#type' => 'fieldset',
    '#title' => t('Advanced'),
    '#collapsible' => true,
    '#collapsed' => true,
  );
  $form['mm_s3']['advanced']['mm_s3_server_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Server URL'),
    '#default_value' => $configuration['mm_s3_server_url'] ? $configuration['mm_s3_server_url'] : variable_get('mm_s3_default_server_url', 'http://s3.amazonaws.com/'),
    '#description' => t('Server URL. Use this to set the URL where your files will be served from. Normally this is s3.amazonaws.com, however you can define your own S3 URL with your DNS service.'),
  );

  return $form;
}

/**
 * builds the form to display on the media mover setup
 */
function mm_s3_cloudfront_config($action_id, $configuration, $verb) {
  $form = array();
  $form['#cache'] = TRUE;
  $form['mm_s3_cloudfront'] = array(
    '#type' => 'fieldset',
    '#title' => t('CloudFront configuration'),
    '#element_validate' => array('mm_s3_validate_configuration', array('mm_s3'))
  );
  $form['mm_s3_cloudfront']['mm_s3_cloudfront_url'] = array(
    '#type' => 'textfield',
    '#title' => t('CloudFront URL'),
    '#default_value' => $configuration['mm_s3_cloudfront_url'] ? $configuration['mm_s3_cloudfront_url'] : '',
    '#prefix' => '<div id="mm-s3-cloudfront-url-wrapper">',
    '#suffix' => '</div>',
  );
  $form['mm_s3_cloudfront']['mm_s3_cloudfront_autodetect'] = array(
    '#type' => 'button',
    '#value' => t('Auto-detect CloudFront URL'),
    '#ahah' => array(
      'path' => 'mm_s3_cloudfront_autodetect',
      'wrapper' => 'mm-s3-cloudfront-url-wrapper',
      'effect' => 'none',
    )
  );
  return $form;
}

/**
 * validates the settings of this configuration
 * @param $configuration
 * @return unknown_type
 */
function mm_s3_validate_configuration($element, &$form_state) {
  // get the data for this module, if it was called
  if ($values = media_mover_api_extract_form_data($element, $form_state)) {

    // buckets must be lower case
    if ($values['mm_s3_bucket'] != strtolower($values['mm_s3_bucket'])) {
      form_error($element, t('Your bucket name must be lower case.'));
    }
    // alert on delete
    if ($values['mm_s3_delete_source']) {
      drupal_set_message('You have choosen to delete your source material. Please be aware that this will remove files from your server\'s file system');
    }
    // validate S3 config
    if ($s3 = mm_s3_class_check()) {
      // does this bucket exist?
      if (! mm_s3_bucket_exists($values['mm_s3_bucket'], $s3)) {
        // try to create the bucket
        if (! $s3->putBucket($values['mm_s3_bucket'],  $values['mm_s3_perm'], false, false)) {
         // form_error($element, t('Could not create your bucket on the Amazon servers. You need to choose a different name'));
        }
      }
    }
  }
}


/**
 * sends file to s3
 * @param array $file
 *   media mover file array
 * @param array $configuration
 *   configuration for this push
 * @param string $verb
 *   what media mover state we are currently in
 * @param string $action_id
 *   what action is calling this
 * @returns string
 *   completed file string
 */
function mm_s3_send($file, $configuration, $verb, $action_id) {
  // load the S3 class
  if (! $s3 = mm_s3_class_check()) {
    return;
  }

  // get the current file to work on
  $filepath = media_mover_api_config_current_file($file);

  // can we read the file?
  if (! is_readable($filepath)) {
    watchdog('MM S3', 'Harvested file is not readable, check permissions: !file',
      array('!file' => $filepath), WATCHDOG_ERROR, l($file['mmfid'], 'admin/build/media_mover/file/edit/'. $file['mmfid']));
    return;
  }

  // assign bucket name, order: specific conf, general conf, sitename
  $bucket = $configuration['mm_s3_bucket'] ? $configuration['mm_s3_bucket'] : variable_get('mm_s3_bucket', str_replace(" ", "_", $conf['site_name']));

  // set the permisisons
  $perms = $configuration['mm_s3_perm'] ? $configuration['mm_s3_perm'] : ACL_PUBLIC_READ;

  // Create the bucket on S3 if it does not exist
  $s3->putBucket($bucket, $perms);

  // We need to set the filename based on the setting in this configuration
  // Sometimes it is a good idea to save the full $filepath as the filename
  if (! $configuration['mm_s3_drupal_file_path']) {
    $s3_filename = basename($filepath);
  }
  else {
    $s3_filename = $filepath;
  }

  // Put file on amazon. Note that we are using the full path as the file name on S3
  $s3->putObjectFile($filepath, $bucket, $s3_filename, $perms, array(), file_get_mimetype($filepath));

  // Make sure the file made it to amazon
  $info = $s3->getObjectInfo($bucket, $s3_filename);
  // Error check
  if (! $info['hash']) {
    // Error condition when trying to put file up
    $message = 'media_mover s3 could not upload file to amazon. Reporting error: <pre>'. print_r($s3, true) .'</pre>';
    $link = l('Change S3 Settings',  'admin/settings/media_mover');
    watchdog('MM S3', $message, array(), WATCHDOG_ERROR, $link);
    return false;
  }

  // do we have additional files to push up?
  // This is somewhat hacky. Media Mover needs to clarify this stuff
  // @TODO this is all hacky
  if ($file['additional_items']) {
    foreach ($file['additional_items'] as $module_name => $actions ) {
      foreach ($actions as $action => $items) {
        foreach ($items as $id => $item) {
          // now we move these files to amazon
          $s3->putObjectFile($item, $bucket, basename($item), $perms);
          $display['display'][$module_name][$id] = $configuration['mm_s3_server_url'] . $bucket ."/". basename($item);
        }
      }
    }
  }

  // do we need to delete the source material? DANGER CAKES!
  if ($configuration['mm_s3_delete_source']) {
    $delete_files = array();
    // get the verb files we need to delete
    foreach (media_mover_api_verbs() as $averb) {
      if ($averb == $verb) {
        $control = true;
      }
      if (! $control) {
        $delete_files[] = $file[$averb .'_file'];
      }
    }
    foreach (array_unique($delete_files) as $delete_file) {
      watchdog('MM S3', 'Deleted local file: !file', array('!file' => $delete_file));
      unlink($delete_file);
    }
  }

  // Create the return filepath. We add the bucket file path if
  // the a custom domain is not being used
  // Create the return filepath. 
  // We add the bucket file path if http(s)://s3.amazonaws.com is being used as the s3 url
  preg_match('@^(?:https?://)?([^/]+)@i', $configuration['mm_s3_server_url'], $domain);
  if ($domain[1] == 's3.amazonaws.com') {
    $s3_filename = $bucket . '/' . $s3_filename;
  }
  return $configuration['mm_s3_server_url'] . $s3_filename;
}

/**
 * deletes files from the amazon system
 */
function mm_s3_delete_file($item, $configuration) {
  $files = array();

  $s3_url = variable_get('mm_s3_default_server_url', "https://s3.amazonaws.com/");

  // @TODO simply check the configuration data to see where S3 data is
  // being stored. No need to guess here.

  // build a list of files we are going to delete
  if (preg_match('@^(?:https?://)?([^/]+)@i', $item['storage_file'], $s3_url)) {
    $files[] = $item['storage_file'];
  }
  if (preg_match('@^(?:https?://)?([^/]+)@i', $item['complete_file'], $s3_url)) {
    $files[] = $item['complete_file'];
  }
  // sometimes we have data on the $item['data']['display']
  if ($item['data']['display']) {
    foreach ($item['data']['display'] as $module) {
      foreach ($module as $path) {
        if (strstr($path, $s3_url)) {
          $files[] = $item['storage_file'];
        }
      }
    }
  }

  // files is our list of stuff we want to delete. Put it the form bucket/file
  foreach ($files as $file) {
    // remove s3 url
    $file = str_replace($configuration['mm_s3_server_url'], '', $file);
    // remove bucket (if not using a custom url)
    $file = str_replace($configuration['mm_s3_bucket']. '/', '', $file);

    $delete_files[] = array('bucket' => $configuration['mm_s3_bucket'], 'file' => $file );
  }

  if ($delete_files) {
    // load the s3 drivers
    mm_s3_class_check();
    // Instantiate the class
    $s3 = new S3(awsAccessKey, awsSecretKey);

    foreach($delete_files as $file) {
      $s3->deleteObject($file['bucket'], $file['file']);
    }

    watchdog('MM S3', 'Deleted S3 for node !nid, file: !mmfid', array('!mmfid' => $item['mmfid'], '!nid' => $item['nid']));
    drupal_set_message(t('Deleted S3 file'));
  }
}

/**
 * Stores a CloudFront URL
 * @param array $file
 *   media mover file array
 * @param array $configuration
 *   configuration for this push
 * @param string $verb
 *   what media mover state we are currently in
 * @param string $action_id
 *   what action is calling this
 * @returns string
 *   completed file string
 */
function mm_s3_cloudfront_store($file, $configuration, $verb, $action_id) {
  // Get bucket name from S3 step.
  $s3_step = db_fetch_array(db_query("SELECT * FROM {media_mover_configurations} mmc WHERE mmc.cid = %d AND mmc.verb = 'storage'", $configuration['cid']));
  $s3_config = unserialize($s3_step['configuration']);
  $bucket = $s3_config['mm_s3_bucket'] ? $s3_config['mm_s3_bucket'] : variable_get('mm_s3_bucket','');

  // Parse file path from S3 URL and remove bucket name.
  $s3_url = media_mover_api_config_current_file($file);
  $url_parts = parse_url($s3_url);
  $filepath = str_replace('/' . $bucket . '/', '', $url_parts['path']);

  return $configuration['mm_s3_cloudfront_url'] . $filepath;
}

function mm_s3_cloudfront_autodetect() {
  $form_state = array('storage' =>  NULL, 'submitted' => FALSE);
  $form_build_id = $_POST['form_build_id'];
  $form = form_get_cache($form_build_id, $form_state);
  $args = $form['#parameters'];
  $form_id = array_shift($args);
  $form['#post'] = $_POST;
  $form['#redirect'] = FALSE;
  $form['#programmed'] = FALSE;
  $form_state['post'] = $_POST;
  drupal_process_form($form_id, $form, $form_state);
  $step_bucket = $form_state['values']['storage--mm_s3--1--mm_s3_bucket'];
  $form = drupal_rebuild_form($form_id, $form_state, $args, $form_build_id);

  // If the bucket field is used on the storage step, use that, otherwise use the global bucket.
  $bucket = $step_bucket ? $step_bucket : variable_get('mm_s3_bucket','');

  $url = mm_s3_get_cfurl($bucket);

  // Set a message if a bucket is used that doesn't have a CloudFront instance setup.
  if (!$url) { 
    if ($bucket) {
      drupal_set_message(t('Could not find CloudFront instance for bucket !bucket!', array('!bucket' => $bucket)),  'error');
    }
  } 
  if ($form_id == 'media_mover_api_add_config_form') {
    $form[0]['complete']['mm_s3'][3]['complete--mm_s3--3--mm_s3_cloudfront']['complete--mm_s3--3--mm_s3_cloudfront_url']['#value'] = $url;
    $changed_elements = $form[0]['complete']['mm_s3'][3]['complete--mm_s3--3--mm_s3_cloudfront']['complete--mm_s3--3--mm_s3_cloudfront_url'];
  } else {
    $form['complete']['complete--mm_s3--3--mm_s3_cloudfront']['complete--mm_s3--3--mm_s3_cloudfront_url']['#value'] = $url;
    $changed_elements = $form['complete']['complete--mm_s3--3--mm_s3_cloudfront']['complete--mm_s3--3--mm_s3_cloudfront_url'];
  }
  unset($changed_elements['#prefix'], $changed_elements['#suffix']); // Prevent duplicate wrappers.
  drupal_json(array(
    'status'   => TRUE,
    'data'     => theme('status_messages') . drupal_render($changed_elements),
  ));
}

function mm_s3_get_cfurl($bucket) {
  // load the s3 drivers
  mm_s3_class_check();

  // Get a list of CloudFront distributions, see if any of the buckets match
  if (($dists = S3::listDistributions()) !== false) {
    if (sizeof($dists) == 0) echo "listDistributions(): No distributions\n";
      foreach ($dists as $dist) {
        $dist_bucket = array_shift(explode('.s3.amazonaws.com',$dist['origin'],2));
      if ($dist_bucket == $bucket) {
        $cloudfront_url = 'http://' . $dist['domain'] . '/';
      }
    }
  }
  $url = $cloudfront_url ? $cloudfront_url : '';
  return $url;
}


/* ************************************ */
/* XSPF Playlist Integration */
/* ************************************ */


/**
 * implements the hook_xspf_playlist_add to modify
 * the output of xspf files. This is helpful for building
 * playlists for flashplayers
 */
function mm_s3_xspf_playlist_add($action, $node) {
  $items = array();
  switch ($action){
    case 'pre':
      if ($files = $node->media_mover) {
        foreach ($files as $file) {
          if (($file['storage_module'] == 'mm_s3') || ($file['complete_module'] == 'mm_s3')) {
            $items[] = xspf_playlist_build_file_item($node, $file['url']);
          }
        }
      }
    break;

    case 'post':
    break;
  }
  return $items;
}

<?php

// $Id: mm_views.module,v 1.1.2.1.2.3 2010/02/14 01:28:39 arthuregg Exp $;


/**
 * Implementation of media_mover hook
 * @param $op is the operator to return
 * @param $action is which action is being called
 * @param $configuration is the specific configuration saved for the action for this configuration
 * @param $file is the file in use
 * @param $job is the full configuration data currently running
 */
function mm_views_media_mover($op = null, $action = null, $configuration = null, &$file = array(), $job = null, $nid = null ) {
  switch ($op) {

    // give your module a distinct name
    case 'name':
      return "Media Mover Views";
    break;

    // defines the actions that this module does
    // these are numbered for easy identification of what
    // action is being called
    case 'actions':
      return array(
        'harvest' => array(
          1 => t('Harvest files from a View'),
        ),
      );
    break;

    // create edit configuration option set
    // $action is used to ensure namespacing is kept consistent, for
    // $configuration is an array, settings stored on a per config basis
    case 'config':
      return mm_views_config($configuration);
    break;

    // functions called on harvest op
    // returns an array of $files
    case 'harvest':
      return mm_views_harvest($configuration);
    break;
  }
}


/**
 * configuration options for harvesting from a view
 * @param $settings
 * @return array
 */
function mm_views_config($settings){
  $form['views_config'] = array(
    '#title' => t('Select files from a view'),
    '#type' => 'fieldset',
  );

  // get a list of views
  foreach(views_get_all_views() as $name => $view) {
    $views[$name] = $view->name;
  }
  $form['views_config']['view'] = array(
    '#type' => 'select',
    '#title' => t('Select view'),
    '#options' => $views,
    '#default_value' => $settings['view'],
    '#description' => t('Choose a view which outputs a list of files. Please note, if your view does not return a list of files, this harvest will fail.')
  );
  $form['views_config']['stop_time'] = array(
    '#type' => 'checkbox',
    '#title' => t('Constrain file list start time'),
    '#default_value' => $settings['stop_time'],
    '#description' => t('You can reduce the number of files considered by sending using the last time this configuration was run as the start argument for your view. Your view needs to be configured to use a unix time stamp as the first view argument.')
  );
  return $form;
}


/**
 * Select files with views
 *
 * @param $settings
 *   array
 * @return array
 */
function mm_views_harvest($settings) {
  $files = array();
  // get the featured event
  $view = views_get_view($settings['view'],'default');
  // should we use the last run time as an argument?
  if ($settings['stop_time']) {
    // we need to load the configuration to get the stop/start times
    $configuration = media_mover_api_get_configuration($settings['cid']);
    if ($start = $configuration->last_start_time) {
      $view->set_arguments(array($start));
    }
  }

  $view->execute_display();

  foreach ($view->result as $result) {
    foreach ($view->field as $id => $field) {
      if ($field->content_field['type'] == 'filefield') {
        $file = field_file_load($result->{$field->field_alias});
        $files[] = array(
          'harvest_file' => $file['filepath'],
          'fid' => $result->{$field->field_alias},
          'nid' => $result->nid
        );
      }
    }
  }
  return $files;
}



/* *************************************************************** */
/* VIEWS functions */
/* *************************************************************** */

/**
 * Implementation of hook_views_api().
 */
function mm_views_views_api() {
  return array(
   'api' => 2,
   'path' => drupal_get_path('module', 'mm_views'),
  );
}


/**
 * define media mover api tables to join
 *
 * @return array of tables
 */
function mm_views_views_tables() {

  $table = views_new_table('media_mover_files', 'internal', 'node', 'nid', 'nid');
  views_table_add_filter($table, 'cid', 'Media Mover: Configuration files', t('This will filter a view to nodes that have files with files generated by this Media Mover configuration.'),
    array(
      'list' => 'views_handler_filter_media_mover_api_list',
      'operator' => array('AND' => t('Has files from all'), 'OR' => t('Has files from any'), 'NOR' => t('Has files from none')),
      'handler' => 'views_handler_filter_media_mover_api_custom',
      'value-type' => 'array',
      'list-type' => 'multiselect',
     )
   );

  $tables[$table['name']] = $table;
  return $tables;
}


/**
 * Builds the config list for views
 * @return array of configurations
 */
function views_handler_filter_media_mover_api_list() {
  // get a list of all configurations
  $results = db_query('SELECT cid, name FROM {media_mover_config_list} ORDER BY cid');
  while ($config = db_fetch_object($results)) {
    $mmconfig[$config->cid] = $config->name;
  }
  return $mmconfig;
}


/**
 * build the joins for the media mover config filter
 *
 * @param string $op
 * @param array $value
 * @param unknown_type $depth
 * @param unknown_type $query
 */
function views_handler_filter_media_mover_api_custom($op, $filter, $filterinfo, &$query) {

  $tablename = $query->get_table_name('media_mover_files', $num);
  $query->add_table($tablename, false, 1, array('left' => array('table' => 'node', 'field' => 'nid'), 'right' => array('field' => 'nid')));

  // build the where clause
  switch ($filter['operator']) {
    case 'OR':
      $clause = "'" . implode("','", $filter['value']) . "'";
      $where = "$tablename.cid IN ($clause)";
      $query->add_where($where);
    break;

    case 'AND':
      foreach ($filter['value'] as $cid) {
        $clause[] = "$tablename.cid = $cid";
      }
      $query->add_where(implode(' AND ', $clause));
    break;

    case 'NOR':
      $clause = "'" . implode("','", $filter['value']) . "'";
      $where = "$tablename.cid NOT IN ($clause)";
      $query->add_where($where);
    break;

    default:
      $query->add_where('');
    break;
  }

}

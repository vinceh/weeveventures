<?php

/*
 * Implementation hook_init
 */
function weeve_account_init() {
  $path = drupal_get_path('module', 'weeve_account');
  drupal_add_js($path .'/js/weeve_account.js');
}


/*
 * Implementation hook_menu
 */
function weeve_account_menu() {
  $items = array();

  $items['account'] = array(
    'title' => '',
    'access callback' => 'weeve_account_access',
    'page callback' => 'weeve_account_page',
    'type' => MENU_CALLBACK,
  );

  $items['account/change'] = array(
    'title' => 'Account Settings',
    'access callback' => 'weeve_account_access',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('weeve_account_change_general_form'),
    'type' => MENU_CALLBACK,
  );

  $items['account/change/general'] = array(
    'title' => 'general',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );

  $items['account/change/password'] = array(
    'title' => 'password',
    'access callback' => 'weeve_account_access',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('weeve_account_change_password_form'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );

  $items['account/%/following'] = array(
    'title' => '',
    'access callback' => 'weeve_account_access',
    'page callback' => 'weeve_account_following_page',
    'page arguments' => array(1),
    'type' => MENU_CALLBACK,
  );

  $items['account/%/history'] = array(
    'title' => '',
    'access callback' => 'weeve_account_donation_history_access',
    'access arguments' => array(1),
    'page callback' => 'weeve_account_history_page',
    'page arguments' => array(1),
    'type' => MENU_CALLBACK,
  );

  $items['account/%/projects'] = array(
    'title' => '',
    'access callback' => 'weeve_account_owner_access',
    'access arguments' => array(1),
    'page callback' => 'weeve_account_projects_page',
    'page arguments' => array(1),
    'type' => MENU_CALLBACK,
  );

  $items['ajax/login'] = array(
    'title' => '',
    'access callback' => 'user_is_anonymous',
    'page callback' => 'weeve_account_ajax_login',
    'type' => MENU_CALLBACK,
  );


  return $items;
}

function weeve_account_theme() {
  return array(
    'weeve_user_account_page' => array(
      'arguments' => array('account' => NULL, 'profile' => NULL, 'settings' => NULL, 'content' => NULL),
      'template' => 'tpl/weeve_user_account_page'
    ),
    'weeve_npo_account_page' => array(
      'arguments' => array('account' => NULL, 'profile' => NULL, 'settings' => NULL, 'content' => NULL),
      'template' => 'tpl/weeve_npo_account_page'
    ),
    'weeve_user_account_history' => array(
      'template' => 'tpl/weeve_user_account_history_content'
    ),
    'weeve_user_account_following' => array(
      'template' => 'tpl/weeve_user_account_following_content'
    ),
    'weeve_npo_account_about' => array(
      'arguments' => array('account' => NULL, 'profile' => NULL),
      'template' => 'tpl/weeve_npo_account_about_content'
    ),
    'weeve_npo_account_history' => array(
      'arguments' => array('account' => NULL, 'profile' => NULL),
      'template' => 'tpl/weeve_npo_account_history_content'
    ),
    'weeve_npo_account_projects' => array(
      'arguments' => array('account' => NULL, 'profile' => NULL),
      'template' => 'tpl/weeve_npo_account_projects_content'
    ),
  );
}

function weeve_account_access() {
  global $user;

  if ($user->uid == 0) {
    return FALSE;
  }

  return TRUE;
}

function weeve_account_change_password_form() {
  $form = array();

  $form['old_pwd'] = array(
    '#type' => 'password',
    '#title' => t('Current password'),
    '#description' => t('For security reasons'),
    '#theme' => 'wevee_password_inline',
  );

  $form['new_pwd'] = array(
    '#type' => 'password',
    '#title' => t('New passsword'),
    '#description' => t('At least 7 characters with 1 number'),
    '#theme' => 'wevee_password_inline',
  );

  $form['confirm_pwd'] = array(
    '#type' => 'password',
    '#title' => t('Confirm new password'),
    '#description' => t('Verification'),
    '#theme' => 'wevee_password_inline',
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Update'),
  );

  return $form;
}

function weeve_account_change_password_form_validate(&$form, &$form_state) {
  global $user;

  $old = $form_state['values']['old_pwd'];
  $new = $form_state['values']['new_pwd'];
  $confirm = $form_state['values']['confirm_pwd'];

  if ($user->pass != md5($old)) {
    form_set_error('old_pwd', t('Incorrect curent password'));
  }

  if ($new != $confirm) {
    form_set_error('confirm_pwd', t('Do not match. Please check again.'));
  }

}

function weeve_account_change_password_form_submit(&$form, &$form_state) {
  global $user;
  $new = $form_state['values']['new_pwd'];
  $user = user_save($user, array('pass' => $new));
  drupal_set_message(t('Password has been changed'));
}

function weeve_account_change_general_form() {
  global $user;

  $user_edit_form = user_edit_form($form_state, $user->uid, (array)$user, FALSE);

  $form = array();

  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),
    '#default_value' => $user->name,
    '#theme' => 'wevee_textfield_inline',
  );

  $form['email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email'),
    '#default_value' => $user->mail,
    '#theme' => 'wevee_textfield_inline',
  );

  $form['show_email'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show my email on my profile'),
    '#default_value' => variable_get('account_show_email_'. $user->uid, TRUE),
  );

  $form['location'] = array(
    '#type' => 'textfield',
    '#title' => t('Location'),
    '#default_value' => '',
    '#theme' => 'wevee_textfield_inline',
  );

  $form['show_location'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show my location on my profile'),
    '#default_value' => variable_get('account_show_location_'. $user->uid, TRUE),
  );

  $form['donation_history'] = array(
    '#type' => 'checkbox',
    '#title' => t('Donation History'),
    '#description' => t('Allow others to view my donation history'),
    '#default_value' => variable_get('account_donation_history_'. $user->uid, TRUE),
  );

  $form['picture'] = $user_edit_form['picture'];
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Update'),
    '#description' => '',
    '#weight' => 10,
  );
  $form['#uid'] = $user->uid;
  $form['#attributes'] = array('enctype' => "multipart/form-data");
  $form['#validate'][] = 'user_validate_picture';
  return $form;
}

function weeve_account_change_general_form_validate(&$form, &$form_state) {
  if (!valid_email_address($form_state['values']['email'])) {
    form_set_error('email', t('No valid email'));
  }
}

function weeve_account_change_general_form_submit(&$form, &$form_state) {
  global $user;
  $name = $form_state['values']['name'];
  $email = $form_state['values']['email'];
  $picture = $form_state['values']['picture'];

  variable_set('account_show_email_'. $user->uid, $form_state['values']['show_email']);
  variable_set('account_show_location_'. $user->uid, $form_state['values']['show_location']);
  variable_set('account_donation_history_'. $user->uid, $form_state['values']['donation_history']);

  $edit = array(
    'name' => $name,
    'mail' => $email,
  );

  if ($picture) {
    $edit['picture'] = $picture;
  }

  if ($form_state['values']['picture_delete']) {
    if ($user->picture && file_exists($user->picture)) {
      file_delete($user->picture);
    }
    $edit['picture'] = '';
  }

  _user_edit_submit($user->uid, $form_state['values']);
  $user = user_save($user, $edit);

  drupal_set_message(t('Account has been changed'));
}

function weeve_account_load_user($uid) {
  $result = array(
    'user' => NULL,
    'profile' => NULL,
    'settings' => NULL,
  );

  $user = user_load($uid);
  $account_type = weeve_account_check_type($user);
  $settings = array(
    'show_email' => variable_get('account_show_email_'. $user->uid, TRUE),
    'show_location' => variable_get('account_show_location_'. $user->uid, TRUE),
    'donation_history' => variable_get('account_donation_history_'. $user->uid, TRUE),
  );
  $profile = content_profile_load('profile', $user->uid);
  if ($user->picture) {
    $photo = $user->picture;
  } else {
    $photo = variable_get('user_picture_default', '');
  }
  $user->photo = $photo;
  if ($account_type == 'npo' || $account_type == 'corp') {
    $view_result = views_get_view_result('featured_projects', 'npo_projects', $user->uid);
    $money = 0;
    foreach ($view_result as $value) {
      $money += $value->node_data_field_project_amount_pledge_field_project_amount_p;
    }
    $user->count_projects = count($view_result);
    $user->money = $money;
  }
  $result['user'] = $user;
  $result['profile'] = $profile;
  $result['settings'] = $settings;

  return $result;
}

function weeve_account_page($uid = null) {
  if (!$uid) {
    global $user;
    $uid = $user->uid;
  }
  $user_info = weeve_account_load_user($uid);
  $account_type = weeve_account_check_type($user_info['user']);

  switch($account_type) {

    case 'user':
      $content = theme('weeve_user_account_history');
      $output = theme('weeve_user_account_page', $user_info['user'], $user_info['profile'], $user_info['settings'], $content);
      break;

    case 'npo':
    case 'corp':
      $content = theme('weeve_npo_account_about', $user_info['user'], $user_info['profile']);
      $output = theme('weeve_npo_account_page', $user_info['user'], $user_info['profile'], $user_info['settings'], $content);
      break;

    default:
      $output = theme('weeve_user_account_page', $user_info['user'], $user_info['profile'], $user_info['settings']);
      break;
  }
  return $output;
}

function weeve_account_check_type($user) {
  $roles = $user->roles;
  if (isset($roles[USER_RID])) {
    return 'user';
  }
  if (isset($roles[NPO_RID])) {
    return 'npo';
  }
  if (isset($roles[CORP_RID])) {
    return 'corp';
  }
}

function weeve_account_donation_history_access($uid) {
  global $user;
  if (variable_get('account_donation_history_'. $user->uid, TRUE) || $uid == $user->uid) {
    return TRUE;
  }
  return FALSE;
}

function weeve_account_owner_access($uid) {
  global $user;
  if ($user->uid == $uid) {
    return TRUE;
  }
  return FALSE;
}

/*
 * NPO Donation history page
 */
function weeve_account_history_page($uid) {
  $user_info = weeve_account_load_user($uid);
  $content = theme('weeve_npo_account_history', $user_info['user'], $user_info['profile']);
  $output = theme('weeve_npo_account_page', $user_info['user'], $user_info['profile'], $user_info['settings'], $content);
  return $output;
}

function weeve_account_following_page($uid) {
  $user_info = weeve_account_load_user($uid);
  $content = theme('weeve_user_account_following');
  $output = theme('weeve_user_account_page', $user_info['user'], $user_info['profile'], $user_info['settings'], $content);
  return $output;
}

function weeve_account_projects_page($uid) {
  $user_info = weeve_account_load_user($uid);
  $type = weeve_account_check_type($user_info['user']);
  if ($type == 'npo' || $type == 'corp') {
    $content = views_embed_view('npo_project_proposals', 'page_1', $user_info['user']->uid);
    $output = theme('weeve_npo_account_page', $user_info['user'], $user_info['profile'], $user_info['settings'], $content);
    return $output;
  } else {
    drupal_access_denied();
  }

}


function weeve_account_ajax_login() {
  if (isset($_POST['name']) && check_plain($_POST['name']) && isset($_POST['pwd']) && check_plain($_POST['pwd'])) {
    $name = $_POST['name'];
    $pass = $_POST['pwd'];
    $params = array('mail' => $name, 'pass' => $pass);

    $account = user_load(array('mail' => $params['mail'], 'pass' => trim($params['pass']), 'status' => 1));
    if ($account) {
      $params['name'] = $account->name;
      $account = user_authenticate($params);
      $response = array('status' => TRUE, 'data' => $account);
    }
    else {
      $response = array('status' => FALSE, 'data' => NULL);
    }
    drupal_json($response);
  }
}
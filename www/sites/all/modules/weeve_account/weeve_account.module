<?php

/*
 * Implementation hook_menu
 */
function weeve_account_menu() {
  $items = array();

  $items['account'] = array(
    'title' => '',
    'access callback' => 'weeve_account_access',
    'page callback' => 'weeve_account_page',
    'type' => MENU_CALLBACK,
  );

  $items['account/change'] = array(
    'title' => '',
    'access callback' => 'weeve_account_access',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('weeve_account_change_general_form'),
    'type' => MENU_CALLBACK,
  );

  $items['account/change/general'] = array(
    'title' => 'General',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );

  $items['account/change/password'] = array(
    'title' => 'Password',
    'access callback' => 'weeve_account_access',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('weeve_account_change_password_form'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );

  $items['account/%/donation-history'] = array(
    'title' => '',
    'access callback' => 'weeve_account_donation_history_access',
    'access arguments' => array(1),
    'page callback' => 'weeve_account_donation_history_page',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function weeve_account_theme() {
  return array(
    'weeve_user_account_page' => array(
      'arguments' => array('account' => NULL, 'profile' => NULL, 'settings' => NULL),
      'template' => 'tpl/weeve_user_account_page'
    ),
    'weeve_npo_account_page' => array(
      'arguments' => array('account' => NULL, 'profile' => NULL, 'settings' => NULL),
      'template' => 'tpl/weeve_npo_account_page'
    ),
  );
}

function weeve_account_access() {
  global $user;

  if ($user->uid == 0) {
    return FALSE;
  }

  return TRUE;
}

function weeve_account_change_password_form() {
  $form = array();

  $form['old_pwd'] = array(
    '#type' => 'password',
    '#title' => t('Current password'),
    '#description' => t('For security reasons'),
  );

  $form['new_pwd'] = array(
    '#type' => 'password',
    '#title' => t('New passsword'),
    '#description' => t('At least 7 characters with 1 number'),
  );

  $form['confirm_pwd'] = array(
    '#type' => 'password',
    '#title' => t('Confirm new password'),
    '#description' => t('Verification'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Change'),
  );

  return $form;
}

function weeve_account_change_password_form_validate(&$form, &$form_state) {
  global $user;

  $old = $form_state['values']['old_pwd'];
  $new = $form_state['values']['new_pwd'];
  $confirm = $form_state['values']['confirm_pwd'];

  if ($user->pass != md5($old)) {
    form_set_error('old_pwd', t('Incorrect curent password'));
  }

  if ($new != $confirm) {
    form_set_error('confirm_pwd', t('Do not match. Please check again.'));
  }

}

function weeve_account_change_password_form_submit(&$form, &$form_state) {
  global $user;
  $new = $form_state['values']['new_pwd'];
  $user = user_save($user, array('pass' => $new));
  drupal_set_message(t('Password has been changed'));
}

function weeve_account_change_general_form() {
  global $user;
  $settings = variable_get('weeve_account_setting_'. $user->uid, array());

  $user_edit_form = user_edit_form($form_state, $user->uid, (array)$user, FALSE);

  $form = array();

  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),
    '#default_value' => $user->name,
  );

  $form['email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email'),
    '#default_value' => $user->mail,
  );

  $form['show_email'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show my email on my profile'),
    '#default_value' => $settings['show_email'] ? $settings['show_email'] : FALSE,
  );

  $form['location'] = array(
    '#type' => 'textfield',
    '#title' => t('Location'),
    '#default_value' => '',
  );

  $form['show_location'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show my location on my profile'),
    '#default_value' => $settings['show_location'] ? $settings['show_location'] : FALSE,
  );

  $form['donation_statistics'] = array(
    '#type' => 'checkbox',
    '#title' => t('Donation Statistics'),
    '#description' => t('Show my donation statistics on my profile'),
    '#default_value' => $settings['donation_statistics'] ? $settings['donation_statistics'] : FALSE,
  );

  $form['donation_history'] = array(
    '#type' => 'checkbox',
    '#title' => t('Donation History'),
    '#description' => t('Allow others to view my donation history'),
    '#default_value' => $settings['donation_history'] ? $settings['donation_history'] : FALSE,
  );

  $form['picture'] = $user_edit_form['picture'];
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Change'),
    '#description' => '',
    '#weight' => 10,
  );
  $form['#uid'] = $user->uid;
  $form['#attributes'] = array('enctype' => "multipart/form-data");
  $form['#validate'][] = 'user_validate_picture';
  return $form;
}

function weeve_account_change_general_form_validate(&$form, &$form_state) {
  if (!valid_email_address($form_state['values']['email'])) {
    form_set_error('email', t('No valid email'));
  }
}

function weeve_account_change_general_form_submit(&$form, &$form_state) {
  global $user;
  $name = $form_state['values']['name'];
  $email = $form_state['values']['email'];
  $picture = $form_state['values']['picture'];

  $settings['show_email'] = $form_state['values']['show_email'];
  $settings['show_location'] = $form_state['values']['show_location'];
  $settings['donation_statistics'] = $form_state['values']['donation_statistics'];
  $settings['donation_history'] = $form_state['values']['donation_history'];

  variable_set('weeve_account_setting_'. $user->uid, $settings);



  $edit = array(
    'name' => $name,
    'mail' => $email,
    'picture' => $picture,
  );
  _user_edit_submit($user->uid, $form_state['values']);
  $user = user_save($user, $edit);

  drupal_set_message(t('Account has been changed'));
}

function weeve_account_page($uid = null) {
  if ($uid) {
    $user = user_load($uid);
  } else {
    global $user;
  }

  $account_type = weeve_account_check_type($user);
  $settings = variable_get('weeve_account_setting_'. $user->uid, array());
  $profile = content_profile_load('profile', $user->uid);

  if ($user->picture) {
    $photo = $user->picture;
  } else {
    $photo = variable_get('user_picture_default', '');
  }
  $user->photo = $photo;

  switch($account_type) {

    case 'user':
      $output = theme('weeve_user_account_page', $user, NULL, $settings);
      break;

    case 'npo':
    case 'corp':
      $view_result = views_get_view_result('featured_projects', 'npo_projects', $user->uid);
      $money = 0;
      foreach ($view_result as $value) {
        $money += $value->node_data_field_project_amount_pledge_field_project_amount_p;
      }
      $user->count_projects = count($view_result);
      $user->money = $money;
      $output = theme('weeve_npo_account_page', $user, $profile, $settings);
      break;

    default:
      $output = theme('weeve_user_account_page', $user, $profile, $settings);
      break;
  }
  return $output;
}

function weeve_account_check_type($user) {
  $roles = $user->roles;
  if (isset($roles[USER_RID])) {
    return 'user';
  }
  if (isset($roles[NPO_RID])) {
    return 'npo';
  }
  if (isset($roles[CORP_RID])) {
    return 'corp';
  }
}
function weeve_account_donation_history_access($uid) {
  global $user;
  $settings = variable_get('weeve_account_setting_'. $uid, array());
  if ($settings['donation_history'] || $uid == $user->uid) {
    return TRUE;
  }
  return FALSE;
}

function weeve_account_donation_history_page() {
  return "Donation history";
}
<?php

/*
 * Implementation hook_init
 */
function weeve_account_init() {
  $path = drupal_get_path('module', 'weeve_account');
  drupal_add_js($path .'/js/weeve_account.js');
}


/*
 * Implementation hook_menu
 */
function weeve_account_menu() {
  $items = array();

  $items['account'] = array(
    'title' => '',
    'access callback' => 'weeve_account_view_access',
    'access arguments' => array(1),
    'page callback' => 'weeve_account_page',
    'type' => MENU_CALLBACK,
  );

  $items['account/change'] = array(
    'title' => 'Account Settings',
    'access callback' => 'weeve_account_access',
    'page callback' => 'weeve_account_change_general_page',
    'type' => MENU_CALLBACK,
  );

  $items['account/password'] = array(
    'title' => 'Request new password',
    'access callback' => TRUE,
    'page callback' => 'weeve_account_forgot_pass_page',
    'type' => MENU_CALLBACK,
  );

  $items['account/change/general'] = array(
    'title' => 'general',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );

  $items['account/change/password'] = array(
    'title' => 'password',
    'access callback' => 'weeve_account_access',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('weeve_account_change_password_form'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );

  $items['account/%/following'] = array(
    'title' => '',
    'access callback' => 'weeve_account_following_access',
    'access arguments' => array(1),
    'page callback' => 'weeve_account_following_page',
    'page arguments' => array(1),
    'type' => MENU_CALLBACK,
  );

  $items['account/%/history'] = array(
    'title' => '',
    'access callback' => 'weeve_account_donation_history_access',
    'access arguments' => array(1),
    'page callback' => 'weeve_account_history_page',
    'page arguments' => array(1),
    'type' => MENU_CALLBACK,
  );

  $items['account/%/about'] = array(
    'title' => '',
    'access callback' => true,
    'access arguments' => array(1),
    'page callback' => 'weeve_account_about_page',
    'page arguments' => array(1),
    'type' => MENU_CALLBACK,
  );


  $items['account/%/projects'] = array(
    'title' => '',
    'access callback' => 'weeve_account_owner_access',
    'access arguments' => array(1),
    'page callback' => 'weeve_account_projects_page',
    'page arguments' => array(1),
    'type' => MENU_CALLBACK,
  );

  $items['account/%/donated'] = array(
    'title' => '',
    'access callback' => 'weeve_account_owner_access',
    'access arguments' => array(1),
    'page callback' => 'weeve_account_donated_page',
    'page arguments' => array(1),
    'type' => MENU_CALLBACK,
  );

  $items['ajax/login'] = array(
    'title' => '',
    'access callback' => 'user_is_anonymous',
    'page callback' => 'weeve_account_ajax_login',
    'type' => MENU_CALLBACK,
  );


  return $items;
}

function weeve_account_view_access($uid = null) {
  if (!$uid) {
    global $user;

    if (!$user->uid) {
      return false;
    }
  }

  return true;
}

/*
 * Implementation hook_menu_alter
 */
function weeve_account_menu_alter(&$items) {
  $items['user']['access callback'] = MENU_CALLBACK;
  $items['user/register']['type'] = MENU_CALLBACK;
  $items['user/password']['type'] = MENU_CALLBACK;
}

function weeve_account_theme() {
  return array(
    'weeve_user_account_page' => array(
      'arguments' => array('account' => NULL, 'profile' => NULL, 'settings' => NULL, 'content' => NULL),
      'template' => 'tpl/weeve_user_account_page'
    ),
    'weeve_npo_account_page' => array(
      'arguments' => array('account' => NULL, 'profile' => NULL, 'settings' => NULL, 'content' => NULL),
      'template' => 'tpl/weeve_npo_account_page'
    ),
    'weeve_user_account_history' => array(
      'arguments' => array('account' => NULL),
      'template' => 'tpl/weeve_user_account_history_content'
    ),
    'weeve_user_account_following' => array(
      'template' => 'tpl/weeve_user_account_following_content'
    ),
    'weeve_user_account_donated' => array(
      'arguments' => array('projects' => NULL),
      'template' => 'tpl/weeve_user_account_donated_content'
     ),
    'weeve_npo_account_about' => array(
      'arguments' => array('account' => NULL, 'profile' => NULL),
      'template' => 'tpl/weeve_npo_account_about_content'
    ),
    'weeve_npo_account_history' => array(
      'arguments' => array('account' => NULL, 'profile' => NULL),
      'template' => 'tpl/weeve_npo_account_history_content'
    ),
    'weeve_npo_account_projects' => array(
      'arguments' => array('account' => NULL, 'profile' => NULL),
      'template' => 'tpl/weeve_npo_account_projects_content'
    ),
    'wevee_account_textfield_inline' => array(
      'arguments' => array('element' => NULL),
    ),
    'wevee_account_textarea' => array(
      'arguments' => array('element' => NULL),
    ),
    'wevee_account_checkbox' => array(
      'arguments' => array('element' => NULL),
    ),
    'wevee_account_form_element_inline' => array(
      'arguments' => array('element' => NULL, 'value' => NULL),
    ),
  );
}

function weeve_account_access() {
  global $user;

  if ($user->uid == 0) {
    return FALSE;
  }

  return TRUE;
}

function weeve_account_change_password_form() {
  $form = array();

  $form['old_pwd'] = array(
    '#type' => 'password',
    '#title' => t('Current password'),
    '#description' => t('For security reasons'),
    '#theme' => 'wevee_password_inline',
  );

  $form['new_pwd'] = array(
    '#type' => 'password',
    '#title' => t('New passsword'),
    '#description' => t('At least 7 characters with 1 number'),
    '#theme' => 'wevee_password_inline',
  );

  $form['confirm_pwd'] = array(
    '#type' => 'password',
    '#title' => t('Confirm new password'),
    '#description' => t('Verification'),
    '#theme' => 'wevee_password_inline',
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Update'),
  );

  return $form;
}

function weeve_account_change_password_form_validate(&$form, &$form_state) {
  global $user;

  $old = $form_state['values']['old_pwd'];
  $new = $form_state['values']['new_pwd'];
  $confirm = $form_state['values']['confirm_pwd'];

  if ($user->pass != md5($old)) {
    form_set_error('old_pwd', t('Incorrect curent password'));
  }

  if ($new != $confirm) {
    form_set_error('confirm_pwd', t('Do not match. Please check again.'));
  }

}

function weeve_account_change_password_form_submit(&$form, &$form_state) {
  global $user;
  $new = $form_state['values']['new_pwd'];
  $user = user_save($user, array('pass' => $new));
  drupal_set_message(t('Password has been changed'));
}

function weeve_account_change_general_page() {
  global $user;
  $type = weeve_account_check_type($user);
  if ($type == 'user' || $type == 'corp') {
    $form = drupal_get_form('weeve_account_change_general_user_form');
  }
  else {
    $form = drupal_get_form('weeve_account_change_general_npo_form');
  }
  return $form;
}

function weeve_account_change_general_npo_form() {
  global $user;
  $form = array();
  $user_edit_form = user_edit_form($form_state, $user->uid, (array)$user, FALSE);
  $profile = content_profile_load('profile', $user->uid);

  $form['picture'] = $user_edit_form['picture'];
  $form['picture']['#title'] = t('Display Picture');
  $form['picture']['#description'] = t('This is what users see when they view your profile');
  $form['picture']['#weight'] = -10;
  $form['picture']['picture_upload']['#size'] = 20;
  $form['picture']['picture_upload']['#title'] = '';

  unset($form['picture']['picture_upload']['#description']);
  unset($form['picture']['picture_delete']['#description']);

  $form['location'] = array(
    '#type' => 'textfield',
    '#title' => t('Location'),
    '#default_value' => $profile->field_location[0]['value'],
    '#autocomplete_path' => 'autocomplete/places',
    '#description' => t('Which city is your organization located in?'),
    '#theme' => 'wevee_account_textfield_inline',
  );

  $form['website'] = array(
    '#type' => 'textfield',
    '#title' => t('Website'),
    '#description' => t('Where can people find you on the internet?'),
    '#default_value' => $profile->field_npo_website[0]['url'],
    '#theme' => 'wevee_account_textfield_inline',
  );

  $form['bio'] = array(
    '#type' => 'textarea',
    '#title' => t('Bio'),
    '#description' => t('A short blurb about what your organization is about (300 words remaining)'),
    '#default_value' => $profile->field_npo_bio[0]['value'],
    '#rows' => 11,
    '#theme' => 'wevee_account_textarea',
  );

  $form['about'] = array(
    '#type' => 'textarea',
    '#title' => t('About'),
    '#description' => t('Your organization\'s mission statements, some history, and any detailed information you would like users to be aware of'),
    '#default_value' => $profile->field_npo_about[0]['value'],
    '#rows' => 20,
    '#theme' => 'wevee_account_textarea',
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Update'),
    '#description' => '',
    '#weight' => 20,
  );

  $form['#uid'] = $user->uid;
  $form['#attributes'] = array('enctype' => "multipart/form-data");
  $form['#validate'][] = 'user_validate_picture';
  return $form;
}

function weeve_account_change_general_npo_form_vaidate(&$form, &$form_state) {

}

function weeve_account_change_general_npo_form_submit(&$form, &$form_state) {
  global $user;
  $location = $form_state['values']['location'];
  $website = $form_state['values']['website'];
  $bio = $form_state['values']['bio'];
  $about = $form_state['values']['about'];
  $picture = $form_state['values']['picture'];

  if ($picture) {
    $edit['picture'] = $picture;
  }

  if ($form_state['values']['picture_delete']) {
    if ($user->picture && file_exists($user->picture)) {
      file_delete($user->picture);
    }
    $edit['picture'] = '';
  }

  _user_edit_submit($user->uid, $form_state['values']);

  $profile = content_profile_load('profile', $user->uid);
  $profile->field_location[0]['value'] = $location;
  $profile->field_npo_website[0]['url'] = $website;
  $profile->field_npo_bio[0]['value'] = $bio;
  $profile->field_npo_about[0]['value'] = $about;
  node_save($profile);
}

function weeve_account_change_general_user_form() {
  global $user;
  $profile = content_profile_load('profile', $user->uid);
  $user_edit_form = user_edit_form($form_state, $user->uid, (array)$user, FALSE);

  $form = array();

  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),
    '#default_value' => $user->name,
    '#theme' => 'wevee_textfield_inline',
  );

  $form['email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email'),
    '#default_value' => $user->mail,
    '#theme' => 'wevee_textfield_inline',
  );

  $form['show_email'] = array(
    '#type' => 'checkbox',
    '#title' => t(''),
    '#description' => t('Show my email on my profile'),
    '#default_value' => variable_get('account_show_email_'. $user->uid, TRUE),
    '#theme' => 'wevee_account_checkbox',
  );

  $form['location'] = array(
    '#type' => 'textfield',
    '#title' => t('Location'),
    '#default_value' => $profile->field_location[0]['value'],
    '#autocomplete_path' => 'autocomplete/places',
    '#theme' => 'wevee_textfield_inline',
  );

  $form['show_location'] = array(
    '#type' => 'checkbox',
    '#title' => t(''),
    '#description' => t('Show my location on my profile'),
    '#default_value' => variable_get('account_show_location_'. $user->uid, TRUE),
    '#theme' => 'wevee_account_checkbox',
  );

  $form['donation_history'] = array(
    '#type' => 'checkbox',
    '#title' => t('Donation History'),
    '#description' => t('Allow others to view my donation history'),
    '#default_value' => variable_get('account_donation_history_'. $user->uid, TRUE),
    '#theme' => 'wevee_account_checkbox',
  );

  $form['following'] = array(
    '#type' => 'checkbox',
    '#title' => t('Following'),
    '#description' => t('Allow others to view my followings'),
    '#default_value' => variable_get('account_following_'. $user->uid, TRUE),
    '#theme' => 'wevee_account_checkbox',
  );

  $form['picture'] = $user_edit_form['picture'];
  $form['picture']['#title'] = t('Picture');
  $form['picture']['#description'] = t('');
  $form['picture']['#weight'] = -10;
  $form['picture']['picture_upload']['#size'] = 20;
  $form['picture']['picture_upload']['#title'] = '';

  unset($form['picture']['picture_upload']['#description']);
  unset($form['picture']['picture_delete']['#description']);

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Update'),
    '#description' => '',
    '#weight' => 10,
  );
  $form['#uid'] = $user->uid;
  $form['#attributes'] = array('enctype' => "multipart/form-data");
  $form['#validate'][] = 'user_validate_picture';
  return $form;
}

function weeve_account_change_general_user_form_validate(&$form, &$form_state) {
  if (!valid_email_address($form_state['values']['email'])) {
    form_set_error('email', t('No valid email'));
  }
}

function weeve_account_change_general_user_form_submit(&$form, &$form_state) {
  global $user;
  $name = $form_state['values']['name'];
  $email = $form_state['values']['email'];
  $picture = $form_state['values']['picture'];
  $location = $form_state['values']['location'];
  $following = $form_state['values']['following'];

  variable_set('account_show_email_'. $user->uid, $form_state['values']['show_email']);
  variable_set('account_show_location_'. $user->uid, $form_state['values']['show_location']);
  variable_set('account_donation_history_'. $user->uid, $form_state['values']['donation_history']);
  variable_set('account_following_'. $user->uid, $following);

  $edit = array(
    'name' => $name,
    'mail' => $email,
  );

  if ($picture) {
    $edit['picture'] = $picture;
  }

  if ($form_state['values']['picture_delete']) {
    if ($user->picture && file_exists($user->picture)) {
      file_delete($user->picture);
    }
    $edit['picture'] = '';
  }

  _user_edit_submit($user->uid, $form_state['values']);
  $user = user_save($user, $edit);

  $profile = content_profile_load('profile', $user->uid);
  $profile->field_location[0]['value'] = $location;
  node_save($profile);

  drupal_set_message(t('Account has been changed'));
}

function weeve_account_load_user($uid) {
  $result = array(
    'user' => NULL,
    'profile' => NULL,
    'settings' => NULL,
  );

  $user = user_load($uid);
  $account_type = weeve_account_check_type($user);
  $settings = array(
    'show_email' => variable_get('account_show_email_'. $user->uid, TRUE),
    'show_location' => variable_get('account_show_location_'. $user->uid, TRUE),
    'donation_history' => variable_get('account_donation_history_'. $user->uid, TRUE),
    'account_following' => variable_get('account_following_'. $user->uid, TRUE),
  );
  $profile = content_profile_load('profile', $user->uid);
  if ($user->picture) {
    $photo = $user->picture;
  } else {
    $photo = variable_get('user_picture_default', '');
  }
  $user->photo = $photo;
  if ($account_type == 'npo') {
    $view_result = views_get_view_result('featured_projects', 'page_4', $user->uid);
    $money = 0;
    foreach ($view_result as $value) {
      $money += $value->node_data_field_project_image_field_project_amount_pledge_am;
    }
    $user->count_projects = count($view_result);
    $user->money = $money;
    $user->donors = weeve_account_get_total_donors($user->uid);
  }
  if ($account_type == 'user' || $account_type == 'corp') {
    if (module_exists('weeve_donation')) {
      $user->projects_funded = weeve_account_get_count_projects_funded($uid);
      $user->donated = weeve_account_get_total_donated($uid);
      $donations = weeve_donation_get_preapproval_by_uid($uid, 1, 0);
      $history = weeve_account_build_donation_history($donations);
      $user->history = $history;
    }
  }
  $result['user'] = $user;
  $result['profile'] = $profile;
  $result['settings'] = $settings;

  return $result;
}

function weeve_account_page($uid = null) {
  if (!$uid) {
    global $user;
    $uid = $user->uid;
  }

  if (!$uid) {
    drupal_goto('signup');
  }
  $user_info = weeve_account_load_user($uid);
  $account_type = weeve_account_check_type($user_info['user']);
  switch($account_type) {
    case 'user':
    case 'corp':
      $content = theme('weeve_user_account_history', $user_info['user']);
      $output = theme('weeve_user_account_page', $user_info['user'], $user_info['profile'], $user_info['settings'], $content);
      break;

    case 'npo':
      $content = theme('weeve_npo_account_about', $user_info['user'], $user_info['profile']);
      $output = theme('weeve_npo_account_page', $user_info['user'], $user_info['profile'], $user_info['settings'], $content);
      break;

    default:
      $output = theme('weeve_user_account_page', $user_info['user'], $user_info['profile'], $user_info['settings']);
      break;
  }
  return $output;
}

function weeve_account_check_type($user) {
  $roles = $user->roles;
  if (isset($roles[USER_RID])) {
    return 'user';
  }
  if (isset($roles[NPO_RID])) {
    return 'npo';
  }
  if (isset($roles[CORP_RID])) {
    return 'corp';
  }
}

function weeve_account_donation_history_access($uid) {
  global $user;
  if (variable_get('account_donation_history_'. $uid, TRUE) || $uid == $user->uid) {
    return TRUE;
  }
  return FALSE;
}

function weeve_account_following_access($uid) {
  global $user;
  if (variable_get('account_following_'. $uid, TRUE) || $uid == $user->uid) {
    return TRUE;
  }
  return FALSE;
}

function weeve_account_owner_access($uid) {
  global $user;
  if ($user->uid == $uid) {
    return TRUE;
  }
  return FALSE;
}

/*
 * NPO Donation history page
 */
function weeve_account_history_page($uid) {
  $user_info = weeve_account_load_user($uid);
  $content = theme('weeve_npo_account_history', $user_info['user'], $user_info['profile']);
  $output = theme('weeve_npo_account_page', $user_info['user'], $user_info['profile'], $user_info['settings'], $content);
  return $output;
}

function weeve_account_following_page($uid) {
  $user_info = weeve_account_load_user($uid);
  $content = theme('weeve_user_account_following');
  $output = theme('weeve_user_account_page', $user_info['user'], $user_info['profile'], $user_info['settings'], $content);
  return $output;
}

function weeve_account_projects_page($uid) {
  $user_info = weeve_account_load_user($uid);
  $type = weeve_account_check_type($user_info['user']);
  if ($type == 'npo') {
    $content = views_embed_view('npo_project_proposals', 'page_1', $user_info['user']->uid);
    $output = theme('weeve_npo_account_page', $user_info['user'], $user_info['profile'], $user_info['settings'], $content);
    return $output;
  } else {
    drupal_access_denied();
  }
}

function weeve_account_about_page($uid) {
  $user_info = weeve_account_load_user($uid);
  $type = weeve_account_check_type($user_info['user']);
  if ($type == 'npo') {
    $content = theme('weeve_npo_account_about', $user_info['user'], $user_info['profile']);
    $output = theme('weeve_npo_account_page', $user_info['user'], $user_info['profile'], $user_info['settings'], $content);
    return $output;
  } else {
    drupal_access_denied();
  }
}


function weeve_account_ajax_login() {
  if (isset($_POST['name']) && check_plain($_POST['name']) && isset($_POST['pwd']) && check_plain($_POST['pwd'])) {
    $name = $_POST['name'];
    $pass = $_POST['pwd'];
    $params = array('mail' => $name, 'pass' => $pass);

    $account = user_load(array('mail' => $params['mail'], 'pass' => trim($params['pass']), 'status' => 1));
    if ($account) {
      $params['name'] = $account->name;
      $account = user_authenticate($params);
      $response = array('status' => TRUE, 'data' => $account);
    }
    else {
      $response = array('status' => FALSE, 'data' => NULL);
    }
    drupal_json($response);
  }
}

function theme_wevee_account_textfield_inline($element) {
  $size = empty($element['#size']) ? '' : ' size="' . $element['#size'] . '"';
  $maxlength = empty($element['#maxlength']) ? '' : ' maxlength="' . $element['#maxlength'] . '"';
  $class = array('form-text');
  $extra = '';
  $output = '';

  if ($element['#autocomplete_path'] && menu_valid_path(array('link_path' => $element['#autocomplete_path']))) {
    drupal_add_js('misc/autocomplete.js');
    $class[] = 'form-autocomplete';
    $extra = '<input class="autocomplete" type="hidden" id="' . $element['#id'] . '-autocomplete" value="' . check_url(url($element['#autocomplete_path'], array('absolute' => TRUE))) . '" disabled="disabled" />';
  }
  _form_set_class($element, $class);

/*  if (isset($element['#field_prefix'])) {
    $output .= '<span class="field-prefix">' . $element['#field_prefix'] . '</span> ';
  }*/

  $output .= '<input type="text"' . $maxlength . ' name="' . $element['#name'] . '" id="' . $element['#id'] . '"' . $size . ' value="' . check_plain($element['#value']) . '"' . drupal_attributes($element['#attributes']) . ' />';

  if (isset($element['#field_suffix'])) {
    $output .= ' <span class="field-suffix">' . $element['#field_suffix'] . '</span>';
  }

  return theme('wevee_account_form_element_inline', $element, $output) . $extra;
}

function theme_wevee_account_form_element_inline($element, $value) {
  // This is also used in the installer, pre-database setup.
  $t = get_t();

  $output = '<div class="form-item"';
  if (!empty($element['#id'])) {
    $output .= ' id="' . $element['#id'] . '-wrapper"';
  }
  $output .= ">\n";
  $required = !empty($element['#required']) ? '<span class="form-required" title="' . $t('This field is required.') . '">*</span>' : '';

  if (!empty($element['#title'])) {
    $title = $element['#title'];
    if (!empty($element['#id'])) {
      $output .= ' <label for="' . $element['#id'] . '">' . $t('!title: !required', array('!title' => filter_xss_admin($title), '!required' => $required)) . "</label>\n";
    }
    else {
      $output .= ' <label>' . $t('!title: !required', array('!title' => filter_xss_admin($title), '!required' => $required)) . "</label>\n";
    }
    if (!empty($element['#description'])) {
      $output .= ' <div class="description">' . $element['#description'] . "</div>\n";
    }
  }

  $output .= " $value\n";

  $output .= "</div>\n";

  return $output;
}

function theme_wevee_account_textarea($element) {
  $class = array('form-textarea');

    // Add teaser behavior (must come before resizable)
    if (!empty($element['#teaser'])) {
      drupal_add_js('misc/teaser.js');
      // Note: arrays are merged in drupal_get_js().
      drupal_add_js(array('teaserCheckbox' => array($element['#id'] => $element['#teaser_checkbox'])), 'setting');
      drupal_add_js(array('teaser' => array($element['#id'] => $element['#teaser'])), 'setting');
      $class[] = 'teaser';
    }

    // Add resizable behavior
    if ($element['#resizable'] !== FALSE) {
      drupal_add_js('misc/textarea.js');
      $class[] = 'resizable';
    }

    _form_set_class($element, $class);
    return theme('wevee_account_form_element_inline', $element, '<textarea cols="' . $element['#cols'] . '" rows="' . $element['#rows'] . '" name="' . $element['#name'] . '" id="' . $element['#id'] . '" ' . drupal_attributes($element['#attributes']) . '>' . check_plain($element['#value']) . '</textarea>');
}

function theme_wevee_account_checkbox($element) {
  _form_set_class($element, array('form-checkbox'));
  $checkbox = '<input ';
  $checkbox .= 'type="checkbox" ';
  $checkbox .= 'name="' . $element['#name'] . '" ';
  $checkbox .= 'id="' . $element['#id'] . '" ';
  $checkbox .= 'value="' . $element['#return_value'] . '" ';
  $checkbox .= $element['#value'] ? ' checked="checked" ' : ' ';
  $checkbox .= drupal_attributes($element['#attributes']) . ' />';

  if (!is_null($element['#title'])) {
    $checkbox = '<label class="option" for="' . $element['#id'] . '">'. $element['#title'] .' '. $checkbox  .  ' <span class="description">'. $element['#description'] .'</span></label>';
  }
  unset($element['#description']);

  unset($element['#title']);
  return theme('form_element', $element, $checkbox);
}

function weeve_account_forgot_pass_page() {
  module_load_include('inc', 'user', 'user.pages');
  $form = drupal_get_form('user_pass');
  return $form;
}

function weeve_account_get_count_projects_funded($uid) {
  $query = 'SELECT COUNT(DISTINCT(nid)) FROM {weeve_preapproval_payments} WHERE uid = %d AND paid = %d AND archived =  %d';
  $result = db_result(db_query($query, $uid, 1, 0));
  return $result;
}

function weeve_account_get_total_donated($uid) {
  $query = 'SELECT SUM(amount) as total_amount FROM {weeve_preapproval_payments} WHERE uid = %d AND paid = %d AND archived =  %d';
  $result = db_result(db_query($query, $uid, 1, 0));
  if (!$result) {
    $result = 0;
  }
  return $result;
}

function weeve_account_get_total_donors($uid) {
  $query = "SELECT SUM(ctp.field_project_donors_value) as total_donors FROM node n
  INNER JOIN content_type_project ctp ON n.nid = ctp.nid
  WHERE n.uid = %d";
  $donors = db_result(db_query($query, $uid));
  return $donors;
}

function weeve_account_build_donation_history($donations) {
  $history = array();
  foreach ($donations as $key => $donate) {
    $timestamp = $donate->created;
    $date = date('F, Y', $timestamp);

    $sql = 'SELECT title FROM {node} WHERE nid = %d';
    $donate->project_title = db_result(db_query($sql, $donate->nid));

    $history[$date][$key] = $donate;
  }
  return $history;
}

function weeve_account_donated_page($uid) {
  $user_info = weeve_account_load_user($uid);
  $type = weeve_account_check_type($user_info['user']);
  if ($type == 'user' || $type == 'corp') {
    $donations = weeve_donation_get_preapproval_by_uid($uid, 0, 0);
    foreach ($donations as $donate) {
      $node = node_load($donate->nid);
      $dateTime = date_parse_from_format('Y-m-d\TH:i:s', $node->field_project_end[0]['value']);
      $timestamp = mktime((int)$dateTime['hour'], (int)$dateTime['minute'], (int)$dateTime['second'], (int)$dateTime['month'], (int)$dateTime['day'], (int)$dateTime['year']);
      $left =  round(($timestamp - time()) / 86400);
      $node->days_left = $left;
      $projects[$donate->pid]['node'] = $node;
      $projects[$donate->pid]['donate'] = $donate;
    }
    $content = theme('weeve_user_account_donated', $projects);
    $output = theme('weeve_user_account_page', $user_info['user'], $user_info['profile'], $user_info['settings'], $content);
    return $output;
  } else {
    drupal_access_denied();
  }
}
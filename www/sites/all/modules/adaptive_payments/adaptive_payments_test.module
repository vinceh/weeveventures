<?php
/**
 * @file
 * PayPal Adaptive Payments test examples
 *
 */

/**
 * Implementation of hook_ap_presets().
 */
function adaptive_payments_test_ap_presets() {
  $presets['API_UserName'] = variable_get('adaptive_payments_test_API_UserName', '');
  $presets['API_Password'] = variable_get('adaptive_payments_test_API_Password', '');
  $presets['API_Signature'] = variable_get('adaptive_payments_test_API_Signature', '');
  $presets['API_AppID'] = variable_get('adaptive_payments_test_API_AppID', '');
  $presets['returnUrl'] = variable_get('adaptive_payments_test_returnUrl', '');
  $presets['cancelUrl'] = variable_get('adaptive_payments_test_cancelUrl', '');
  $presets['currencyCode'] = variable_get('adaptive_payments_test_currencyCode', 'USD');
  $presets['ipnNotificationUrl'] = variable_get('adaptive_payments_test_ipnNotificationUrl', '');
  $presets['sandbox'] = variable_get('adaptive_payments_test_sandbox', TRUE);
  $presets['debug'] = variable_get('adaptive_payments_test_debug', FALSE);
  return $presets;
}

/*
 * Implementation of hook_menu()
*/

function adaptive_payments_test_menu() {
  $items = array();

  $items['admin/settings/adaptive_payments'] = array(
          'title' => 'PayPal adaptive payments',
          'page callback' => 'drupal_get_form',
          'page arguments' => array('adaptive_payments_test_users_setting_form'),
          'access arguments' => array('administer site configuration'),
          'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/settings/adaptive_payments/users_settings'] = array(
          'title' => 'Users account settings',
          'description' => 'Users setup for Adaptive Payments.',
          'access arguments' => array('administer site configuration'),
          'type' => MENU_DEFAULT_LOCAL_TASK,
          'weight' => 0,
  );
  $items['admin/settings/adaptive_payments/owner_settings'] = array(
          'title' => 'Owner account settings',
          'description' => 'Owner setup for Adaptive Payments.',
          'page callback' => 'drupal_get_form',
          'page arguments' => array('adaptive_payments_test_owner_setting_form'),
          'access arguments' => array('administer site configuration'),
          'type' => MENU_LOCAL_TASK,
          'weight' => 1,
  );
  $items['admin/settings/adaptive_payments/actions'] = array(
          'title' => 'Adaptive Payments actions',
          'description' => 'Adaptive Payments actions.',
          'page callback' => 'drupal_get_form',
          'page arguments' => array('adaptive_payments_test_actions_form'),
          'access arguments' => array('administer site configuration'),
          'type' => MENU_LOCAL_TASK,
          'weight' => 2,
  );

  $items['paypal_redirect/%/%'] = array(
          'title' => 'PayPal redirect',
          'description' => 'Redirect to Paypal.',
          'page callback' => 'adaptive_payments_redirect',
          'page arguments' => array(1, 2),
          'access callback' => TRUE,
          'type' => MENU_CALLBACK,
  );

  $items['paypal_return'] = array(
          'title' => 'PayPal return',
          'description' => 'Return from Paypal.',
          'page callback' => 'adaptive_payments_test_return',
          'page arguments' => array(),
          'access callback' => TRUE,
          'type' => MENU_CALLBACK,
  );
  return $items;
}

function adaptive_payments_test_users_setting_form($form_state) {

  $form['receivers'] = array(
          '#type' => 'fieldset',
          '#title' => t('Receivers'),
          '#weight' => 0,
          '#collapsible' => TRUE,
          '#collapsed' => FALSE,
  );
  for ($i=1; $i<=6; $i++) {
    $form['receivers']['receiver'. $i] = array(
            '#type' => 'fieldset',
            '#title' => t('Receiver '. $i),
            '#weight' => $i,
            '#collapsible' => TRUE,
            '#collapsed' => (variable_get('adaptive_payments_test_receiver_use_'. $i, ''))? FALSE: TRUE,
    );
    $form['receivers']['receiver'. $i]['adaptive_payments_test_receiver_'. $i] = array(
            '#type' => 'textfield',
            '#title' => t('Receiver '. $i .' user name'),
            '#default_value' => variable_get('adaptive_payments_test_receiver_'. $i, ''),
            '#size' => 60,
            '#maxlength' => 128,
    );
    $form['receivers']['receiver'. $i]['adaptive_payments_test_receiver_amount_'. $i] = array(
            '#type' => 'textfield',
            '#title' => t('Receiver '. $i .' amount'),
            '#default_value' => variable_get('adaptive_payments_test_receiver_amount_'. $i, ''),
            '#size' => 30,
            '#maxlength' => 128,
    );
    $form['receivers']['receiver'. $i]['adaptive_payments_test_receiver_primary_'. $i] = array(
            '#type' => 'checkbox',
            '#title' => t('Receiver '. $i .' is primary'),
            '#description' => t('Used for chained payments. Only one receiver can be primary.'),
            '#default_value' => variable_get('adaptive_payments_test_receiver_primary_'. $i, ''),
    );
    $form['receivers']['receiver'. $i]['adaptive_payments_test_receiver_invoiceid_'. $i] = array(
            '#type' => 'textfield',
            '#title' => t('Receiver '. $i .' invoice ID'),
            '#default_value' => variable_get('adaptive_payments_test_receiver_invoiceid_'. $i, ''),
            '#size' => 30,
            '#maxlength' => 128,
    );
    $form['receivers']['receiver'. $i]['adaptive_payments_test_receiver_use_'. $i] = array(
            '#type' => 'checkbox',
            '#title' => t('Use this receiver'),
            '#default_value' => variable_get('adaptive_payments_test_receiver_use_'. $i, ''),
    );
  }
  $form['adaptive_payments_test_sender'] = array(
          '#type' => 'textfield',
          '#title' => t('Sender user name'),
          '#default_value' => variable_get('adaptive_payments_test_sender', ''),
          '#description' => t('Used for preaproval payments.'),
          '#size' => 60,
          '#maxlength' => 128,
  );

  return system_settings_form($form);
}

function adaptive_payments_test_owner_setting_form($form_state) {
  $form['adaptive_payments_test_API_UserName'] = array(
          '#type' => 'textfield',
          '#title' => t('API_UserName'),
          '#default_value' => variable_get('adaptive_payments_test_API_UserName', ''),
          '#size' => 60,
          '#maxlength' => 128,
          '#required' => TRUE,
  );
  $form['adaptive_payments_test_API_Password'] = array(
          '#type' => 'textfield',
          '#title' => t('API_Password'),
          '#default_value' => variable_get('adaptive_payments_test_API_Password', ''),
          '#size' => 60,
          '#maxlength' => 128,
          '#required' => TRUE,
  );
  $form['adaptive_payments_test_API_Signature'] = array(
          '#type' => 'textfield',
          '#title' => t('API_Signature'),
          '#default_value' => variable_get('adaptive_payments_test_API_Signature', ''),
          '#size' => 60,
          '#maxlength' => 128,
          '#required' => TRUE,
  );
  $form['adaptive_payments_test_API_AppID'] = array(
          '#type' => 'textfield',
          '#title' => t('API_AppID'),
          '#default_value' => variable_get('adaptive_payments_test_API_AppID', ''),
          '#size' => 60,
          '#maxlength' => 128,
          '#required' => TRUE,
  );
  $form['adaptive_payments_test_returnUrl'] = array(
          '#type' => 'textfield',
          '#title' => t('returnUrl'),
          '#default_value' => variable_get('adaptive_payments_test_returnUrl', ''),
          '#size' => 60,
          '#maxlength' => 128,
          '#required' => TRUE,
  );
  $form['adaptive_payments_test_cancelUrl'] = array(
          '#type' => 'textfield',
          '#title' => t('cancelUrl'),
          '#default_value' => variable_get('adaptive_payments_test_cancelUrl', ''),
          '#size' => 60,
          '#maxlength' => 128,
          '#required' => TRUE,
  );
  $form['adaptive_payments_test_ipnNotificationUrl'] = array(
          '#type' => 'textfield',
          '#title' => t('ipnNotificationUrl'),
          '#default_value' => variable_get('adaptive_payments_test_ipnNotificationUrl', ''),
          '#size' => 60,
          '#maxlength' => 128,
          '#required' => TRUE,
  );
  $form['adaptive_payments_test_currencyCode'] = array(
          '#type' => 'textfield',
          '#title' => t('currencyCode'),
          '#default_value' => variable_get('adaptive_payments_test_currencyCode', 'USD'),
          '#size' => 60,
          '#maxlength' => 128,
          '#required' => TRUE,
  );

  return system_settings_form($form);
}

function adaptive_payments_test_actions_form($form_state) {
  $form['adaptive_payments_test_last_pay_key'] = array(
          '#type' => 'item',
          '#title' => t('Last generated pay key'),
          '#value' => variable_get('adaptive_payments_test_last_paykey', ''),
          '#description' => t('The last payKey from a successful request. It will be used for further actions'),
  );

  $form['adaptive_payments_test_last_preapproval_key'] = array(
          '#type' => 'item',
          '#title' => t('Last generated preapproval key'),
          '#value' => variable_get('adaptive_payments_test_last_preapprovalKey', ''),
          '#description' => t('The last preapprovalKey from a successful request. It will be used for further actions.'),
  );

  $form['adaptive_payments_test_last_transactionId'] = array(
          '#type' => 'item',
          '#title' => t('Last generated transaction ID'),
          '#value' => variable_get('adaptive_payments_test_last_transactionId', ''),
          '#description' => t('The last trasaction ID from a successful payment details request. It will be used for further actions.'),
  );

  $form['adaptive_payments_test_trackingId'] = array(
          '#type' => 'textfield',
          '#title' => t('Tracking ID (optional)'),
          '#default_value' => variable_get('adaptive_payments_test_trackingId', ''),
          '#size' => 60,
          '#maxlength' => 128,
  );

  $form['adaptive_payments_test_memo'] = array(
          '#type' => 'textfield',
          '#title' => t('Add a memo or message (optional)'),
          '#default_value' => variable_get('adaptive_payments_test_memo', ''),
  );

  if (module_exists('devel')) {
    $form['adaptive_payments_test_debug'] = array(
            '#type' => 'checkbox',
            '#title' => t('Debug mode'),
            '#description' => t('Debug mode will show various reports from Adaptive Payment API functions using the devel module.'),
            '#default_value' => variable_get('adaptive_payments_test_debug', FALSE),
    );
  }

  $form['adaptive_payments_test_redirect'] = array(
          '#type' => 'checkbox',
          '#title' => t('Redirect to PayPal to complete payment'),
          '#description' => t('Auto redirect to PayPal to log in and complete payment. If this checked, then Debug information will not show. Use Redirect buttom below to manual redirect if this is not set.'),
          '#default_value' => variable_get('adaptive_payments_test_redirect', FALSE),
  );

  $form['actions'] = array(
          '#type' => 'fieldset',
          '#title' => t('Actions'),
          '#collapsible' => FALSE,
          '#collapsed' => FALSE,
  );

  $form['actions']['direct'] = array(
          '#type' => 'fieldset',
          '#collapsible' => FALSE,
          '#collapsed' => FALSE,
          '#description' => t('Direct payment from a sender to single receiver. Uses Receiver 1\'s details.'),
  );

  $form['actions']['direct']['paydirect'] = array(
          '#type' => 'submit',
          '#value' => 'Direct payment',
          '#validate' => array('adaptive_payments_test_direct'),
  );

  $form['actions']['implicit'] = array(
          '#type' => 'fieldset',
          '#collapsible' => FALSE,
          '#collapsed' => FALSE,
          '#description' => t('Implicit payment from site owner to single receiver. Uses Receiver 1\'s details. Implicit can also be used for parallel and chained payments.'),
  );

  $form['actions']['implicit']['payimplicit'] = array(
          '#type' => 'submit',
          '#value' => 'Implicit payment',
          '#validate' => array('adaptive_payments_test_implicit'),
  );

  $form['actions']['parallel'] = array(
          '#type' => 'fieldset',
          '#collapsible' => FALSE,
          '#collapsed' => FALSE,
          '#description' => t('Parallel payment to all receivers that is enabled. Sender pays fees'),
  );

  $form['actions']['parallel']['paypara'] = array(
          '#type' => 'submit',
          '#value' => 'Parallel payment',
          '#validate' => array('adaptive_payments_test_parallel'),
  );

  $form['actions']['chained'] = array(
          '#type' => 'fieldset',
          '#collapsible' => FALSE,
          '#collapsed' => FALSE,
          '#description' => t('Chained payment to all receivers that is enabled. Primary receiver pays fees'),
  );

  $form['actions']['chained']['paychain'] = array(
          '#type' => 'submit',
          '#value' => 'Chained payment',
          '#validate' => array('adaptive_payments_test_chained'),
  );

  $form['actions']['detail'] = array(
          '#type' => 'fieldset',
          '#collapsible' => FALSE,
          '#collapsed' => FALSE,
          '#description' => t('Get payment details based on last pay key. (Debug mode required to see results)'),
  );

  $form['actions']['detail']['direct'] = array(
          '#type' => 'submit',
          '#value' => 'Payment details',
          '#validate' => array('adaptive_payments_test_details'),
  );

  $form['actions']['refund'] = array(
          '#type' => 'fieldset',
          '#collapsible' => FALSE,
          '#collapsed' => FALSE,
          '#description' => t('Refund a payment based on last pay key, transaction id or tracking id. '),
  );

  $form['actions']['refund']['dorefund'] = array(
          '#type' => 'submit',
          '#value' => 'Refund',
          '#validate' => array('adaptive_payments_test_details'),
  );

  $form['actions']['preapp'] = array(
          '#type' => 'fieldset',
          '#collapsible' => FALSE,
          '#collapsed' => FALSE,
          '#description' => t('Setup preapproval details for a user.'),
  );

  $form['actions']['preapp']['adaptive_payments_test_startingDate'] = array(
          '#type' => 'textfield',
          '#title' => t('Starting date (Required)'),
          '#default_value' => variable_get('adaptive_payments_test_startingDate', ''),
          '#description' => t(' Format: 2009-12-13T08:00:00.000Z '),
          '#size' => 30,
          '#maxlength' => 128,
  );

  $form['actions']['preapp']['adaptive_payments_test_endingDate'] = array(
          '#type' => 'textfield',
          '#title' => t('Ending date (Required)'),
          '#default_value' => variable_get('adaptive_payments_test_endingDate', ''),
          '#description' => t(' Format: 2009-12-13T08:00:00.000Z Ending date cannot be later than one year after starting date'),
          '#size' => 30,
          '#maxlength' => 128,
  );

  $form['actions']['preapp']['adaptive_payments_test_maxTotalAmountOfAllPayments'] = array(
          '#type' => 'textfield',
          '#title' => t('Maximum total amount of all payments (Required. $2000.00 max).'),
          '#default_value' => variable_get('adaptive_payments_test_maxTotalAmountOfAllPayments', ''),
          '#size' => 30,
          '#maxlength' => 128,
  );

  $form['actions']['preapp']['adaptive_payments_test_maxNumberOfPayments'] = array(
          '#type' => 'textfield',
          '#title' => t('Maximum amount of payments allowed.'),
          '#description' => t('Optional. There are other settings that can be used as well. See PayPal docs.'),
          '#default_value' => variable_get('adaptive_payments_test_maxNumberOfPayments', ''),
          '#size' => 30,
          '#maxlength' => 128,
  );

  $form['actions']['preapp']['setapp'] = array(
          '#type' => 'submit',
          '#value' => 'Set preapproval details',
          '#validate' => array('adaptive_payments_test_set_app'),
  );

  $form['actions']['preapp']['getappdetails'] = array(
          '#type' => 'submit',
          '#value' => 'Get preapproval details',
          '#validate' => array('adaptive_payments_test_get_app'),
  );

  $form['actions']['preapp']['cancelapp'] = array(
          '#type' => 'submit',
          '#value' => 'Cancel preapproval',
          '#validate' => array('adaptive_payments_test_cancel_app'),
  );

  $form['actions']['preapp']['payapp'] = array(
          '#type' => 'submit',
          '#value' => 'Make a preapproved payment',
          '#validate' => array('adaptive_payments_test_pay_app'),
  );

  $form['actions']['redirect'] = array(
          '#type' => 'fieldset',
          '#collapsible' => FALSE,
          '#collapsed' => FALSE,
          '#description' => t('Manual redirect to Paypal to log in and complete payment.'),
  );

  $form['actions']['redirect']['adaptive_payments_test_redirect_cmd'] = array(
          '#type' => 'radios',
          '#title' => t('Type of redirect action'),
          '#default_value' => variable_get('adaptive_payments_test_redirect_cmd', ''),
          '#options' => array('_ap-payment' => t('Payment'), '_ap-preapproval' => t('Preapproval')),
  );

  $form['actions']['redirect']['direct'] = array(
          '#type' => 'submit',
          '#value' => 'Redirect to Paypal',
          '#validate' => array('adaptive_payments_test_redirect'),
  );


  return $form;
}

function adaptive_payments_test_direct($form, &$form_state) {

  adaptive_payments_test_save_variables($form_state);

  $actionType	= "PAY";

  $receiver = array();
  ($receiver[0]['receiverEmail'] = variable_get('adaptive_payments_test_receiver_1', ''));
  $receiver[0]['receiverAmount'] = variable_get('adaptive_payments_test_receiver_amount_1', '');
  $receiver[0]['receiverPrimary'] = '';
  $receiver[0]['receiverInvoiceID'] = '';

  $optional = array();
  $optional['memo'] = variable_get('adaptive_payments_test_memo', '');
  $optional['trackingID'] = variable_get('adaptive_payments_test_trackingid', '');

  $response_array = adaptive_payments_pay($actionType, $receiver, $optional);

  $ack = strtoupper($response_array["responseEnvelope.ack"]);

  if($ack == "SUCCESS") {
    $cmd = '_ap-payment';
    $key = urldecode($response_array["payKey"]);
    drupal_set_message(t('Direct payment success'));
    variable_set('adaptive_payments_test_last_paykey', $key);

    if ($form_state['values']['adaptive_payments_test_redirect']) {
      drupal_goto('paypal_redirect/'. $cmd .'/'. $key);
    }
  }
  else {
    drupal_set_message(t('Direct payment fail: @error', array('@error' => $response_array["error(0).message"])));
  }
}

function adaptive_payments_test_implicit($form, &$form_state) {

  adaptive_payments_test_save_variables($form_state);

  $actionType	= "PAY";

  $receiver = array();
  $receiver[0]['receiverEmail'] = variable_get('adaptive_payments_test_receiver_1', '');
  $receiver[0]['receiverAmount'] = variable_get('adaptive_payments_test_receiver_amount_1', '');
  $receiver[0]['receiverPrimary'] = '';
  $receiver[0]['receiverInvoiceID'] = '';

  $optional = array();
  $optional['memo'] = variable_get('adaptive_payments_test_memo', '');
  $optional['trackingID'] = variable_get('adaptive_payments_test_trackingid', '');
  $optional['senderEmail'] = variable_get('adaptive_payments_test_API_UserName', '');//required

  $response_array = adaptive_payments_pay($actionType, $receiver, $optional);

  $ack = strtoupper($response_array["responseEnvelope.ack"]);

  if($ack == "SUCCESS") {
    $cmd = '_ap-payment';
    $key = urldecode($response_array["payKey"]);
    drupal_set_message(t('Implicit payment success'));
    variable_set('adaptive_payments_test_last_paykey', $key);

    if ($form_state['values']['adaptive_payments_test_redirect']) {
      drupal_goto('paypal_redirect/'. $cmd .'/'. $key);
    }
  }
  else {
    drupal_set_message(t('Implicit payment fail: @error', array('@error' => $response_array["error(0).message"])));
  }
}

function adaptive_payments_test_chained($form, &$form_state) {

  adaptive_payments_test_save_variables($form_state);

  $actionType	= "PAY";

  $receiver = array();
  $i = 0;
  for ($j = 1; $j<=6; $j++) {
    $is_on = variable_get('adaptive_payments_test_receiver_use_'. $j, '');
    if ($is_on) {
      $receiver[$i]['receiverEmail'] = variable_get('adaptive_payments_test_receiver_'. $j, '');
      $receiver[$i]['receiverAmount'] = variable_get('adaptive_payments_test_receiver_amount_'. $j, '');
      $receiver[$i]['receiverPrimary'] = variable_get('adaptive_payments_test_receiver_primary_'. $j, '');;
      $receiver[$i]['receiverInvoiceID'] = variable_get('adaptive_payments_test_invoiceid_'. $j, '');
      $i++;
    }
  }

  $optional = array();
  $optional['memo'] = variable_get('adaptive_payments_test_memo', '');
  $optional['trackingID'] = variable_get('adaptive_payments_test_trackingid', '');
  $optional['feesPayer'] = 'PRIMARYRECEIVER';

  $response_array = adaptive_payments_pay($actionType, $receiver, $optional);

  $ack = strtoupper($response_array["responseEnvelope.ack"]);

  if($ack == "SUCCESS") {
    $cmd = '_ap-payment';
    $key = urldecode($response_array["payKey"]);
    drupal_set_message(t('Chained payment success'));
    variable_set('adaptive_payments_test_last_paykey', $key);

    if ($form_state['values']['adaptive_payments_test_redirect']) {
      drupal_goto('paypal_redirect/'. $cmd .'/'. $key);
    }
  }
  else {
    drupal_set_message(t('Chained payment fail: @error', array('@error' => $response_array["error(0).message"])));
  }
}

function adaptive_payments_test_parallel($form, &$form_state) {

  adaptive_payments_test_save_variables($form_state);

  $actionType	= "PAY";

  $receiver = array();
 $i = 0;
  for ($j = 1; $j<=6; $j++) {
    $is_on = variable_get('adaptive_payments_test_receiver_use_'. $j, '');
    if ($is_on) {
      $receiver[$i]['receiverEmail'] = variable_get('adaptive_payments_test_receiver_'. $j, '');
      $receiver[$i]['receiverAmount'] = variable_get('adaptive_payments_test_receiver_amount_'. $j, '');
      $receiver[$i]['receiverInvoiceID'] = variable_get('adaptive_payments_test_invoiceid_'. $j, '');
      $i++;
    }
  }

  $optional = array();
  $optional['memo'] = variable_get('adaptive_payments_test_memo', '');
  $optional['trackingID'] = variable_get('adaptive_payments_test_trackingid', '');
  $optional['feesPayer'] = 'SENDER';
  $response_array = adaptive_payments_pay($actionType, $receiver, $optional);

  $ack = strtoupper($response_array["responseEnvelope.ack"]);

  if($ack == "SUCCESS") {
    $cmd = '_ap-payment';
    $key = urldecode($response_array["payKey"]);
    drupal_set_message(t('Parallel payment success'));
    variable_set('adaptive_payments_test_last_paykey', $key);

    if ($form_state['values']['adaptive_payments_test_redirect']) {
      drupal_goto('paypal_redirect/'. $cmd .'/'. $key);
    }
  }
  else {
    drupal_set_message(t('Parallel payment fail: @error', array('@error' => $response_array["error(0).message"])));
  }
}

function adaptive_payments_test_set_app($form, &$form_state) {

  adaptive_payments_test_save_variables($form_state);

  $required = array();
  $required['startingDate'] = variable_get('adaptive_payments_test_startingDate', '');
  $required['endingDate'] = variable_get('adaptive_payments_test_endingDate', '');
  $required['maxTotalAmountOfAllPayments'] = variable_get('adaptive_payments_test_maxTotalAmountOfAllPayments', '');

  $optional = array();
  $optional['maxNumberOfPayments'] = variable_get('adaptive_payments_test_maxNumberOfPayments', '');

  $response_array = adaptive_payments_preapproval($required, $optional);

  $ack = strtoupper($response_array["responseEnvelope.ack"]);

  if ($ack == "SUCCESS") {
    $cmd = '_ap-preapproval';
    $key = urldecode($response_array["preapprovalKey"]);
    drupal_set_message(t('Preapproval success'));
    variable_set('adaptive_payments_test_last_preapprovalKey', $key);

    if ($form_state['values']['adaptive_payments_test_redirect']) {
      drupal_goto('paypal_redirect/'. $cmd .'/'. $key);
    }

  }
  else {
    drupal_set_message(t('Preapproval fail: @error', array('@error' => $response_array["error(0).message"])));
  }
}

function adaptive_payments_test_get_app($form, &$form_state) {

  adaptive_payments_test_save_variables($form_state);

  $getBillingAddress = TRUE;
  $preapprovalKey = variable_get('adaptive_payments_test_last_preapprovalKey', '');
  $response_array = adaptive_payments_preapproval_details($preapprovalKey, $getBillingAddress);

  $ack = strtoupper($response_array["responseEnvelope.ack"]);

  if($ack == "SUCCESS") {
    drupal_set_message(t('Preapproval details request success'));
  }
  else {
    drupal_set_message(t('Preapproval details request fail: @error', array('@error' => $response_array["error(0).message"])));
  }
}

function adaptive_payments_test_cancel_app($form, &$form_state) {

  adaptive_payments_test_save_variables($form_state);

  $preapprovalKey = variable_get('adaptive_payments_test_last_preapprovalKey', '');
  $response_array = adaptive_payments_preapproval_cancel($preapprovalKey);

  $ack = strtoupper($response_array["responseEnvelope.ack"]);

  if($ack == "SUCCESS") {
    drupal_set_message(t('Preapproval cancel success'));
    //variable_set('adaptive_payments_test_last_preapprovalKey', '');

  }
  else {
    drupal_set_message(t('Preapproval cancel fail: @error', array('@error' => $response_array["error(0).message"])));
  }
}

function adaptive_payments_test_pay_app($form, &$form_state) {

  adaptive_payments_test_save_variables($form_state);

  $actionType	= "PAY";

  $receiver = array();
  $receiver[0]['receiverEmail'] = variable_get('adaptive_payments_test_receiver_1', '');
  $receiver[0]['receiverAmount'] = variable_get('adaptive_payments_test_receiver_amount_1', '');
  $receiver[0]['receiverPrimary'] = '';
  $receiver[0]['receiverInvoiceID'] = '';

  $optional = array();
  $optional['memo'] = variable_get('adaptive_payments_test_memo', '');
  $optional['trackingID'] = variable_get('adaptive_payments_test_trackingid', '');
  $optional['preapprovalKey'] = variable_get('adaptive_payments_test_last_preapprovalKey', '');
  $optional['senderEmail'] = variable_get('adaptive_payments_test_sender', ''); //needed?
  $response_array = adaptive_payments_pay($actionType, $receiver, $optional);

  $ack = strtoupper($response_array["responseEnvelope.ack"]);

  if($ack == "SUCCESS") {
    drupal_set_message(t('Pre-approved payment success'));
    $cmd = '_ap-payment';
    $key = urldecode($response_array["payKey"]);
    variable_set('adaptive_payments_test_last_paykey', $key);
  }
  else {
    drupal_set_message(t('Preapproval payment fail: @error', array('@error' => $response_array["error(0).message"])));
  }
}

function adaptive_payments_test_details($form, &$form_state) {

  adaptive_payments_test_save_variables($form_state);
  $payKey = variable_get('adaptive_payments_test_last_paykey', '');
  $response_array = adaptive_payments_payment_details($payKey, $transactionId, $trackingId);


  $ack = strtoupper($response_array["responseEnvelope.ack"]);

  if($ack == "SUCCESS") {
    drupal_set_message(t('Request details success'));
    variable_set('adaptive_payments_test_last_transactionId',$response_array["paymentInfoList.paymentInfo(0).senderTransactionId"]);

    //enable debug mode to see response
  }
  else {
    drupal_set_message(t('Request details fail: @error', array('@error' => $response_array["error(0).message"])));
    //enable debug mode to see response
  }
}

function adaptive_payments_test_refund($form, &$form_state) {

  adaptive_payments_test_save_variables($form_state);

  $payKey = variable_get('adaptive_payments_test_last_paykey', '');
  //or
  $transactionId = variable_get('adaptive_payments_test_last_transactionId', '');
  //or
  $trackingId = variable_get('adaptive_payments_test_trackingId', '');
  $response_array = adaptive_payments_refund($payKey, $transactionId, $trackingId, $receiver);


  $ack = strtoupper($response_array["responseEnvelope.ack"]);

  if($ack == "SUCCESS") {
    drupal_set_message(t('Refund success'));
    //enable debug mode to see response
  }
  else {
    drupal_set_message(t('Refund fail: @error', array('@error' => $response_array["error(0).message"])));
    //enable debug mode to see response
  }
}

function adaptive_payments_test_redirect($form, &$form_state) {

  adaptive_payments_test_save_variables($form_state);

  $cmd = $form_state['values']['adaptive_payments_test_redirect_cmd'];
  if ($cmd == '_ap-payment') {
    $key = variable_get('adaptive_payments_test_last_paykey', '');
  }
  else {
    $key = variable_get('adaptive_payments_test_last_preapprovalKey', '');
  }
  drupal_goto('paypal_redirect/'. $cmd .'/'. $key);

}

function adaptive_payments_test_save_variables($form_state) {
  variable_set('adaptive_payments_test_debug', $form_state['values']['adaptive_payments_test_debug']);
  variable_set('adaptive_payments_test_redirect', $form_state['values']['adaptive_payments_test_redirect']);
  variable_set('adaptive_payments_test_redirect_cmd', $form_state['values']['adaptive_payments_test_redirect_cmd']);
  variable_set('adaptive_payments_test_startingDate', $form_state['values']['adaptive_payments_test_startingDate']);
  variable_set('adaptive_payments_test_endingDate', $form_state['values']['adaptive_payments_test_endingDate']);
  variable_set('adaptive_payments_test_maxTotalAmountOfAllPayments', $form_state['values']['adaptive_payments_test_maxTotalAmountOfAllPayments']);
  variable_set('adaptive_payments_test_maxNumberOfPayments', $form_state['values']['adaptive_payments_test_maxNumberOfPayments']);
  variable_set('adaptive_payments_test_trackingId', $form_state['values']['adaptive_payments_test_trackingId']);
  variable_set('adaptive_payments_test_memo', $form_state['values']['adaptive_payments_test_memo']);

}



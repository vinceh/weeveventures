<?php

function weeve_search_apachesolr_update_index(&$document, $node) {
  if (count($node->field_project_image)) {
    //add the cck image field called field_project_image as a separate field to the SOLR search index schema
    $document->addField('sm_field_project_image', $node->field_project_image[0]['filepath']);
  }

  if (count($node->field_project_location)) {
    $document->addField('sm_field_project_location', $node->field_project_location[0]['value']);
  }

  if (count($node->field_project_donors)) {
    $document->addField('sm_field_project_donors', $node->field_project_donors[0]['value']);
  }

  if (count($node->field_project_amount_pledge)) {
    $document->addField('sm_field_project_amount_pledge', $node->field_project_amount_pledge[0]['amount']);
  }

  if (count($node->field_project_amount_need)) {
    $document->addField('sm_field_project_amount_need', $node->field_project_amount_need[0]['amount']);
  }

  if (count($node->field_project_end)) {
    $date_time = date_parse_from_format('Y-m-d\TH:i:s', $node->field_project_end[0]['value']);
    $timestamp = mktime((int) $date_time['hour'], (int) $date_time['minute'], (int) $date_time['second'], (int) $date_time['month'], (int) $date_time['day'], (int) $date_time['year']);

    $days_left = round(($timestamp - time()) / 86400);

    $document->addField('sm_field_project_end', $days_left);
  }
  
}

function weeve_search_apachesolr_modify_query(&$query, &$params, $caller) {
  $params['fl'] .= ',sm_field_project_image,sm_field_project_location,sm_field_project_donors,sm_field_project_amount_pledge,sm_field_project_amount_need,sm_field_project_end';
}

function weeve_search_apachesolr_cck_fields_alter(&$mappings) {
  $mappings['per-field']['field_project_image'] = array(
      'callback' => 'weeve_search_apachesolr_file_callback',
      'index_type' => 'string'
  );

  $mappings['per-field']['field_project_location'] = array(
      'callback' => 'weeve_search_apachesolr_callback',
      'index_type' => 'string'
  );

  $mappings['per-field']['field_project_donors'] = array(
      'callback' => 'weeve_search_apachesolr_callback',
      'index_type' => 'string'
  );

  $mappings['per-field']['field_project_amount_pledge'] = array(
      'callback' => 'weeve_search_apachesolr_callback',
      'index_type' => 'string'
  );

  $mappings['per-field']['field_project_amount_need'] = array(
      'callback' => 'weeve_search_apachesolr_callback',
      'index_type' => 'string'
  );

  $mappings['per-field']['field_project_end'] = array(
      'callback' => 'weeve_search_apachesolr_callback',
      'index_type' => 'string'
  );
}

/**
 * A function that gets called during indexing.
 * @node The current node being indexed
 * @fieldname The current field being indexed
 *
 * @return an array of arrays. Each inner array is a value, and must be
 * keyed 'value' => $value
 */
function weeve_search_apachesolr_file_callback($node, $fieldname) {
  $fields = array();
  foreach ($node->$fieldname as $field) {
    // In this case we are indexing the filemime type. While this technically
    // makes it possible that we could search for nodes based on the mime type
    // of their file fields, the real purpose is to have facet blocks during
    // searching.
    $fields[] = array('value' => $field['filemime']);
  }
  return $fields;
}

function weeve_search_apachesolr_callback($node, $fieldname) {
  $fields = array();
  //foreach ($node->$fieldname as $field) {
    // In this case we are indexing the filemime type. While this technically
    // makes it possible that we could search for nodes based on the mime type
    // of their file fields, the real purpose is to have facet blocks during
    // searching.
    //$fields[] = array('value' => $field['filemime']);
  //}
  return $fields;
}
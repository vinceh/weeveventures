<?php
define('VOCABULARY_PROJECT_CATEGORIES_ID', 1);

function _weeve_project_autoload($className) {
  $path = explode('_', $className);
  $file .= implode("/", $path) . '.php';
	include $file;
  
}

function weeve_project_init() {
  set_include_path(
    $_SERVER['DOCUMENT_ROOT'] . "/sites/all/libraries"
		. PATH_SEPARATOR . get_include_path()
  );

  include_once 'Zend/Loader/Autoloader.php';
  Zend_Loader_Autoloader::getInstance()->setDefaultAutoloader('_weeve_project_autoload');

  if (arg(0) == 'account') {
    jquery_ui_add('ui.dialog');
    drupal_add_js(drupal_get_path('module', 'weeve_project') . '/js/projects.js');
  }
}

function weeve_project_menu() {
  $items = array();

  $items['project/terms'] = array(
    'title' => 'Starting a project - Guidelines & Conditions',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('weeve_project_terms_form'),
    'access callback' => 'weeve_project_proposal_valid',
    'type' => MENU_CALLBACK,
  );

  $items['project/%/edit'] = array(
    'title' => 'Edit project',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('weeve_project_edit_project_form', 1),
    'access callback' => 'weeve_project_edit_own_project_valid',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK
  );

  $items['project/%/activity'] = array(
    'title' => 'Project activity',
    'page callback' => 'weeve_project_activity_project',
    'page arguments' => array(1),
    'access callback' => 'weeve_project_edit_own_project_valid',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK
  );

  $items['project/%/currentfunds'] = array(
    'title' => 'Current funds',
    'page callback' => 'weeve_project_currentfunds_project',
    'page arguments' => array(1),
    'access callback' => true,
    'type' => MENU_CALLBACK
  );

  $items['project/%/cancel'] = array(
    'title' => 'Cancel project',
    'page callback' => 'weeve_project_cancel_project',
    'page arguments' => array(1),
    'access callback' => 'weeve_project_edit_own_project_valid',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK
  );

  $items['project/%/payout'] = array(
    'title' => 'Request payout',
    'page callback' => 'weeve_project_payout_project',
    'page arguments' => array(1),
    'access callback' => 'weeve_project_edit_own_project_valid',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK
  );
  
  $items['project/%/funds'] = array(
    'title' => 'Change funds',
    'page callback' => 'weeve_project_funds_project',
    'page arguments' => array(1),
    'access callback' => 'weeve_project_edit_own_project_valid',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK
  );

  $items['project/%/adminfunds'] = array(
    'title' => 'Admin funds',
    'page callback' => 'weeve_project_adminfunds_project',
    'page arguments' => array(1),
    'access callback' => true,
    'type' => MENU_CALLBACK
  );

  $items['project/%node/comment'] = array(
    'title' => 'Node comment',
    'page callback' => 'weeve_project_comment_project',
    'page arguments' => array(1),
    'access callback' => 'weeve_project_do_comment_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK
  );

  return $items;
}

function weeve_project_menu_alter($items) {
  $items['node/add/project-request']['access callback'] = 'weeve_project_proposal_valid';
  
  $items['node/add/project']['access callback'] = 'weeve_project_project_valid';

  $items['node/%node']['page callback'] = 'weeve_node_page_view';

  $items['search/node/%menu_tail']['page callback'] = 'drupal_not_found';
  $items['search/node/%menu_tail']['type'] = MENU_CALLBACK;
  $items['search/user/%menu_tail']['page callback'] = 'drupal_not_found';
  $items['search/user/%menu_tail']['type'] = MENU_CALLBACK;

  $items['comment/reply/%node']['access callback'] = 'weeve_project_do_comment_access';
  $items['comment/reply/%node']['access arguments'] = array(2);
}

function weeve_node_page_view($node, $cid = NULL) {
  drupal_set_title(check_plain($node->title));
  return weeve_node_show($node, $cid);
}

function weeve_node_show($node, $cid, $message = FALSE) {
  if ($message) {
    drupal_set_title(t('Revision of %title from %date', array('%title' => $node->title, '%date' => format_date($node->revision_timestamp))));
  }
  $output = node_view($node, FALSE, TRUE);

  // Update the history table, stating that this user viewed this node.
  node_tag_new($node->nid);

  return $output;
}

function weeve_project_can_comment($nid) {
  global $user;
  $node = node_load($nid);
  if ($user->uid == $node->uid) {
    return true;
  }
  
  if (in_array('admin', $user->roles) || $user->uid == $node->uid) {
    return true;
  }

  $result = db_query("SELECT * FROM {weeve_preapproval_payments} WHERE nid=%d AND uid=%d", $nid, $user->uid);

  $row = db_fetch_object($result);

  if ($row->amount > 0) {
    return true;
  }
  
  return false;
}

function weeve_project_do_comment_access($node) {
  if (node_access('view', $node)) {
    if (weeve_project_can_comment($node->nid)) {
      return true;
    }
  }

  return false;
}

function weeve_project_edit_own_project_valid($nid) {
  global $user;

  if ($user->uid == 1 || in_array('admin', $user->roles)) {
    return true;
  }

  $node = node_load(array('nid' => $nid));

  if (!$node) {
    return false;
  }

  if ($node->uid == $user->uid) {
    return true; //is author
  }

  return false;
}

function weeve_project_project_valid() {  
  if (_weeve_project_is_allowed_create_project()) {
    return user_access('create project content');
  }

  return false;
}

function weeve_project_proposal_valid() {
  if (_weeve_project_is_allowed_create_proposal()) {
    //No "active" proposals for now
    if (!user_access('create project_request content')) {
      return false;
    }        
  } else {
    //Have "active" proposals. User should use active proposal, but return true
    //to redirect later for selection of proposals
    return weeve_project_project_valid();
  }

  return true;
}

function weeve_project_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'project_node_form' && arg(1) == 'add') {
    global $user;
    $form['#redirect'] = 'account/' . $user->uid . '/projects';
    $proposal_nid = arg(3);

    $profile = node_load(array('type' => 'profile', 'uid' => $user->uid));

    if (in_array($profile->field_payment_paypal_verified[0]['value'], array(0, 2))) {
      drupal_set_message('Your paypal account is not verified', 'error');
      drupal_goto('account/change/payment');
    }

    if (!$proposal_nid || !_weeve_project_is_allowed_create_project($proposal_nid)) {
      drupal_goto('account/' . $user->uid . '/projects');
      exit;
    }
    $proposal = node_load(array('nid' => $proposal_nid));
    foreach($proposal->taxonomy as $term_id => $term) {
      if ($term->vid == VOCABULARY_PROJECT_CATEGORIES_ID) {
        $form['taxonomy'][VOCABULARY_PROJECT_CATEGORIES_ID]['#default_value'] = array($term_id);        
        $form['taxonomy'][VOCABULARY_PROJECT_CATEGORIES_ID]['#attributes'] = array('disabled' => 'disabled');
      }
    }

    $form['field_project_video_embed'][0]['embed']['#attributes'] = array('placeholder' => t('Enter your video URL here'));
    $form['field_project_video_embed'][0]['embed']['#title'] = t(' OR ');
    unset($form['field_project_end']);
    //$form['field_project_end'][0]['#type'] = 'date_combo';
    //$form['field_project_end'][0]['#default_value'] = array('year' => 2012, 'month' => 3, 'day' => 12);
    //date_combo_process($element, $edit, $form_state, $form)

    $form['field_project_proposal']['#value'][0]['nid'] = $proposal_nid;
    $form['#submit'][] = 'weeve_project_project_add_submit';
    
    //Change fields
    $form['title']['#title'] = t("What's your project title?");
    $form['taxonomy'][VOCABULARY_PROJECT_CATEGORIES_ID]['#title'] = t('Project category');

    $form['field_project_image']['#title'] = t("You need a project image that users can see when viewing your projects along with others. Make sure it's a clear image that generally describes what your project aims to do.");
    $form['field_project_image'][0]['#title'] = t("You need a project image that users can see when viewing your projects along with others. Make sure it's a clear image that generally describes what your project aims to do.");
    $form['field_project_video']['#title'] = t("Although a project video is optional, we strongly recommend that you include one because projects with a video raise more money and succeed at a much higher rate than the ones without a video.");
    $form['field_project_video'][0]['#title'] = t("Although a project video is optional, we strongly recommend that you include one because projects with a video raise more money and succeed at a much higher rate than the ones without a video.");
    $form['field_project_end']['#title'] = t("What is end date of your project to be funded?");
    $form['field_project_end'][0]['#title'] = t("What is end date of your project to be funded?");

    $form['field_project_amount_need']['#title'] = t("What is the exact amount of money you would like to raise?");
    $form['field_project_amount_need'][0]['#title'] = t("What is the exact amount of money you would like to raise?");
    $form['body_field']['body']['#title'] = t("Introduce yourself and your community project. Define the impacts of your project. Describe your goals, milestones, use of funds and the measurable results that you will produce. A picture is worth a thousand words so feel free to add images to tell the story of your community project. ");
    $form['buttons']['submit']['#value'] = t('Submit Project');
    unset($form['body_field']['teaser_js']);
    unset($form['body_field']['teaser_include']);
    unset($form['body_field']['format']);
    unset($form['buttons']['preview']);

    $form['picture_video'] = array(
      '#value' => t('Project Picture and Video'),
      '#prefix' => '<h3>',
      '#suffix' => '</h3>',
      '#weight' => -3
    );
  }

  if ($form_id == 'project_update_node_form' && arg(1) == 'add') {
    if (is_numeric(arg(3))) {
      $form['field_update_project']['#default_value'][0]['nid'] = arg(3);
    }
    $form['buttons']['submit']['#value'] = t('Create project update');
    unset($form['body_field']['teaser_js']);
    unset($form['body_field']['teaser_include']);
    unset($form['body_field']['format']);
    unset($form['buttons']['preview']);
    unset($form['attachments']);
    $form['field_update_project']['#weight'] = 50;    
  }

  if ($form_id == 'project_request_node_form' && arg(1) == 'add') {
    global $user;
    unset($form['buttons']['preview']);
    $profile = node_load(array('type' => 'profile', 'uid' => $user->uid));
    if (in_array($profile->field_payment_paypal_verified[0]['value'], array(0, 2))) {
      drupal_set_message('Your paypal account is not verified', 'error');
      drupal_goto('account/change/payment');
    }
    drupal_set_title(t('Submit your proposal'));

    $form['subtitle']['#value'] = t('Fill out the information and we will review your project and contact you soon');
    $form['subtitle']['#weight'] = -20;
    $form['subtitle']['#prefix'] = '<div class="element-subtitle">';
    $form['subtitle']['#suffix'] = '</div>';
    
    $form['notification']['#value'] = t("We're thrilled that you're interested in using Weeve, and we can't wait to hear about your project. Please take a few minutes to tell us about what you're raising funds to create. Thanks!");
    $form['notification']['#weight'] = -10;
    $form['notification']['#prefix'] = '<div class="element-notification">';
    $form['notification']['#suffix'] = '</div>';
    
    $form['field_proposal_body'][0]['#title'] = '';

    $form['buttons']['submit']['#value'] = t('Submit Proposal');

    //print_r($form); exit;
    $form['field_proposal_body'][0]['#theme'] = 'weeve_add_proposal_form_element';
    $form['taxonomy'][VOCABULARY_PROJECT_CATEGORIES_ID]['#title'] = t('What category does your project fit into?');
    //$form['taxonomy']['#weight'] = -30;
    //print_r($form['taxonomy']); exit;
    
    if (!isset($_SESSION['project_terms_accepted']) || !$_SESSION['project_terms_accepted']) {
      drupal_goto('project/terms');
    }
    global $user;
    $form['#redirect'] = 'account/' . $user->uid . '/projects';
    $form['#submit'][] = 'weeve_project_project_request_add_submit';

    if (!_weeve_project_is_allowed_create_proposal()) {      
      drupal_goto('account/' . $user->uid . '/projects');
      exit;
    }
  }

  if ($form_id == 'project_node_form' && arg(2) == 'edit') {
    $youtube_id = $form['field_project_video'][0]['#default_value']['video_id'];
    //print_r($form['field_project_video_embed']); exit;
    //$form['field_project_video_embed'][0]['embed']['#default_value'] = 'www.youtube.com/watch?v=' . $youtube_id;
  }
}

function weeve_project_project_request_add_submit($form, &$form_state) {
  drupal_set_message(variable_get('project_new_proposal', t('Thank you. Your proposal will go to our team. After approval you will be able to create new project!')));
}

function weeve_project_project_add_submit($form, &$form_state) {
  $proposal_nid = $form['field_project_proposal']['#value'][0]['nid'];
  drupal_set_message(variable_get('project_new_project', t('Thank you. We will check your project in 1-2 business days. If it meets our requirements it will be approved and running!')));
  
  $days = $form_state['values']['field_project_days'][0]['value'];
  $end_time = time() + (int)$days * 60 * 60 * 24; //seconds
 // $form_state['values']['field_project_end'][0]['value'] = date('j M Y', $end_time);
  $form_state['values']['field_project_end'][0] = array(
    'value' => date('Y-m-d\TH:i:s', $end_time),
    'value2' => date('Y-m-d\TH:i:s', $end_time),
    'timezone' => 'UTC',
    'offset' => 0,
    'offset2' => 0
  ); 
  //print_r($form_state['values']); exit;
}

function weeve_project_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  global $user;
  if ($op == 'view' && $user->uid == $node->uid && $node->type == 'project_request') {
    if (_weeve_project_is_allowed_create_project ()) {
      $node->project_link = true;      
    }
  }

  if ($op == 'insert' && $node->type == 'project') {
    $proposal_nid = $node->field_project_proposal[0]['nid'];
    $proposal = node_load(array('nid' => $proposal_nid));
    $proposal->field_proposal_status[0]['value'] = 'created';
    $proposal->field_proposal_project[0]['nid'] = $node->nid;
    node_save($proposal);

    weeve_report_update('projects created', 1);
  }

  if ($op == 'update' && $node->type == 'project') {
    $proposal_nid = $node->field_project_proposal[0]['nid'];
    $proposal = node_load(array('nid' => $proposal_nid));
    if ($node->field_project_status[0]['value'] == 'decline') {
      $proposal->field_proposal_status[0]['value'] = 'approve';      
    } else if ($node->field_project_status[0]['value'] == 'accept') {
      $proposal->field_proposal_status[0]['value'] = 'running';
    }

    node_save($proposal);
  }

  if ($op == 'view' && $node->type == 'project') {
    $node->native_body = $node->body;
    $author = node_load(array('uid' => $node->uid, 'type' => 'profile'));
    $node->author = $author;
    drupal_add_js(array('weeveProject' => array('nid' => $node->nid, 'uid' => $user->uid, 'end_date' => date_format(date_make_date($node->field_project_end[0]['value']), 'L, M j, 11:59p\m'))), 'setting');
  }

  if ($op == 'view' && $node->type == 'project_update') {
    $node->native_body = $node->body;
    $author = node_load(array('uid' => $node->uid, 'type' => 'profile'));
    $node->author = $author;
  }

  if ($op == 'presave' && in_array($node->type, array('project', 'project_request'))) {
    if ($node->type == 'project') {
      switch($node->field_project_status[0]['value']) {
        case 'review':
          $node->field_node_weight[0]['value'] = 1;         
          break;
        case 'accept':
          $node->field_node_weight[0]['value'] = 2;
          break;
        case 'decline':
          $node->field_node_weight[0]['value'] = 3;
          break;
        case 'archive':
          $node->field_node_weight[0]['value'] = 4;          
          break;
        case 'cancel':          
          break;
      }

      if ($node->field_project_status[0]['value'] == 'archive') {
        if ($node->field_project_percent_pledge[0]['value'] < WEEVE_PROJECT_SUCCESS_PERCENT) {
          $node->status = 0;
        }
        $node->promote = 0;
      } else if ($node->field_project_status[0]['value'] == 'accept') {
        $node->status = 1;
      }
    }

    if ($node->type == 'project_request') {
      switch($node->field_proposal_status[0]['value']) {
        case 'new':
          $node->field_node_weight[0]['value'] = 1;
          break;
        case 'review':
          $node->field_node_weight[0]['value'] = 2;
          break;
        case 'running':
          $node->field_node_weight[0]['value'] = 3;
          break;
        case 'approve':
          $node->field_node_weight[0]['value'] = 4;
          break;
        case 'decline':
          $node->field_node_weight[0]['value'] = 5;
          break;
        case 'cancel':
          $node->field_node_weight[0]['value'] = 6;
          break;
      }
    }
  }
}

function weeve_project_theme() {
  return array(
    'weeve_project_terms_form' => array(
      'arguments' => array('form' => null),
      'template' => 'tpl/terms_form'
    ),
    'weeve_project_menu' => array(
      'arguments' => array('nid' => null, 'edit' => false),
      'template' => 'tpl/project_menu'
    ),
    'weeve_project_info_block' => array(
      'arguments' => array('node' => null, 'profile' => null, 'donation' => NULL),
      'template' => 'tpl/project_info_block'
    ),
    'weeve_project_locations_block' => array(
      'arguments' => array('items' => null),
      'template' => 'tpl/project_locations_block'
    ),
    'weeve_project_featured_block' => array(
      'arguments' => array('items' => null),
      'template' => 'tpl/project_featured_block'
    ),
    'weeve_project_search_block' => array(
      'arguments' => array('items' => null),
      'template' => 'tpl/project_search_block'
    ),
    'weeve_add_proposal_form_element' => array(
      'arguments' => array('element' => null),
      'template' => 'tpl/proposal_add_element'
    ),
    'weeve_project_activity_project' => array(
      'arguments' => array('activity' => array()),
      'template' => 'tpl/project_activity'
    )
  );
}

function weeve_project_currentfunds_project($nid) {
  $project = node_load($nid);

  echo json_encode(array('success' => true, 'result' => (float)$project->field_project_amount_need[0]['amount'])); exit;
}

function weeve_project_activity_project($nid) {
  $node = node_load($nid);

  $node->field_project_activity_time[0]['value'] = time();
  node_save($node);
  return theme('weeve_project_activity_project', weeve_project_get_activity_project($nid, 0));
}

function weeve_project_get_activity_project($nid, $from_timestamp = 0) {
  $comment_query = "SELECT * FROM {comments} WHERE nid = %d AND timestamp >= %d";
  $comment_result = db_query($comment_query, $nid, $from_timestamp);

  $comments = array();

  while($comment_row = db_fetch_object($comment_result)) {
    $comment_row->type = 'comment';
    $comments[] = $comment_row;
  }

  $donation_query = "SELECT * FROM {weeve_preapproval_payments} WHERE nid = %d AND archived = 0 AND created >= %d";
  $donation_result = db_query($donation_query, $nid, $from_timestamp);

  $donations = array();

  while($donation_row = db_fetch_object($donation_result)) {
    $donation_row->timestamp = $donation_row->created;
    $donation_row->type = 'donation';
    $donations[] = $donation_row;
  }

  $result = (array)array_merge($comments, $donations);
  if (!function_exists('weeve_sort_by_timestamp')) {
    function weeve_sort_by_timestamp($a, $b) {
      if ($a->timestamp == $b->timestamp) {
        return 0;
      }

      return ($a->timestamp < $b->timestamp) ? 1 : -1;
    }
  }
  usort($result, 'weeve_sort_by_timestamp');

  $users = array();

  foreach($result as $id => $row) {
    if (!isset($users[$row->uid])) {
      $user = user_load($row->uid);
      $profile = node_load(array('type' => 'profile', 'uid' => $row->uid));

      $name = $user->name;

      if (in_array('npo', $user->roles)) {
        if ($profile->field_npo_name[0]['value']) {
          $name = $profile->field_npo_name[0]['value'];
        }
      }/*  else if ($profile->field_user_full_name[0]['value']) {
        $name = $profile->field_user_full_name[0]['value'];
      } */
      $users[$row->uid] = $name;
      $result[$id]->username = $name;
    } else {
      $result[$id]->username = $users[$row->uid];
    }
  }

  return $result;
}

function weeve_project_comment_project($node) {
  global $user;
  $response = array('success' => false);

  if ($_SERVER['REQUEST_METHOD'] != 'POST') {
    echo json_encode($response);
  }

  $edit = array(
    'nid' => $node->nid,
    'uid' => $user->uid,
    'comment' => $_POST['comment']
  );

  comment_save($edit);

  $response['success'] = true;

  echo json_encode($response);
}

function weeve_project_adminfunds_project($nid) {
  global $user;

  $response = array('success' => false);
  if (!in_array('admin', $user->roles) && $user->uid != 1) {
    echo json_encode($response); exit;
  }

  $confirm_value = $_POST['op']; //1 = confirm, 2 = decline
  if (!in_array($confirm_value, array(1, 2))) {
    echo json_encode($response); exit;
  }  

  if ($confirm_value == 1) {
    $node = node_load($nid);
    $query = "SELECT rid, new_value FROM {weeve_fund_change_request} WHERE nid=%d AND status = 0";
    $result = db_query($query, $nid);
    $request_found = db_fetch_object($result);
    if ($request_found) {
      $node->field_project_amount_need[0]['amount'] = $request_found->new_value;
      node_save($node);
    }
  }
  db_query("UPDATE {weeve_fund_change_request} SET status = %d WHERE nid=%d AND status = 0", $confirm_value, $nid);
  $response['success'] = true;
  echo json_encode($response);exit;
}

function weeve_project_funds_project($nid) {
  $response = array(
    'success' => false
  );

  $admin = user_load(1);
  
  if ($_SERVER['REQUEST_METHOD'] != 'POST') {
    echo json_encode($response); exit;
  }

  $funds = $_POST['funds'];
  $reason = $_POST['reason'];

  if (!is_numeric($funds) || $funds <= 0) {
    $response['message'] = t("Invalid funds value");
    echo json_encode($response); exit;
  }

  global $user;
  $node = node_load($nid);

  $query = "SELECT rid FROM {weeve_fund_change_request} WHERE nid=%d AND status = 0";
  $result = db_query($query, $nid);
  $request_found = db_fetch_object($result);
  if (!$request_found) {
    db_query("INSERT INTO {weeve_fund_change_request} (`nid`, `uid`, `status`, `old_value`, `new_value`, `comment`)
          VALUES (%d, %d, 0, %f, %f, '%s')", $nid, $user->uid, $node->field_project_amount_need[0]['amount'], $funds, $reason);
  } else {
    $rows = db_query("UPDATE {weeve_fund_change_request} SET `status` = 0, `new_value`=%f, `comment`='%s' WHERE rid=%d", $funds, $reason, $request_found->rid);
  }

  drupal_mail('weeve_project', 'funds', $admin->mail, user_preferred_language($admin), array('account' => $admin, 'nid' => $nid, 'funds' => $funds, 'reason' => $reason));

  $response['success'] = true;
  echo json_encode($response); exit;
}

function weeve_project_mail($key, &$message, $params) {
  $language = $message['language'];
  $variables = user_mail_tokens($params['account'], $language);

  switch ($key) {
    case 'funds':
      $nid = $params['nid'];
      $project = node_load($nid);
      $funds = $params['funds'];
      $reason = nl2br($params['reason']);

      $project_link = url('project/' . $nid . '/edit', array('absolute' => true));
      $title = $project->title;

      $message['subject'] = t('Funds request change from !site', $variables, $language->language);
      $message['body'][] = t("Dear !username\n\n<br />There is fund request change.\n\n<br />New value is: \$$funds.\n\n<br />Reason: $reason\n\n<br />Please go to <a href=\"$project_link\">$title</a> to change to new value.", $variables, $language->language);
      $message['headers']['Content-Type'] = 'text/html; charset=UTF-8;';
      break;
    case 'payout':
      $nid = $params['nid'];
      $project = node_load($nid);
      $project_link = url('node/' . $nid . '/edit', array('absolute' => true));
      $title = $project->title;

      $message['subject'] = t('Payout request from !site', $variables, $language->language);
      $message['body'][] = t("Dear !username\n\n<br />There is payout request.\n\n<br />Please go to <a href=\"$project_link\">$title</a> to view the project.", $variables, $language->language);
      $message['headers']['Content-Type'] = 'text/html; charset=UTF-8;';
  }
}

function weeve_project_payout_project($nid) {
  $response = array(
    'success' => false
  );

  $admin = user_load(1);

  if ($_SERVER['REQUEST_METHOD'] != 'POST') {
    echo json_encode($response); exit;
  }

  $method = $_POST['method'];

  if (module_exists('weeve_donation')) {
    $node = node_load($nid);
    weeve_donation_save_payout_request($node->uid, $node->nid, 0);
  }

  drupal_mail('weeve_project', 'payout', $admin->mail, user_preferred_language($admin), array('account' => $admin, 'nid' => $nid, 'method' => $method));

  $response['success'] = true;
  echo json_encode($response); exit;
}

function weeve_project_edit_project_form($form_state, $nid) {
  $form = array();
  $node = node_load($nid);

  drupal_add_js(drupal_get_path('module', 'weeve_project') . '/js/project.cancel.js');
  jquery_ui_add('ui.dialog');

  global $user;

  if (in_array('admin', $user->roles) || $user->uid == 1) {
    $query = "SELECT rid, new_value, comment FROM {weeve_fund_change_request} WHERE nid=%d AND status = 0";
    $result = db_query($query, $nid);
    $request_found = db_fetch_object($result);

    if ($request_found) {
      $form['fund_change'] = array(
        '#type' => 'fieldset',
        '#title' => t('Confirm fund change request'),
        '#attributes' => array('class' => 'admin-fund-change')
      );

      $form['fund_change']['fund_comment'] = array(
        '#value' => $request_found->comment,
        '#prefix' => '<div>Comment: ',
        '#suffix' => '</div>',
      );

      $form['fund_change']['old_value'] = array(
        '#title' => t('Old value'),
        '#value' => format_number($node->field_project_amount_need[0]['amount'], 2),
        '#prefix' => '<div>Old value: $',
        '#suffix' => '</div>',
      );

      $form['fund_change']['new_value'] = array(
        '#title' => t('New value'),
        '#value' => format_number($request_found->new_value, 2),
        '#prefix' => '<div>New value: $',
        '#suffix' => '</div>',
      );

      $form['fund_change']['fund_confirm'] = array(
        '#value' => '<a href="#" id="fund_confirm" class="weeve-medium-button">'.t('Confirm').'</a>'
      );

      $form['fund_change']['fund_decline'] = array(
        '#value' => '<a href="#" id="fund_decline" class="weeve-medium-button">'.t('Decline').'</a>'
      );
    }
  }

  $form['cancel'] = array(
    '#type' => 'markup',
    '#value' => '<button class="weeve-medium-button cancel">'.t('Cancel project').'</button>'
  );

  $form['fund'] = array(
    '#type' => 'markup',
    '#value' => '<button class="weeve-medium-button funds">'.t('Request fund change').'</button>'
  );

  $form['title'] = array(
    '#title' => t('Title'),
    '#type' => 'textfield',
    '#default_value' => $node->title,
    '#required' => true
  );

  $form['body'] = array(
    '#title' => t('Description'),
    '#type' => 'textarea',
    '#default_value' => $node->body,
    '#rows' => 15,
    '#required' => true
  );

  $form['nid'] = array(
    '#type' => 'hidden',
    '#value' => $nid
  );


  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Update')
  );
  
  $form['#redirect'] = 'node/' . $nid;

  return $form;
}

function weeve_project_cancel_project($nid) {
  $response = array('success' => false);
  if ($_SERVER['REQUEST_METHOD'] != 'POST') {
    echo json_encode($response); exit;
  }  

  if (!weeve_project_edit_own_project_valid($nid)) {
    echo json_encode($response); exit;
  }

  $form = array();
  $node = node_load($nid);
  $node->field_project_cancel_notes[0]['value'] = $_POST['reason'];
  $node->field_project_status[0]['value'] = 'cancel';
  $node->status = 0;
  $node->promote = 0;

  node_save($node);

  $response['success'] = true;
  echo json_encode($response); exit;
}

function weeve_project_edit_project_form_validate($form, &$form_state) {
  $nid = $form_state['values']['nid'];

  if (!weeve_project_edit_own_project_valid($nid)) {
    form_set_error(null, t('Invalid project id provided'));
  }
}

function weeve_project_cancel_project_form_validate($form, &$form_state) {
  $nid = $form_state['values']['nid'];

  if (!weeve_project_edit_own_project_valid($nid)) {
    form_set_error(null, t('Invalid project id provided'));
  }
}

function weeve_project_edit_project_form_submit($form, &$form_state) {
  $values = $form_state['values'];

  $nid = $form_state['values']['nid'];
  $node = node_load($nid);
  $node->title = $values['title'];
  $node->body = $values['body'];
  $node->teaser = node_teaser($values['body']);

  drupal_set_message(variable_get('project_edit_project', t('Your project has been successfuly updated')));
  node_save($node);
}

function weeve_project_cancel_project_form_submit($form, &$form_state) {
  $values = $form_state['values'];

  $nid = $form_state['values']['nid'];
  $node = node_load($nid);
  $node->field_project_status[0]['value'] = 'cancel';
  $node->status = 0;
  $node->promote = 0;

  node_save($node);
}

function weeve_project_menu_html($nid, $edit = null) {
  if ($edit == null) {
    global $user;
    $edit = weeve_project_edit_own_project_valid($nid);
  }

  return theme('weeve_project_menu', $nid, $edit);
}

function theme_weeve_project_terms_form($form) {
  return theme('weeve_project_terms_form', $form);
}

/**
 * Implementation of hook_block().
 */
function weeve_project_block($op = 'list', $delta = 0) {
  if ($op == 'list') {
    $blocks[0]['info'] = t('Project information');
    // Not worth caching.
    $blocks[0]['cache'] = BLOCK_NO_CACHE;

    $blocks[1]['info'] = t('Project location block');
    $blocks[1]['cache'] = BLOCK_NO_CACHE;

    $blocks[2]['info'] = t('Project featured block');
    $blocks[2]['cache'] = BLOCK_NO_CACHE;

    $blocks[3]['info'] = t('Project search');
    $blocks[3]['cache'] = BLOCK_NO_CACHE;
    return $blocks;
  }
  else if ($op == 'view') {
    if ($delta == 0) {
      global $user;
      $block['subject'] = '';
      $query = explode('/', $_SERVER['QUERY_STRING']);
      $node = node_load(array('nid' => $query[1]));

      $date_time = date_parse_from_format('Y-m-d\TH:i:s', $node->field_project_end[0]['value']);
      $timestamp = mktime((int)$date_time['hour'], (int)$date_time['minute'], (int)$date_time['second'], (int)$date_time['month'], (int)$date_time['day'], (int)$date_time['year']);

      $node->days_left = abs(round(($timestamp - time()) / 86400));
      $node->timestamp = $timestamp;
      $user_profile = node_load(array('uid' => $node->uid, 'type' => 'profile'));
      $donate = weeve_donation_projects_is_donated($node->nid, $user->uid);
      $block['content'] = theme('weeve_project_info_block', $node, $user_profile, $donate);

      return $block;
    } else if ($delta == 1) {
      $block['content'] = '';
      $menu = menu_tree_all_data('menu-projects-locations');

      $location_block = array();
      foreach($menu as $item) {
        $location = str_replace('projects/location/', '', $item['link']['link_path']);

        $query = "SELECT node.nid
         FROM node node
         LEFT JOIN content_type_project node_data_field_project_location ON node.vid = node_data_field_project_location.vid
         WHERE (node_data_field_project_location.field_project_status_value = 'accept') AND (node.status = 1)
         AND UPPER(node_data_field_project_location.field_project_location_value) = UPPER('%s')";

        $result = db_fetch_object(db_query($query, $location));

        if ($result) {
          $location_block['projects/location/' . $location] = t($item['link']['link_title']);
        }
      }
      $block['content'] = theme('weeve_project_locations_block', $location_block);
      return $block;
    } else if ($delta == 2) {
      $block['content'] = '';
      $menu = menu_tree_all_data('menu-featured-projects');

      $featured_block = array();
      foreach($menu as $item) {
        $location = $item['link']['link_path'];
        if ($location == 'projects/picked') {
          $query = "SELECT node.nid AS nid
           FROM node node
           INNER JOIN content_type_project node_data_field_project_status ON node.vid = node_data_field_project_status.vid
           WHERE (node.status = 1) AND (node_data_field_project_status.field_project_status_value = 'accept')
           AND (node_data_field_project_status.field_project_staff_pick_value = '1')";

          $result = db_fetch_object(db_query($query));

          if ($result) {
            $featured_block[$location] = t($item['link']['link_title']);
          }
        } else if ($location == 'projects/small') {
          $small_amount = variable_get('small_amount_money', 1000);
          $query = "SELECT node.nid AS nid
           FROM node node
           INNER JOIN content_type_project node_data_field_project_status ON node.vid = node_data_field_project_status.vid
           LEFT JOIN content_type_project node_data_field_project_amount_need ON node.vid = node_data_field_project_amount_need.vid
           WHERE (node.status = 1) AND (node_data_field_project_status.field_project_status_value = 'accept')
           AND (node_data_field_project_amount_need.field_project_amount_need_amount <= %d)";

          $result = db_fetch_object(db_query($query, $small_amount));

          if ($result) {
            $featured_block[$location] = t($item['link']['link_title']);
          }
        } else {
          $featured_block[$location] = t($item['link']['link_title']);
        }
      }
      $block['content'] = theme('weeve_project_featured_block', $featured_block);
      return $block;
    } else if ($delta == 3) {
      $block['content'] = drupal_get_form('weeve_project_search_form');
      return $block;
    }
  }
}

function weeve_project_search_form($form_state) {
  $form = array();

  $form['keys'] = array(
    '#type' => 'textfield',
    '#title' => '',
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search')
  );

  if (!empty ($form_state['post'])) {
    $form['#redirect'] = 'search/apachesolr_search/' . $form_state['post']['keys'];
  }  

  return $form;
}

function weeve_project_preprocess_page(&$vars) {
  if ($vars['node']->type == 'project') {
    $vars['node_menu'] = weeve_project_menu_html($vars['node']->nid);
  }

  if (in_array('page-project-updates', $vars['template_files']) || 
      in_array('page-project-comments', $vars['template_files']) ||
      in_array('page-project-activity', $vars['template_files']) ||
      in_array('page-project-edit', $vars['template_files'])) {
    $query = explode('/', $_SERVER['QUERY_STRING']);
    $vars['node_menu'] = weeve_project_menu_html($query[1]);
    $node = node_load(array('nid' => $query[1]));
    $author = node_load(array('uid' => $node->uid, 'type' => 'profile'));
    $node->author = $author;
    $vars['node'] = $node;
    $vars['title'] = $vars['node']->title;
    $vars['template_files'][] = 'page-node-project';

    if (in_array('page-project-edit', $vars['template_files'])) {
      $vars['body_classes'] = array('project-edit');
    }
  }
  //print_r($vars['template_files']); exit;

  if ($vars['node']->type == 'project_update') {
    $vars['node_menu'] = weeve_project_menu_html($vars['node']->field_update_project[0]['nid']);
    $vars['title'] = $vars['node']->field_update_project[0]['safe']['title'];
  }
}

function weeve_project_terms_form() {
  if (_weeve_project_is_allowed_create_project()) {
    global $user;
    drupal_set_message(t('You already have an active proposal. Please check all activities below.'));
    drupal_goto('account/' . $user->uid . '/projects');
  }

  global $user;

  $profile = node_load(array('type' => 'profile', 'uid' => $user->uid));
  
  if (in_array($profile->field_payment_paypal_verified[0]['value'], array(0, 2))) {
    drupal_set_message('Your paypal account is not verified', 'error');
    drupal_goto('account/change/payment');
  }

  $form = array();
  $form['accept'] = array(
    '#type' => 'checkbox',
    '#title' => t("I have read and understand Weeve's guidelines and conditions"),
    '#required' => true
  );

  $form['submit'] = array('#type' => 'submit', '#value' => t('Continue'));

  return $form;
}

function weeve_project_terms_form_validate($form, &$form_state) {
  if ($form_state['values']['accept'] == 0) {
    form_set_error('accept', t("Please accept our terms before proceeding"));
  }
}

function weeve_project_terms_form_submit($form, &$form_state) {
  $_SESSION['project_terms_accepted'] = true;
  drupal_goto('node/add/project-request');
}

/**
* Custom after_build callback handler.
*/
function _weeve_project_after_build($form, &$form_state) {
  // Use this one if the field is placed inside a fieldgroup.
  _weeve_project_fix_disabled($form['field_project_amount_need']);
  _weeve_project_fix_disabled($form['group_project_date']['field_project_end']);
  _weeve_project_fix_disabled($form['group_project_date']['field_project_start']);
  _weeve_project_fix_disabled($form['field_project_video']);
  _weeve_project_fix_disabled($form['field_project_image']);
  _weeve_project_fix_disabled($form['taxonomy'][VOCABULARY_PROJECT_CATEGORIES_ID]);

  //When using a group
  //_weeve_project_fix_disabled($form['some_group']['field_some_field']);

  return $form;
}

function _weeve_project_fix_readonly(&$elements) {
   foreach (element_children($elements) as $key) {
    if (isset($elements[$key]) && $elements[$key]) {

      // Recurse through all children elements.
      _weeve_project_fix_readonly($elements[$key]);
    }
  }

  if (!isset($elements['#attributes'])) {
    $elements['#attributes'] = array();
  }
  $elements['#attributes']['disabled'] = 'disabled';
}

/**
* Recursively set the disabled attribute of a CCK field
* and all its dependent FAPI elements.
*/
function _weeve_project_fix_disabled(&$elements) {
  foreach (element_children($elements) as $key) {
    if (isset($elements[$key]) && $elements[$key]) {

      // Recurse through all children elements.
      _weeve_project_fix_disabled($elements[$key]);
    }
  }

  if (!isset($elements['#attributes'])) {
    $elements['#attributes'] = array();
  }
  $elements['#attributes']['disabled'] = 'disabled';
}

function _weeve_project_is_allowed_create_proposal() {
  global $user;  

  if (_weeve_is_admin()) {
    return true;
  }

  $query = "SELECT node.nid AS nid
   FROM node node
   INNER JOIN content_type_project_request node_data_field_proposal_status ON node.vid = node_data_field_proposal_status.vid
   LEFT JOIN content_type_project_request node_data_field_proposal_project ON node.vid = node_data_field_proposal_project.vid
   WHERE (node.type in ('project_request')) AND (node_data_field_proposal_status.field_proposal_status_value IN ('new', 'review', 'approve'))
   AND (node_data_field_proposal_project.field_proposal_project_nid IS NULL)
   AND node.uid = %d";

  $result = db_query($query, array($user->uid));
  $node = db_fetch_object($result);
  
  if ($node) {
    //Query checks if there is active proposal without project attached to it
    return false;
  }
  
  return true;
}

function _weeve_project_is_allowed_create_project($nid = null) {
  global $user;

  $profile = node_load(array('type' => 'profile', 'uid' => $user->uid));

  if (_weeve_is_admin()) {
    return true;
  }


  $query = "
   SELECT node.nid AS nid
   FROM node node
   INNER JOIN content_type_project_request node_data_field_proposal_status ON node.vid = node_data_field_proposal_status.vid
   LEFT JOIN content_type_project_request node_data_field_proposal_project ON node.vid = node_data_field_proposal_project.vid
   WHERE (node.type in ('project_request')) AND (node_data_field_proposal_status.field_proposal_status_value = 'approve')
   AND (node_data_field_proposal_project.field_proposal_project_nid IS NULL)
   AND node.uid = %d";

  $result = db_query($query, array($user->uid));
  $node = db_fetch_object($result);

  if ($node) {
    //Query checks if there is accepted proposal without project attached to it

    if ($nid && $node->nid == $nid) {
      return true;
    }

    if ($nid == null) {
      return true;
    }
  }

  return false;
}

function _weeve_project_is_user_npo() {
  global $user;
  return in_array('npo', $user->roles);
}

function _weeve_is_admin() {
  global $user;
  return in_array('admin', $user->roles);
}

function weeve_project_cron() {
  $query = "SELECT node_data_field_project_end.field_project_end_value AS node_data_field_project_end_field_project_end_value,
node.type AS node_type,
node.nid AS nid,
node.vid AS node_vid
 FROM node node
 INNER JOIN content_type_project node_data_field_project_status ON node.vid = node_data_field_project_status.vid
 LEFT JOIN content_type_project node_data_field_project_end ON node.vid = node_data_field_project_end.vid
 WHERE (node.status = 1) AND (node_data_field_project_status.field_project_status_value = 'accept')";

  $result = db_query($query);

  while($row = db_fetch_object($result)) {
    $date = date_parse_from_format('Y-m-d\TH:i:s', $row->node_data_field_project_end_field_project_end_value);
    
    $timestamp = mktime((int)$date['hour'], (int)$date['minute'], (int)$date['second'], (int)$date['month'], (int)$date['day'], (int)$date['year']);

    $current_timestamp = time();

    if ($current_timestamp >= $timestamp) {
      $node = node_load($row->nid);
      module_invoke_all('weeve_project', $node, 'end');
    }
  }
}

function weeve_project_weeve_project($node, $op) {
  if ($op == 'end') {    
    $node->status = 0;
    $node->promote = 0;
    if ($node->field_project_status[0]['value'] != 'cancel') {
      $node->field_project_status[0]['value'] = 'archive';
      if ($node->project_percent_pledge[0]['value'] >= WEEVE_PROJECT_SUCCESS_PERCENT) {
        weeve_report_update('projects success', 1);
      }
    }


    node_save($node);   
  }
}

/*
 * Implementation hook_donation
 */
function weeve_project_weeve_donation($node, $op, $donation_info = null) {
  if ($op == 'create_preapproval' || $op == 'edit_preapproval' || $op == 'remove_preapproval') {
    $node->field_project_amount_pledge[0]['amount'] = $donation_info['total_amount'];
    $node->field_project_donors[0]['value'] = $donation_info['donors'];
    node_save($node);
  }
}

if (!function_exists('date_parse_from_format')) {
  function date_parse_from_format($format, $date) {
    $i = 0;
    $pos = 0;
    $output = array();
    while ($i < strlen($format)) {
      $pat = substr($format, $i, 1);
      $i++;
      switch ($pat) {
        case 'd': //    Day of the month, 2 digits with leading zeros    01 to 31
          $output['day'] = substr($date, $pos, 2);
          $pos+=2;
          break;
        case 'D': // A textual representation of a day: three letters    Mon through Sun
          //TODO
          break;
        case 'j': //    Day of the month without leading zeros    1 to 31
          $output['day'] = substr($date, $pos, 2);
          if (!is_numeric($output['day']) || ($output['day'] > 31)) {
            $output['day'] = substr($date, $pos, 1);
            $pos--;
          }
          $pos+=2;
          break;
        case 'm': //    Numeric representation of a month: with leading zeros    01 through 12
          $output['month'] = (int) substr($date, $pos, 2);
          $pos+=2;
          break;
        case 'n': //    Numeric representation of a month: without leading zeros    1 through 12
          $output['month'] = substr($date, $pos, 2);
          if (!is_numeric($output['month']) || ($output['month'] > 12)) {
            $output['month'] = substr($date, $pos, 1);
            $pos--;
          }
          $pos+=2;
          break;
        case 'Y': //    A full numeric representation of a year: 4 digits    Examples: 1999 or 2003
          $output['year'] = (int) substr($date, $pos, 4);
          $pos+=4;
          break;
        case 'y': //    A two digit representation of a year    Examples: 99 or 03
          $output['year'] = (int) substr($date, $pos, 2);
          $pos+=2;
          break;
        case 'g': //    12-hour format of an hour without leading zeros    1 through 12
          $output['hour'] = substr($date, $pos, 2);
          if (!is_numeric($output['day']) || ($output['hour'] > 12)) {
            $output['hour'] = substr($date, $pos, 1);
            $pos--;
          }
          $pos+=2;
          break;
        case 'G': //    24-hour format of an hour without leading zeros    0 through 23
          $output['hour'] = substr($date, $pos, 2);
          if (!is_numeric($output['day']) || ($output['hour'] > 23)) {
            $output['hour'] = substr($date, $pos, 1);
            $pos--;
          }
          $pos+=2;
          break;
        case 'h': //    12-hour format of an hour with leading zeros    01 through 12
          $output['hour'] = (int) substr($date, $pos, 2);
          $pos+=2;
          break;
        case 'H': //    24-hour format of an hour with leading zeros    00 through 23
          $output['hour'] = (int) substr($date, $pos, 2);
          $pos+=2;
          break;
        case 'i': //    Minutes with leading zeros    00 to 59
          $output['minute'] = (int) substr($date, $pos, 2);
          $pos+=2;
          break;
        case 's': //    Seconds: with leading zeros    00 through 59
          $output['second'] = (int) substr($date, $pos, 2);
          $pos+=2;
          break;
        case 'l': // (lowercase 'L')    A full textual representation of the day of the week    Sunday through Saturday
        case 'N': //    ISO-8601 numeric representation of the day of the week (added in PHP 5.1.0)    1 (for Monday) through 7 (for Sunday)
        case 'S': //    English ordinal suffix for the day of the month: 2 characters    st: nd: rd or th. Works well with j
        case 'w': //    Numeric representation of the day of the week    0 (for Sunday) through 6 (for Saturday)
        case 'z': //    The day of the year (starting from 0)    0 through 365
        case 'W': //    ISO-8601 week number of year: weeks starting on Monday (added in PHP 4.1.0)    Example: 42 (the 42nd week in the year)
        case 'F': //    A full textual representation of a month: such as January or March    January through December
        case 'u': //    Microseconds (added in PHP 5.2.2)    Example: 654321
        case 't': //    Number of days in the given month    28 through 31
        case 'L': //    Whether it's a leap year    1 if it is a leap year: 0 otherwise.
        case 'o': //    ISO-8601 year number. This has the same value as Y: except that if the ISO week number (W) belongs to the previous or next year: that year is used instead. (added in PHP 5.1.0)    Examples: 1999 or 2003
        case 'e': //    Timezone identifier (added in PHP 5.1.0)    Examples: UTC: GMT: Atlantic/Azores
        case 'I': // (capital i)    Whether or not the date is in daylight saving time    1 if Daylight Saving Time: 0 otherwise.
        case 'O': //    Difference to Greenwich time (GMT) in hours    Example: +0200
        case 'P': //    Difference to Greenwich time (GMT) with colon between hours and minutes (added in PHP 5.1.3)    Example: +02:00
        case 'T': //    Timezone abbreviation    Examples: EST: MDT ...
        case 'Z': //    Timezone offset in seconds. The offset for timezones west of UTC is always negative: and for those east of UTC is always positive.    -43200 through 50400
        case 'a': //    Lowercase Ante meridiem and Post meridiem    am or pm
        case 'A': //    Uppercase Ante meridiem and Post meridiem    AM or PM
        case 'B': //    Swatch Internet time    000 through 999
        case 'M': //    A short textual representation of a month: three letters    Jan through Dec
        default:
          $pos++;
      }
    }
    return $output;
  }
}
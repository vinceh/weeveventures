<?php
define('VOCABULARY_PROJECT_CATEGORIES_ID', 1);

function _weeve_project_autoload($className) {
  $path = explode('_', $className);
  $file .= implode("/", $path) . '.php';
	include $file;
}

function weeve_project_init() {
  set_include_path(
    $_SERVER['DOCUMENT_ROOT'] . "/sites/all/libraries"
		. PATH_SEPARATOR . get_include_path()
  );

  include_once 'Zend/Loader/Autoloader.php';
  Zend_Loader_Autoloader::getInstance()->setDefaultAutoloader('_weeve_project_autoload');

  if (arg(2) == 'projects') {
    //NPO project page (views)
    drupal_add_js(drupal_get_path('module', 'weeve_project') . '/js/projects.js');
  }
}

function weeve_project_menu() {
  $items = array();

  $items['project/terms'] = array(
    'title' => 'Accept terms',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('weeve_project_terms_form'),
    'access callback' => 'weeve_project_proposal_valid',
    'type' => MENU_CALLBACK,
  );

  $items['project/%/edit'] = array(
    'title' => 'Edit project',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('weeve_project_edit_project_form', 1),
    'access callback' => 'weeve_project_edit_own_project_valid',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK
  );
  
  return $items;
}

function weeve_project_menu_alter($items) {
  $items['node/add/project-request']['access callback'] = 'weeve_project_proposal_valid';

  $items['node/add/project']['access callback'] = 'weeve_project_project_valid';

  $items['node/%node']['page callback'] = 'weeve_node_page_view';
}

function weeve_node_page_view($node, $cid = NULL) {
  drupal_set_title(check_plain($node->title));
  return weeve_node_show($node, $cid);
}

function weeve_node_show($node, $cid, $message = FALSE) {
  if ($message) {
    drupal_set_title(t('Revision of %title from %date', array('%title' => $node->title, '%date' => format_date($node->revision_timestamp))));
  }
  $output = node_view($node, FALSE, TRUE);

  // Update the history table, stating that this user viewed this node.
  node_tag_new($node->nid);

  return $output;
}

function weeve_project_edit_own_project_valid($nid) {
  global $user;

  if ($user->uid == 1 || in_array('admin', $user->roles)) {
    return true;
  }

  $node = node_load(array('nid' => $nid));

  if (!$node) {
    return false;
  }

  if ($node->uid == $user->uid) {
    return true; //is author
  }

  return false;
}

function weeve_project_project_valid() {  
  if (_weeve_project_is_allowed_create_project()) {
    return user_access('create project content');
  }

  return false;
}

function weeve_project_proposal_valid() {
  if (_weeve_project_is_allowed_create_proposal()) {
    //No "active" proposals for now
    if (!user_access('create project_request content')) {
      return false;
    }        
  } else {
    //Have "active" proposals. User should use active proposal, but return true
    //to redirect later for selection of proposals
    return weeve_project_project_valid();
  }

  return true;
}

function weeve_project_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'project_node_form' && arg(1) == 'add') {
    global $user;
    $proposal_nid = arg(3);

    if (!$proposal_nid || !_weeve_project_is_allowed_create_project($proposal_nid)) {
      drupal_goto('account/' . $user->uid . '/projects');
      exit;
    }
    $proposal = node_load(array('nid' => $proposal_nid));
    foreach($proposal->taxonomy as $term_id => $term) {
      if ($term->vid == VOCABULARY_PROJECT_CATEGORIES_ID) {
        $form['taxonomy'][VOCABULARY_PROJECT_CATEGORIES_ID]['#default_value'] = array($term_id);        
        $form['taxonomy'][VOCABULARY_PROJECT_CATEGORIES_ID]['#attributes'] = array('disabled' => 'disabled');
      }
    }
    
    $form['field_project_proposal']['#value'][0]['nid'] = $proposal_nid;
    $form['#submit'][] = 'weeve_project_project_add_submit';
    
    //Change fields
    $form['title']['#title'] = t("What's your project title?");
    $form['taxonomy'][VOCABULARY_PROJECT_CATEGORIES_ID]['#title'] = t('Project category');

    $form['field_project_image']['#title'] = t("You need a project image that users can see when viewing your projects along with others. Make sure it's a clear image that generally describes what your project aims to do.");
    $form['field_project_image'][0]['#title'] = t("You need a project image that users can see when viewing your projects along with others. Make sure it's a clear image that generally describes what your project aims to do.");
    $form['field_project_video']['#title'] = t("Although video is optional, we strongly recommend creating a video that talks to users. 90% of projects with videos reach their goal whereas only 50% of projects without videos do.");
    $form['field_project_video'][0]['#title'] = t("Although video is optional, we strongly recommend creating a video that talks to users. 90% of projects with videos reach their goal whereas only 50% of projects without videos do.");
    $form['field_project_end']['#title'] = t("What is end date of your project to be funded?");
    $form['field_project_end'][0]['#title'] = t("What is end date of your project to be funded?");

    $form['field_project_amount_need']['#title'] = t("What is the exact amount of money you would like to raise?");
    $form['field_project_amount_need'][0]['#title'] = t("What is the exact amount of money you would like to raise?");
    $form['body_field']['body']['#title'] = t("State your project details; give a background to what the project is about, how it's relevant to society and how it helps forward the community. Tell people your goals, milestones, and tangible items (if they are tangible) that you will produce. Add images to help tell a story and convince donors to fund your project");
    $form['buttons']['submit']['#value'] = t('Submit Project');
    unset($form['body_field']['teaser_js']);
    unset($form['body_field']['teaser_include']);
    unset($form['body_field']['format']);
    unset($form['buttons']['preview']);
  }

  if ($form_id == 'project_update_node_form' && arg(1) == 'add') {
    if (is_numeric(arg(3))) {
      $form['field_update_project']['#default_value'][0]['nid'] = arg(3);
    }
    $form['buttons']['submit']['#value'] = t('Create project update');
    unset($form['body_field']['teaser_js']);
    unset($form['body_field']['teaser_include']);
    unset($form['body_field']['format']);
    unset($form['buttons']['preview']);
  }

  if ($form_id == 'project_request_node_form' && arg(1) == 'add') {
    if (!isset($_SESSION['project_terms_accepted']) || !$_SESSION['project_terms_accepted']) {
      drupal_goto('project/terms');
    }

    if (!_weeve_project_is_allowed_create_proposal()) {
      global $user;
      drupal_goto('account/' . $user->uid . '/projects');
      exit;
    }
  }

  if ($form_id == 'project_node_form' && arg(2) == 'edit') {
    $youtube_id = $form['field_project_video'][0]['#default_value']['video_id'];
    //print_r($form['field_project_video_embed']); exit;
    //$form['field_project_video_embed'][0]['embed']['#default_value'] = 'www.youtube.com/watch?v=' . $youtube_id;
  }
}

function weeve_project_project_add_submit($form, &$form_state) {
  $proposal_nid = $form['field_project_proposal']['#value'][0]['nid'];
}

function weeve_project_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  global $user;
  if ($op == 'view' && $user->uid == $node->uid && $node->type == 'project_request') {
    if (_weeve_project_is_allowed_create_project ()) {
      $node->project_link = true;      
    }
  }

  if ($op == 'insert' && $node->type == 'project') {
    $proposal_nid = $node->field_project_proposal[0]['nid'];
    $proposal = node_load(array('nid' => $proposal_nid));

    $proposal->field_proposal_project[0]['nid'] = $node->nid;
    node_save($proposal);
  }

  if ($op == 'update' && $node->type == 'project') {    
    if ($node->field_project_status[0]['value'] == 'decline') {
      $proposal_nid = $node->field_project_proposal[0]['nid'];
      $proposal = node_load(array('nid' => $proposal_nid));
      
      $proposal->field_proposal_status[0]['value'] = 'approve';
      node_save($proposal);
    }
  }

  if ($op == 'view' && $node->type == 'project') {
    $node->native_body = $node->body;
    $author = node_load(array('uid' => $node->uid, 'type' => 'profile'));
    $node->author = $author;
    drupal_add_js(array('weeveProject' => array('nid' => $node->nid, 'uid' => $user->uid)), 'setting');
  }

  if ($op == 'view' && $node->type == 'project_update') {
    $node->native_body = $node->body;
    $author = node_load(array('uid' => $node->uid, 'type' => 'profile'));
    $node->author = $author;
  }

  if ($op == 'presave' && in_array($node->type, array('project', 'project_request'))) {
    if ($node->type == 'project') {
      switch($node->field_project_status[0]['value']) {
        case 'review':
          $node->field_node_weight[0]['value'] = 1;         
          break;
        case 'accept':
          $node->field_node_weight[0]['value'] = 2;
          break;
        case 'decline':
          $node->field_node_weight[0]['value'] = 3;
          break;
        case 'archive':
          $node->field_node_weight[0]['value'] = 4;
          break;
      }

      if ($node->field_project_status[0]['value'] == 'archive') {
        $node->status = 0;
        $node->promote = 0;
      }
    }

    if ($node->type == 'project_request') {
      switch($node->field_proposal_status[0]['value']) {
        case 'new':
          $node->field_node_weight[0]['value'] = 1;
          break;
        case 'review':
          $node->field_node_weight[0]['value'] = 2;
          break;
        case 'running':
          $node->field_node_weight[0]['value'] = 3;
          break;
        case 'approve':
          $node->field_node_weight[0]['value'] = 4;
          break;
        case 'decline':
          $node->field_node_weight[0]['value'] = 5;
          break;
        case 'cancel':
          $node->field_node_weight[0]['value'] = 6;
          break;
      }
    }
  }

  
}

function weeve_project_theme() {
  return array(
    'weeve_project_terms_form' => array(
      'arguments' => array('form' => null),
      'template' => 'tpl/terms_form'
    ),
    'weeve_project_menu' => array(
      'arguments' => array('nid' => null, 'edit' => false),
      'template' => 'tpl/project_menu'
    ),
    'weeve_project_info_block' => array(
      'arguments' => array('node' => null, 'profile' => null),
      'template' => 'tpl/project_info_block'
    )
  );
}


function weeve_project_edit_project_form($form, $nid) {
  $form = array();
  $node = node_load($nid);

  $form['title'] = array(
    '#title' => t('Title'),
    '#type' => 'textfield',
    '#default_value' => $node->title,
    '#required' => true
  );

  $form['body'] = array(
    '#title' => t('Description'),
    '#type' => 'textarea',
    '#default_value' => $node->body,
    '#rows' => 15,
    '#required' => true
  );

  $form['nid'] = array(
    '#type' => 'hidden',
    '#value' => $nid
  );


  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Update')
  );

  $form['#redirect'] = 'node/' . $nid;

  return $form;
}

function weeve_project_edit_project_form_validate($form, &$form_state) {
  $nid = $form_state['values']['nid'];

  if (!weeve_project_edit_own_project_valid($nid)) {
    form_set_error(null, t('Invalid project id provided'));
  }
}

function weeve_project_edit_project_form_submit($form, &$form_state) {
  $values = $form_state['values'];
  $nid = $form_state['values']['nid'];
  $node = node_load($nid);
  $node->title = $values['title'];
  $node->body = $values['body'];
  $node->teaser = node_teaser($values['body']);

  node_save($node);
}

function weeve_project_menu_html($nid, $edit = null) {
  if ($edit == null) {
    global $user;
    $edit = weeve_project_edit_own_project_valid($nid);
  }

  return theme('weeve_project_menu', $nid, $edit);
}

function theme_weeve_project_terms_form($form) {
  return theme('weeve_project_terms_form', $form);
}

/**
 * Implementation of hook_block().
 */
function weeve_project_block($op = 'list', $delta = 0) {
  if ($op == 'list') {
    $blocks[0]['info'] = t('Project information');
    // Not worth caching.
    $blocks[0]['cache'] = BLOCK_NO_CACHE;
    return $blocks;
  }
  else if ($op == 'view') {
    $block['subject'] = '';

    $query = explode('/', $_SERVER['QUERY_STRING']);
    $node = node_load(array('nid' => $query[1]));
    
    $date_time = date_parse_from_format('Y-m-d\TH:i:s', $node->field_project_end[0]['value']);
    $timestamp = mktime((int)$date_time['hour'], (int)$date_time['minute'], (int)$date_time['second'], (int)$date_time['month'], (int)$date_time['day'], (int)$date_time['year']);

    $node->days_left = round(($timestamp - time()) / 86400);
    $user_profile = node_load(array('uid' => $node->uid, 'type' => 'profile'));

    $block['content'] = theme('weeve_project_info_block', $node, $user_profile);

    return $block;
  }
}

function weeve_project_preprocess_page(&$vars) {
  if ($vars['node']->type == 'project') {
    $vars['node_menu'] = weeve_project_menu_html($vars['node']->nid);
  }

  if (in_array('page-project-updates', $vars['template_files']) || 
      in_array('page-project-comments', $vars['template_files']) ||
      in_array('page-project-edit', $vars['template_files'])) {
    $query = explode('/', $_SERVER['QUERY_STRING']);
    $vars['node_menu'] = weeve_project_menu_html($query[1]);
    $node = node_load(array('nid' => $query[1]));
    $author = node_load(array('uid' => $node->uid, 'type' => 'profile'));
    $node->author = $author;
    $vars['node'] = $node;
    $vars['title'] = $vars['node']->title;
    $vars['template_files'][] = 'page-node-project';
  }

  if ($vars['node']->type == 'project_update') {
    $vars['node_menu'] = weeve_project_menu_html($vars['node']->field_update_project[0]['nid']);
    $vars['title'] = $vars['node']->field_update_project[0]['safe']['title'];
  }
}

function weeve_project_terms_form() {
  if (_weeve_project_is_allowed_create_project()) {
    global $user;
    drupal_goto('account/' . $user->uid . '/projects');
  }

  $form = array();
  $form['accept'] = array(
    '#type' => 'checkbox',
    '#title' => t("I have read and understand Weeve's guidelines and conditions"),
    '#required' => true
  );

  $form['submit'] = array('#type' => 'submit', '#value' => t('Save'));

  return $form;
}

function weeve_project_terms_form_validate($form, &$form_state) {
  if ($form_state['values']['accept'] == 0) {
    form_set_error('accept', t("Please accept our terms before proceeding"));
  }
}

function weeve_project_terms_form_submit($form, &$form_state) {
  $_SESSION['project_terms_accepted'] = true;
  drupal_goto('node/add/project-request');
}

/**
* Custom after_build callback handler.
*/
function _weeve_project_after_build($form, &$form_state) {
  // Use this one if the field is placed inside a fieldgroup.
  _weeve_project_fix_disabled($form['field_project_amount_need']);
  _weeve_project_fix_disabled($form['group_project_date']['field_project_end']);
  _weeve_project_fix_disabled($form['group_project_date']['field_project_start']);
  _weeve_project_fix_disabled($form['field_project_video']);
  _weeve_project_fix_disabled($form['field_project_image']);
  _weeve_project_fix_disabled($form['taxonomy'][VOCABULARY_PROJECT_CATEGORIES_ID]);

  //When using a group
  //_weeve_project_fix_disabled($form['some_group']['field_some_field']);

  return $form;
}

function _weeve_project_fix_readonly(&$elements) {
   foreach (element_children($elements) as $key) {
    if (isset($elements[$key]) && $elements[$key]) {

      // Recurse through all children elements.
      _weeve_project_fix_readonly($elements[$key]);
    }
  }

  if (!isset($elements['#attributes'])) {
    $elements['#attributes'] = array();
  }
  $elements['#attributes']['disabled'] = 'disabled';
}

/**
* Recursively set the disabled attribute of a CCK field
* and all its dependent FAPI elements.
*/
function _weeve_project_fix_disabled(&$elements) {
  foreach (element_children($elements) as $key) {
    if (isset($elements[$key]) && $elements[$key]) {

      // Recurse through all children elements.
      _weeve_project_fix_disabled($elements[$key]);
    }
  }

  if (!isset($elements['#attributes'])) {
    $elements['#attributes'] = array();
  }
  $elements['#attributes']['disabled'] = 'disabled';
}

function _weeve_project_is_allowed_create_proposal() {
  global $user;  

  if (_weeve_is_admin()) {
    return true;
  }

  $query = "SELECT node.nid AS nid
   FROM node node
   INNER JOIN content_type_project_request node_data_field_proposal_status ON node.vid = node_data_field_proposal_status.vid
   LEFT JOIN content_type_project_request node_data_field_proposal_project ON node.vid = node_data_field_proposal_project.vid
   WHERE (node.type in ('project_request')) AND (node_data_field_proposal_status.field_proposal_status_value IN ('new', 'review', 'approve'))
   AND (node_data_field_proposal_project.field_proposal_project_nid IS NULL)
   AND node.uid = %d";

  $result = db_query($query, array($user->uid));
  $node = db_fetch_object($result);
  
  if ($node) {
    //Query checks if there is active proposal without project attached to it
    return false;
  }
  
  return true;
}

function _weeve_project_is_allowed_create_project($nid = null) {
  global $user;

  if (_weeve_is_admin()) {
    return true;
  }

  $query = "
   SELECT node.nid AS nid
   FROM node node
   INNER JOIN content_type_project_request node_data_field_proposal_status ON node.vid = node_data_field_proposal_status.vid
   LEFT JOIN content_type_project_request node_data_field_proposal_project ON node.vid = node_data_field_proposal_project.vid
   WHERE (node.type in ('project_request')) AND (node_data_field_proposal_status.field_proposal_status_value = 'approve')
   AND (node_data_field_proposal_project.field_proposal_project_nid IS NULL)
   AND node.uid = %d";

  $result = db_query($query, array($user->uid));
  $node = db_fetch_object($result);

  if ($node) {
    //Query checks if there is accepted proposal without project attached to it

    if ($nid && $node->nid == $nid) {
      return true;
    }

    if ($nid == null) {
      return true;
    }
  }

  return false;
}

function _weeve_project_is_user_npo() {
  global $user;
  return in_array('npo', $user->roles);
}

function _weeve_is_admin() {
  global $user;
  return in_array('admin', $user->roles);
}


if (!function_exists('date_parse_from_format')) {
  function date_parse_from_format($format, $date) {
    $i = 0;
    $pos = 0;
    $output = array();
    while ($i < strlen($format)) {
      $pat = substr($format, $i, 1);
      $i++;
      switch ($pat) {
        case 'd': //    Day of the month, 2 digits with leading zeros    01 to 31
          $output['day'] = substr($date, $pos, 2);
          $pos+=2;
          break;
        case 'D': // A textual representation of a day: three letters    Mon through Sun
          //TODO
          break;
        case 'j': //    Day of the month without leading zeros    1 to 31
          $output['day'] = substr($date, $pos, 2);
          if (!is_numeric($output['day']) || ($output['day'] > 31)) {
            $output['day'] = substr($date, $pos, 1);
            $pos--;
          }
          $pos+=2;
          break;
        case 'm': //    Numeric representation of a month: with leading zeros    01 through 12
          $output['month'] = (int) substr($date, $pos, 2);
          $pos+=2;
          break;
        case 'n': //    Numeric representation of a month: without leading zeros    1 through 12
          $output['month'] = substr($date, $pos, 2);
          if (!is_numeric($output['month']) || ($output['month'] > 12)) {
            $output['month'] = substr($date, $pos, 1);
            $pos--;
          }
          $pos+=2;
          break;
        case 'Y': //    A full numeric representation of a year: 4 digits    Examples: 1999 or 2003
          $output['year'] = (int) substr($date, $pos, 4);
          $pos+=4;
          break;
        case 'y': //    A two digit representation of a year    Examples: 99 or 03
          $output['year'] = (int) substr($date, $pos, 2);
          $pos+=2;
          break;
        case 'g': //    12-hour format of an hour without leading zeros    1 through 12
          $output['hour'] = substr($date, $pos, 2);
          if (!is_numeric($output['day']) || ($output['hour'] > 12)) {
            $output['hour'] = substr($date, $pos, 1);
            $pos--;
          }
          $pos+=2;
          break;
        case 'G': //    24-hour format of an hour without leading zeros    0 through 23
          $output['hour'] = substr($date, $pos, 2);
          if (!is_numeric($output['day']) || ($output['hour'] > 23)) {
            $output['hour'] = substr($date, $pos, 1);
            $pos--;
          }
          $pos+=2;
          break;
        case 'h': //    12-hour format of an hour with leading zeros    01 through 12
          $output['hour'] = (int) substr($date, $pos, 2);
          $pos+=2;
          break;
        case 'H': //    24-hour format of an hour with leading zeros    00 through 23
          $output['hour'] = (int) substr($date, $pos, 2);
          $pos+=2;
          break;
        case 'i': //    Minutes with leading zeros    00 to 59
          $output['minute'] = (int) substr($date, $pos, 2);
          $pos+=2;
          break;
        case 's': //    Seconds: with leading zeros    00 through 59
          $output['second'] = (int) substr($date, $pos, 2);
          $pos+=2;
          break;
        case 'l': // (lowercase 'L')    A full textual representation of the day of the week    Sunday through Saturday
        case 'N': //    ISO-8601 numeric representation of the day of the week (added in PHP 5.1.0)    1 (for Monday) through 7 (for Sunday)
        case 'S': //    English ordinal suffix for the day of the month: 2 characters    st: nd: rd or th. Works well with j
        case 'w': //    Numeric representation of the day of the week    0 (for Sunday) through 6 (for Saturday)
        case 'z': //    The day of the year (starting from 0)    0 through 365
        case 'W': //    ISO-8601 week number of year: weeks starting on Monday (added in PHP 4.1.0)    Example: 42 (the 42nd week in the year)
        case 'F': //    A full textual representation of a month: such as January or March    January through December
        case 'u': //    Microseconds (added in PHP 5.2.2)    Example: 654321
        case 't': //    Number of days in the given month    28 through 31
        case 'L': //    Whether it's a leap year    1 if it is a leap year: 0 otherwise.
        case 'o': //    ISO-8601 year number. This has the same value as Y: except that if the ISO week number (W) belongs to the previous or next year: that year is used instead. (added in PHP 5.1.0)    Examples: 1999 or 2003
        case 'e': //    Timezone identifier (added in PHP 5.1.0)    Examples: UTC: GMT: Atlantic/Azores
        case 'I': // (capital i)    Whether or not the date is in daylight saving time    1 if Daylight Saving Time: 0 otherwise.
        case 'O': //    Difference to Greenwich time (GMT) in hours    Example: +0200
        case 'P': //    Difference to Greenwich time (GMT) with colon between hours and minutes (added in PHP 5.1.3)    Example: +02:00
        case 'T': //    Timezone abbreviation    Examples: EST: MDT ...
        case 'Z': //    Timezone offset in seconds. The offset for timezones west of UTC is always negative: and for those east of UTC is always positive.    -43200 through 50400
        case 'a': //    Lowercase Ante meridiem and Post meridiem    am or pm
        case 'A': //    Uppercase Ante meridiem and Post meridiem    AM or PM
        case 'B': //    Swatch Internet time    000 through 999
        case 'M': //    A short textual representation of a month: three letters    Jan through Dec
        default:
          $pos++;
      }
    }
    return $output;
  }
}
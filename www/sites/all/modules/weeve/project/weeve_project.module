<?php
define('VOCABULARY_PROJECT_CATEGORIES_ID', 1);

function weeve_project_menu() {
  $items = array();

  $items['project/terms'] = array(
    'title' => 'Accept terms',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('weeve_project_terms_form'),
    'access callback' => 'weeve_project_proposal_valid',
    'type' => MENU_CALLBACK,
  );
  
  return $items;
}

function weeve_project_menu_alter($items) {
  $items['node/add/project-request']['access callback'] = 'weeve_project_proposal_valid';

  $items['node/add/project']['access callback'] = 'weeve_project_project_valid';
}

function weeve_project_project_valid() {
  if (_weeve_project_is_allowed_create_project ()) {
    return user_access('create project content');
  }

  return false;
}

function weeve_project_proposal_valid() {
  if (_weeve_project_is_allowed_create_proposal()) {
    //No "active" proposals for now
    if (!user_access('create project_request content')) {
      return false;
    }        
  } else {
    //Have "active" proposals. User should use active proposal, but return true
    //to redirect later for selection of proposals
    return weeve_project_project_valid();
  }

  return true;
}

function weeve_project_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'project_node_form' && arg(1) == 'add') {
    global $user;
    $proposal_nid = arg(3);

    if (!$proposal_nid || !_weeve_project_is_allowed_create_project($proposal_nid)) {
      drupal_goto('user/' . $user->uid . '/proposals');
      exit;
    }
    $proposal = node_load(array('nid' => $proposal_nid));
    foreach($proposal->taxonomy as $term_id => $term) {
      if ($term->vid == VOCABULARY_PROJECT_CATEGORIES_ID) {
        $form['taxonomy'][VOCABULARY_PROJECT_CATEGORIES_ID]['#default_value'] = array($term_id);        
        $form['taxonomy'][VOCABULARY_PROJECT_CATEGORIES_ID]['#attributes'] = array('disabled' => 'disabled');
      }
    }

    $form['field_project_proposal']['#value'][0]['nid'] = $proposal_nid;
    $form['#submit'][] = 'weeve_project_project_add_submit';
  }

  if ($form_id == 'project_request_node_form' && arg(1) == 'add') {
    if (!isset($_SESSION['project_terms_accepted']) || !$_SESSION['project_terms_accepted']) {
      drupal_goto('project/terms');
    }

    if (!_weeve_project_is_allowed_create_proposal()) {
      global $user;
      drupal_goto('user/' . $user->uid . '/proposals');
      exit;
    }
  }
}

function weeve_project_project_add_submit($form, &$form_state) {
  $proposal_nid = $form['field_project_proposal']['#value'][0]['nid'];
}

function weeve_project_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  global $user;
  
  if ($op == 'view' && $user->uid == $node->uid && $node->type == 'project_request') {
    if (_weeve_project_is_allowed_create_project ()) {
      $node->project_link = true;
    }
  }

  if ($op == 'insert' && $node->type == 'project') {
    $proposal_nid = $node->field_project_proposal[0]['nid'];
    $proposal = node_load(array('nid' => $proposal_nid));

    $proposal->field_proposal_project[0]['nid'] = $node->nid;
    $proposal->field_proposal_status[0]['value'] = 'running';
    node_save($proposal);
  }
}

function weeve_project_theme() {
  return array(
    'weeve_project_terms_form' => array(
      'arguments' => array('form' => null),
      'template' => 'tpl/terms_form'
    )
  );
}

function theme_weeve_project_terms_form($form) {
  return theme('weeve_project_terms_form', $form);
}

function weeve_project_terms_form() {
  if (_weeve_project_is_allowed_create_project()) {
    global $user;
    drupal_goto('user/' . $user->uid . '/proposals');
  }

  $form = array();
  $form['accept'] = array(
    '#type' => 'checkbox',
    '#title' => t("I have read and understand Weeve's guidelines and conditions"),
    '#required' => true
  );

  $form['submit'] = array('#type' => 'submit', '#value' => t('Save'));

  return $form;
}

function weeve_project_terms_form_validate($form, &$form_state) {
  if ($form_state['values']['accept'] == 0) {
    form_set_error('accept', t("Please accept our terms before proceeding"));
  }
}

function weeve_project_terms_form_submit($form, &$form_state) {
  $_SESSION['project_terms_accepted'] = true;
  drupal_goto('node/add/project-request');
}

function _weeve_project_is_allowed_create_proposal() {
  global $user;  

  if (_weeve_is_admin()) {
    return true;
  }

  $query = "SELECT node.nid AS nid
   FROM node node
   INNER JOIN content_type_project_request node_data_field_proposal_status ON node.vid = node_data_field_proposal_status.vid
   LEFT JOIN content_type_project_request node_data_field_proposal_project ON node.vid = node_data_field_proposal_project.vid
   WHERE (node.type in ('project_request')) AND (node_data_field_proposal_status.field_proposal_status_value IN ('new', 'review', 'approve'))
   AND (node_data_field_proposal_project.field_proposal_project_nid IS NULL)
   AND node.uid = %d";

  $result = db_query($query, array($user->uid));
  $node = db_fetch_object($result);
  
  if ($node) {
    //Query checks if there is active proposal without project attached to it
    return false;
  }
  
  return true;
}

function _weeve_project_is_allowed_create_project($nid = null) {
  global $user;

  if (_weeve_is_admin()) {
    return true;
  }

  $query = "
   SELECT node.nid AS nid
   FROM node node
   INNER JOIN content_type_project_request node_data_field_proposal_status ON node.vid = node_data_field_proposal_status.vid
   LEFT JOIN content_type_project_request node_data_field_proposal_project ON node.vid = node_data_field_proposal_project.vid
   WHERE (node.type in ('project_request')) AND (node_data_field_proposal_status.field_proposal_status_value = 'approve')
   AND (node_data_field_proposal_project.field_proposal_project_nid IS NULL)
   AND node.uid = %d";

  $result = db_query($query, array($user->uid));
  $node = db_fetch_object($result);

  if ($node) {
    //Query checks if there is accepted proposal without project attached to it

    if ($nid && $node->nid == $nid) {
      return true;
    }

    if ($nid == null) {
      return true;
    }
  }

  return false;
}

function _weeve_project_is_user_npo() {
  global $user;
  return in_array('npo', $user->roles);
}

function _weeve_is_admin() {
  global $user;
  return in_array('admin', $user->roles);
}
